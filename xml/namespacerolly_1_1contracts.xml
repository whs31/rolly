<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacerolly_1_1contracts" kind="namespace" language="C++">
    <compoundname>rolly::contracts</compoundname>
    <innerclass refid="structrolly_1_1contracts_1_1contract__violation" prot="public">rolly::contracts::contract_violation</innerclass>
    <innernamespace refid="namespacerolly_1_1contracts_1_1audit">rolly::contracts::audit</innernamespace>
    <innernamespace refid="namespacerolly_1_1contracts_1_1detail">rolly::contracts::detail</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacerolly_1_1contracts_1abc0d6ffe3d1fdb96d3872c5148f529e2" prot="public" static="no" strong="yes">
        <type>signed char</type>
        <name>contract_type</name>
        <enumvalue id="namespacerolly_1_1contracts_1abc0d6ffe3d1fdb96d3872c5148f529e2ac3c270a815f2c6329cf95844e757cf7f" prot="public">
          <name>precondition</name>
          <briefdescription>
<para>Precondition. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1_1contracts_1abc0d6ffe3d1fdb96d3872c5148f529e2a251848760bc80cc0b08dec58b4199c6b" prot="public">
          <name>postcondition</name>
          <briefdescription>
<para>Postcondition. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1_1contracts_1abc0d6ffe3d1fdb96d3872c5148f529e2a97a1fb4792ab0d80857d825020ced2f0" prot="public">
          <name>invariant</name>
          <briefdescription>
<para>Invariant. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type of contract. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="75" column="27" bodyfile="include/rolly/contracts.h" bodystart="75" bodyend="79"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacerolly_1_1contracts_1aca5defb1c056aa55df22bc093159c32e" prot="public" static="no">
        <type><ref refid="cpp/utility/functional/function" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::function</ref>&lt; void(<ref refid="structrolly_1_1contracts_1_1contract__violation" kindref="compound">contract_violation</ref> const  &amp;)&gt;</type>
        <definition>using contract_violation_handler =  std::function&lt;void(contract_violation const&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>contract_violation_handler</name>
        <briefdescription>
<para>Contract violation handler type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Handler function must be <computeroutput>[[noreturn]]</computeroutput>. The behavior is undefined if it does not terminate the program. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="97" column="3" bodyfile="include/rolly/contracts.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacerolly_1_1contracts_1ab0bc120d0ba17557276c0082ec51e7b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::default_contract_violation_handler</definition>
        <argsstring>(contract_violation const &amp;violation)</argsstring>
        <name>default_contract_violation_handler</name>
        <param>
          <type><ref refid="structrolly_1_1contracts_1_1contract__violation" kindref="compound">contract_violation</ref> const &amp;</type>
          <declname>violation</declname>
        </param>
        <briefdescription>
<para>Default contract violation handler. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of the contract violation handler.</para>
<para>Prints the violation to the standard error stream and terminates the program. If it is possible, colors the violation message in red.</para>
<para>Example output:</para>
<para><programlisting><codeline><highlight class="normal">Contract<sp/>violation<sp/>(invariant):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Hello,<sp/>world!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>in<sp/>function<sp/>&apos;int<sp/>__cdecl<sp/>main(int,char<sp/>**)&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>in<sp/>file<sp/>&apos;D:/dev/my/floppy-dev/bin/main.cc&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>at<sp/>line<sp/>7:18</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Process<sp/>finished<sp/>with<sp/>exit<sp/>code<sp/>3</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>violation</parametername>
</parameternamelist>
<parameterdescription>
<para>Contract violation data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="123" column="10" declfile="include/rolly/contracts.h" declline="123" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacerolly_1_1contracts_1aca5defb1c056aa55df22bc093159c32e" kindref="member">contract_violation_handler</ref> &amp;</type>
        <definition>contract_violation_handler&amp; rolly::contracts::violation_handler</definition>
        <argsstring>()</argsstring>
        <name>violation_handler</name>
        <briefdescription>
<para>Returns the current global contract violation handler. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mutable reference to the global contract violation handler. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ab0bc120d0ba17557276c0082ec51e7b0" kindref="member">default_contract_violation_handler</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ad4881604e9bfa8b79bcb9c1e23f1e7af" kindref="member">set_violation_handler</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="135" column="32" declfile="include/rolly/contracts.h" declline="135" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1ad4881604e9bfa8b79bcb9c1e23f1e7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacerolly_1_1contracts_1aca5defb1c056aa55df22bc093159c32e" kindref="member">contract_violation_handler</ref></type>
        <definition>contract_violation_handler rolly::contracts::set_violation_handler</definition>
        <argsstring>(contract_violation_handler handler)</argsstring>
        <name>set_violation_handler</name>
        <param>
          <type><ref refid="namespacerolly_1_1contracts_1aca5defb1c056aa55df22bc093159c32e" kindref="member">contract_violation_handler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Sets the global contract violation handler and returns the old one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Handler function must be <computeroutput>[[noreturn]]</computeroutput>. The behavior is undefined if it does not terminate the program. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Contract violation handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Old global contract violation handler. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ab0bc120d0ba17557276c0082ec51e7b0" kindref="member">default_contract_violation_handler</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="150" column="5" declfile="include/rolly/contracts.h" declline="150" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::invariant</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Invariant violated&quot;,)</argsstring>
        <name>invariant</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Invariant violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>invariant</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Invariant expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Invariant violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1a85522a06efdcca823d5c7119ebafb850" kindref="member">broken_invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" kindref="member">precondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="202" column="5" bodyfile="include/rolly/contracts.h" bodystart="202" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::precondition</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Precondition violated&quot;,)</argsstring>
        <name>precondition</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Precondition violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>precondition</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Precondition expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Precondition violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation location in source code. Defaults to current location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ab1f48107fb7de5e343fb595d41219bfa" kindref="member">broken_precondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="227" column="5" bodyfile="include/rolly/contracts.h" bodystart="227" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::postcondition</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Postcondition violated&quot;,)</argsstring>
        <name>postcondition</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Postcondition violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>postcondition</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Postcondition expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Postcondition violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1a4660f2a90742b97d33d90f3dfd4ee812" kindref="member">broken_postcondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" kindref="member">precondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="251" column="5" bodyfile="include/rolly/contracts.h" bodystart="251" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1a85522a06efdcca823d5c7119ebafb850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::broken_invariant</definition>
        <argsstring>(std::string_view message=&quot;Broken invariant&quot;,)</argsstring>
        <name>broken_invariant</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken <ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">invariant</ref>&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken invariant violation. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken invariant&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">invariant</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="273" column="10" bodyfile="include/rolly/contracts.h" bodystart="273" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1ab1f48107fb7de5e343fb595d41219bfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::broken_precondition</definition>
        <argsstring>(std::string_view message=&quot;Broken precondition&quot;,)</argsstring>
        <name>broken_precondition</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken <ref refid="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" kindref="member">precondition</ref>&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken precondition violation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken precondition&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" kindref="member">precondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="292" column="10" bodyfile="include/rolly/contracts.h" bodystart="292" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1a4660f2a90742b97d33d90f3dfd4ee812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::broken_postcondition</definition>
        <argsstring>(std::string_view message=&quot;Broken postcondition&quot;,)</argsstring>
        <name>broken_postcondition</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken <ref refid="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" kindref="member">postcondition</ref>&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken postcondition violation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken postcondition&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="311" column="10" bodyfile="include/rolly/contracts.h" bodystart="311" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1adfba2187b8f7e9795c0fb5ec669a15a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::not_implemented</definition>
        <argsstring>()</argsstring>
        <name>not_implemented</name>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken invariant violation. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for marking a function as <emphasis>unimplemented</emphasis>. <simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">invariant</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="330" column="10" bodyfile="include/rolly/contracts.h" bodystart="330" bodyend="336"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contract-programming related functions and classes. </para>
    </briefdescription>
    <detaileddescription>
<para>Mimics the canceled C++20 contracts proposal.</para>
<sect4 id="namespacerolly_1_1contracts_1Quick">
<title>introduction</title>
<para>Can be used to check preconditions, postconditions and invariants instead of default C-style <computeroutput>assert</computeroutput>: <itemizedlist>
<listitem>
<para><ref refid="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" kindref="member">rolly::contracts::precondition</ref> - these are conditions that must be true before a function (or code segment) executes, in order for the code to work correctly. E.g., a bisection search will work only if the vector is sorted. Another: Converting to polar form will work only if the cartesian coordinates are valid. <bold>It&apos;s a good idea to document preconditions.</bold> </para>
</listitem>
<listitem>
<para><ref refid="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" kindref="member">rolly::contracts::postcondition</ref> - these are conditions that are true after a functions returns or at the end of a code segment. <bold>Document significant postconditions (i.e., ones that refer to the purpose of the code) .</bold> </para>
</listitem>
<listitem>
<para><ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">rolly::contracts::invariant</ref> - these are conditions that is supposed to be true all the time (except for brief, well-defined intervals). E.g., one invariant would be that if the cartesian and polar flags are both true, then the cartesian and polar member variables must represent the same complex number. Another example: in the selection sort, the part of the vector we have already scanned is sorted. <bold>It&apos;s a good idea to document significant invariants.</bold> </para>
</listitem>
</itemizedlist>
</para>
</sect4>
<sect4 id="namespacerolly_1_1contracts_1Usage">
<title>Usage</title>
<para>You can include <ref refid="contracts_8h_source" kindref="compound">contracts.h</ref> in your code as follows: <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;rolly/contracts.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>#include<sp/>&lt;rolly/prelude.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerolly_1_1contracts" kindref="compound">rolly::contracts</ref>;<sp/></highlight><highlight class="comment">//<sp/>or<sp/>using<sp/>namespace<sp/>rolly::prelude<sp/>instead</highlight></codeline>
</programlisting></para>
</sect4>
<sect4 id="namespacerolly_1_1contracts_1Examples">
<title>Examples</title>
<para>In first example we use <ref refid="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" kindref="member">rolly::contracts::precondition</ref> to ensure that second argument, passed to function is not zero: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>divide(i32<sp/>a,<sp/>i32<sp/>b)<sp/>-&gt;<sp/><ref refid="namespacerolly_1_1types_1aec4a1429cc91fb7ff41599b263c348cc" kindref="member">i32</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" kindref="member">contracts::precondition</ref>(b<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>divide<sp/>by<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>/<sp/>b;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>In second example, we ensure that the integer is not overflowed after summing two numbers using <ref refid="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" kindref="member">rolly::contracts::postcondition</ref> : <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>add(i32<sp/>a,<sp/>i32<sp/>b)<sp/>-&gt;<sp/><ref refid="namespacerolly_1_1types_1aec4a1429cc91fb7ff41599b263c348cc" kindref="member">i32</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>a<sp/>+<sp/>b;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" kindref="member">contracts::postcondition</ref>(sum<sp/>&gt;=<sp/>a<sp/>and<sp/>sum<sp/>&gt;=<sp/>b,<sp/></highlight><highlight class="stringliteral">&quot;Overflow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>In third example, we the standard stream is open for writing using <ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">rolly::contracts::invariant</ref> : <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>println(std::string_view<sp/>message)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">contracts::invariant</ref>(<ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/endl" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::endl</ref>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>It is a good idea to document both preconditions, postconditions and invariants. Use Doxygen tags <computeroutput>\pre</computeroutput>, <computeroutput>\post</computeroutput> and <computeroutput>\invariant</computeroutput> for this purpose (see <ulink url="http://www.stack.nl/~dimitri/doxygen/">http://www.stack.nl/~dimitri/doxygen/</ulink>). </para>
</simplesect>
</para>
</sect4>
    </detaileddescription>
    <location file="include/rolly/contracts.h" line="71" column="26"/>
  </compounddef>
</doxygen>
