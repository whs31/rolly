<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structrolly_1_1types_1_1angle" kind="struct" language="C++" prot="public">
    <compoundname>rolly::types::angle</compoundname>
    <includes refid="angle_8h" local="no">angle.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref></type>
        <declname>T</declname>
        <defname>T</defname>
        <defval><ref refid="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" kindref="member">f32</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" prot="public" static="no">
        <type>T</type>
        <definition>using number_type =  T</definition>
        <argsstring></argsstring>
        <name>number_type</name>
        <briefdescription>
<para>Underlying number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="36" column="7" bodyfile="include/rolly/types/angle.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structrolly_1_1types_1_1angle_1a2c7a3a8ecd971a7784f8c3cfcbaae7ac" prot="private" static="no" mutable="no">
        <type><ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>number_type m_</definition>
        <argsstring></argsstring>
        <name>m_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="554" column="19" bodyfile="include/rolly/types/angle.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a0b3265454614c3cb2c563ec74dfeb851" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr angle</definition>
        <argsstring>()</argsstring>
        <name>angle</name>
        <briefdescription>
<para>Constructs an empty angle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1angle_1afa7805bec73a51bf1c0256515e28ee56" kindref="member">angle::zero</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="42" column="17" bodyfile="include/rolly/types/angle.h" bodystart="42" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a33f20a9549cf6a2b79817fde3034aa33" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr angle</definition>
        <argsstring>(number_type const value)</argsstring>
        <name>angle</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs an angle from a numeric value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Numeric value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="49" column="26" bodyfile="include/rolly/types/angle.h" bodystart="49" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a62ac8ec6740b5914e8f9226c7714dbe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~angle</definition>
        <argsstring>()=default</argsstring>
        <name>~angle</name>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="55" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a2ddf4eb45f66fc53a35a92fec3fd22b9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr angle</definition>
        <argsstring>(angle const &amp;)=default</argsstring>
        <name>angle</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="60" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a908e7bc2c2d8e9a26301ff68ddbb023c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr angle</definition>
        <argsstring>(angle &amp;&amp;)=default</argsstring>
        <name>angle</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="65" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a02bfe50e08aad2328c0836a4c362ceb7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>constexpr angle&amp; operator=</definition>
        <argsstring>(angle const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="70" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ade8996f319db17f70ad5ce969e840558" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>constexpr angle&amp; operator=</definition>
        <argsstring>(angle &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Move assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="75" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1aac993ecccd3d88aafefb6b8e3caa1dee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string to_string</definition>
        <argsstring>() const</argsstring>
        <name>to_string</name>
        <briefdescription>
<para>Returns string representation of the angle. </para>
        </briefdescription>
        <detaileddescription>
<para>Angle is represented in degrees. If the underlying number type is floating point, it is rounded to two decimal places. <simplesect kind="return"><para>String representation of the object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="83" column="20" bodyfile="include/rolly/types/angle.h" bodystart="83" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a88fdf66be062767e4090d10a7d1de681" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type in</definition>
        <argsstring>(angle_unit u) const</argsstring>
        <name>in</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a3f652efe88945dad9f5db87673b0909e" kindref="member">angle_unit</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>Returns the angle in the given unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit to return the angle in. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Angle in the given unit. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="95" column="30" bodyfile="include/rolly/types/angle.h" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a4d596e0bb6f37199a669740aab6256ac" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type radians</definition>
        <argsstring>() const</argsstring>
        <name>radians</name>
        <briefdescription>
<para>Returns the angle in radians. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1angle_1a6133257e807ce7986b58d501bc09d734" kindref="member">degrees</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="107" column="30" bodyfile="include/rolly/types/angle.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a6133257e807ce7986b58d501bc09d734" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type degrees</definition>
        <argsstring>() const</argsstring>
        <name>degrees</name>
        <briefdescription>
<para>Returns the angle in degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1angle_1a4d596e0bb6f37199a669740aab6256ac" kindref="member">radians</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="113" column="30" bodyfile="include/rolly/types/angle.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1aa0e06aa96b91570c0bf5a341e27a19b5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle positive</definition>
        <argsstring>() const</argsstring>
        <name>positive</name>
        <briefdescription>
<para>Returns this angle as number in range <computeroutput>[0, 2pi)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="118" column="24" bodyfile="include/rolly/types/angle.h" bodystart="118" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a65712cf7f7c8341f6ffb6f3604573e6d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle signed_</definition>
        <argsstring>() const</argsstring>
        <name>signed_</name>
        <briefdescription>
<para>Returns this angle as number in range <computeroutput>[-pi, pi)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="132" column="24" bodyfile="include/rolly/types/angle.h" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ad96ebdfffee4655081b053b19084c3d9" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle angle_to</definition>
        <argsstring>(angle const &amp;other) const</argsstring>
        <name>angle_to</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the shortest signed angle between two angles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other angle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Takes wrapping and signs into account. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="144" column="24" bodyfile="include/rolly/types/angle.h" bodystart="144" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ab50fe362d80e4a70a8c67fc749d1a0fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__macros_1ga0c9fde80eb6d7ab75a391dc178ef18b7" kindref="member">___constexpr___</ref> <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>___constexpr___ angle lerp</definition>
        <argsstring>(angle const &amp;other, T t) const</argsstring>
        <name>lerp</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Linear interpolation between two angles, using the shortest path. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other angle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolation factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interpolated angle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="156" column="30" bodyfile="include/rolly/types/angle.h" bodystart="156" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ac3ca04e925cf9e490eadfa612dcb2810" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="cpp/utility/pair" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::pair</ref>&lt; T, T &gt;</type>
        <definition>constexpr std::pair&lt;T, T&gt; sin_cos</definition>
        <argsstring>() const</argsstring>
        <name>sin_cos</name>
        <briefdescription>
<para>Returns the sine and cosine of the angle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pair of sine and cosine. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="168" column="28" bodyfile="include/rolly/types/angle.h" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ab4296efb618a5d97bd8779ec48fa7f56" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>)</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref>&lt; U &gt;</type>
        <definition>constexpr angle&lt;U&gt; cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
<para>Casts the angle to another numeric type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Target numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Casted angle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="178" column="24" bodyfile="include/rolly/types/angle.h" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a524546a00e65da4c0a58a20d7913a593" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <briefdescription>
<para>Returns the underlying numeric scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The underlying numeric scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="246" column="30" bodyfile="include/rolly/types/angle.h" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a7b1e681365ca2379776ba38496c8d9e1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>)</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>constexpr U</type>
        <definition>constexpr U as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <briefdescription>
<para>Returns this numeric newtype as number in another numeric representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type. Must satisfy concept <computeroutput><ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">rolly::concepts::num</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="253" column="20" bodyfile="include/rolly/types/angle.h" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a4eadd631845fcfea8cf526a58403cf9b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" kindref="member">f32</ref></type>
        <definition>constexpr f32 as_f32</definition>
        <argsstring>() const</argsstring>
        <name>as_f32</name>
        <briefdescription>
<para>Returns this angle as 32-bit floating-point number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="260" column="23" bodyfile="include/rolly/types/angle.h" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a4f3d1e4786e042fac8b82314a89439ce" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1abc2f107791bd7c1d49ecf0f168c085a3" kindref="member">f64</ref></type>
        <definition>constexpr f64 as_f64</definition>
        <argsstring>() const</argsstring>
        <name>as_f64</name>
        <briefdescription>
<para>Returns this angle as 64-bit floating-point number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="265" column="23" bodyfile="include/rolly/types/angle.h" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a287bb4c3be885ca0f758ecfa8ad27682" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_finite</definition>
        <argsstring>() const</argsstring>
        <name>is_finite</name>
        <briefdescription>
<para>Returns true if this angle is a finite number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="270" column="13" bodyfile="include/rolly/types/angle.h" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a6affa04d1ef290bb34a5b569ca8798a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__macros_1ga0c9fde80eb6d7ab75a391dc178ef18b7" kindref="member">___constexpr___</ref> <ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>___constexpr___ number_type sin</definition>
        <argsstring>() const</argsstring>
        <name>sin</name>
        <briefdescription>
<para>Returns the sine of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="275" column="36" bodyfile="include/rolly/types/angle.h" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ab81f96b5cb802f028c83868875fa42c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__macros_1ga0c9fde80eb6d7ab75a391dc178ef18b7" kindref="member">___constexpr___</ref> <ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>___constexpr___ number_type cos</definition>
        <argsstring>() const</argsstring>
        <name>cos</name>
        <briefdescription>
<para>Returns the cosine of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="280" column="36" bodyfile="include/rolly/types/angle.h" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a0c7665e88eb32274796d8cefb28b1c30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__macros_1ga0c9fde80eb6d7ab75a391dc178ef18b7" kindref="member">___constexpr___</ref> <ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>___constexpr___ number_type tan</definition>
        <argsstring>() const</argsstring>
        <name>tan</name>
        <briefdescription>
<para>Returns the tangent of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="285" column="36" bodyfile="include/rolly/types/angle.h" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1aa75b20c064709be7f48b79fbe1135fc2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__macros_1ga0c9fde80eb6d7ab75a391dc178ef18b7" kindref="member">___constexpr___</ref> <ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>___constexpr___ number_type asin</definition>
        <argsstring>() const</argsstring>
        <name>asin</name>
        <briefdescription>
<para>Returns the arc sine of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="290" column="36" bodyfile="include/rolly/types/angle.h" bodystart="290" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a13388a97dd44dac80896feb90613d45d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__macros_1ga0c9fde80eb6d7ab75a391dc178ef18b7" kindref="member">___constexpr___</ref> <ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>___constexpr___ number_type acos</definition>
        <argsstring>() const</argsstring>
        <name>acos</name>
        <briefdescription>
<para>Returns the arc cosine of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="295" column="36" bodyfile="include/rolly/types/angle.h" bodystart="295" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a214638797f0f6df8d0c82c2a4d1a1266" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__macros_1ga0c9fde80eb6d7ab75a391dc178ef18b7" kindref="member">___constexpr___</ref> <ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>___constexpr___ number_type atan</definition>
        <argsstring>() const</argsstring>
        <name>atan</name>
        <briefdescription>
<para>Returns the arc tangent of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="300" column="36" bodyfile="include/rolly/types/angle.h" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a566265d7ea4ab6649c2bfdf2e96145af" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T &amp;</type>
        <definition>constexpr T&amp; operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Increments the underlying value by 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="305" column="20" bodyfile="include/rolly/types/angle.h" bodystart="305" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1afe13db0e1af81cd99e0f21f4b35561f1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T &amp;</type>
        <definition>constexpr T&amp; operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Increments the underlying value by 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="313" column="20" bodyfile="include/rolly/types/angle.h" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1afd70a5715cd3b48b3a1f247e6f5bc0a8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T &amp;</type>
        <definition>constexpr T&amp; operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
<para>Decrements the underlying value by 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="321" column="20" bodyfile="include/rolly/types/angle.h" bodystart="321" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a32ad7696f348d2811a994e27daf6cc67" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T &amp;</type>
        <definition>constexpr T&amp; operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Decrements the underlying value by 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="329" column="20" bodyfile="include/rolly/types/angle.h" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ad0ed9dded3dc4405713f0b9270930a92" prot="public" static="no" constexpr="yes" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if underlying value is not <computeroutput>0</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="337" column="27" bodyfile="include/rolly/types/angle.h" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a11f5e5b2d5a79d40ca187cb76f1c5fff" prot="public" static="no" constexpr="yes" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr operator number_type</definition>
        <argsstring>() const</argsstring>
        <name>operator number_type</name>
        <briefdescription>
<para>Returns the underlying value as <computeroutput>number_type</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="342" column="27" bodyfile="include/rolly/types/angle.h" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1aefd7979ce2368b9ef98210aa864b6295" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator==</definition>
        <argsstring>(angle const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> angle with <ref refid="namespacerolly_1_1math_1a3ac3258dd6ee92741399970d50868c2e" kindref="member">rolly::math::approx_eq</ref> for equality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other angle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if both angles are approximately equal, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="349" column="23" bodyfile="include/rolly/types/angle.h" bodystart="349" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a309d0757a973d6d2c6614d0581b45d92" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator!=</definition>
        <argsstring>(angle const &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> angle with <ref refid="namespacerolly_1_1math_1a3ac3258dd6ee92741399970d50868c2e" kindref="member">rolly::math::approx_eq</ref> for inequality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other angle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if both angles are not approximately equal, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="358" column="23" bodyfile="include/rolly/types/angle.h" bodystart="358" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1aa23ff0fac2171ad6ce2140c4cd965d42" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&lt;</definition>
        <argsstring>(angle const &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> angle for less than. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other angle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if this angle is less than <emphasis>other</emphasis>, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="365" column="18" bodyfile="include/rolly/types/angle.h" bodystart="365" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a5ff964a65187ef94f6a280f9cbd5f2e5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&gt;</definition>
        <argsstring>(angle const &amp;other) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> angle for greater than. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other angle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if this angle is greater than <emphasis>other</emphasis>, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="372" column="23" bodyfile="include/rolly/types/angle.h" bodystart="372" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ae2dbf39105d4518d91f4ac2783106737" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&lt;=</definition>
        <argsstring>(angle const &amp;other) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> angle for less than or equal to. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other angle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if this angle is less than or equal to <emphasis>other</emphasis>, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="379" column="18" bodyfile="include/rolly/types/angle.h" bodystart="379" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a24164f3417a133a550089a5a276af6d9" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&gt;=</definition>
        <argsstring>(angle const &amp;other) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> angle for greater than or equal to. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other angle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if this angle is greater than or equal to <emphasis>other</emphasis>, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="386" column="23" bodyfile="include/rolly/types/angle.h" bodystart="386" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a187480616a4887aa0d98538df458e26d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Returns the underlying numeric scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The underlying numeric scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="392" column="30" bodyfile="include/rolly/types/angle.h" bodystart="392" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ab6cb838c89f8d1f7082caaf515cccfbe" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle operator+</definition>
        <argsstring>() const</argsstring>
        <name>operator+</name>
        <briefdescription>
<para>Returns <computeroutput>this</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="397" column="24" bodyfile="include/rolly/types/angle.h" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1af748c933998a173b97ccb5d74a9a9d10" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Returns <computeroutput>-this</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="402" column="24" bodyfile="include/rolly/types/angle.h" bodystart="402" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ada7d9122b1eb43d1a63e0a661d49ea60" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle operator+</definition>
        <argsstring>(angle const &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this + other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="408" column="24" bodyfile="include/rolly/types/angle.h" bodystart="408" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a9f62a83ad05047c663de6705ab6ce5f2" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle operator-</definition>
        <argsstring>(angle const &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this - other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="414" column="24" bodyfile="include/rolly/types/angle.h" bodystart="414" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a75f902dd70e3e238bfff25510eb96123" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle operator*</definition>
        <argsstring>(angle const &amp;other) const</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this * other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="420" column="24" bodyfile="include/rolly/types/angle.h" bodystart="420" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1aea4139bbd4e98b1967da63f4390137f1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle operator/</definition>
        <argsstring>(angle const &amp;other) const</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this / other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="426" column="24" bodyfile="include/rolly/types/angle.h" bodystart="426" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a70d5b448a690e5cfcdd24190b2bfb71c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>constexpr angle&amp; operator+=</definition>
        <argsstring>(angle const &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this += other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="432" column="24" bodyfile="include/rolly/types/angle.h" bodystart="432" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a531456a8461a83f3cfebc5c7952c2e37" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>constexpr angle&amp; operator-=</definition>
        <argsstring>(angle const &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this -= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="441" column="24" bodyfile="include/rolly/types/angle.h" bodystart="441" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ae1f0b69d4d88c07eb2e8b092cf379996" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>constexpr angle&amp; operator*=</definition>
        <argsstring>(angle const &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this *= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="450" column="24" bodyfile="include/rolly/types/angle.h" bodystart="450" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a5bbe5bc05125c4ca21de9c8e367002f0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>constexpr angle&amp; operator/=</definition>
        <argsstring>(angle const &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this /= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="459" column="24" bodyfile="include/rolly/types/angle.h" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1acd68ed48b123c38fe645b4a9c6694e2c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>)</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle operator*</definition>
        <argsstring>(U const &amp;other) const</argsstring>
        <name>operator*</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this * other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="470" column="24" bodyfile="include/rolly/types/angle.h" bodystart="470" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a69e3844905e49f7a8924565fba0a3c60" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>)</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle operator/</definition>
        <argsstring>(U const &amp;other) const</argsstring>
        <name>operator/</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this / other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="480" column="24" bodyfile="include/rolly/types/angle.h" bodystart="480" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a09b3b0e8330ce76a89450f25a598b50e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>)</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle operator+</definition>
        <argsstring>(U const &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this + other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="490" column="24" bodyfile="include/rolly/types/angle.h" bodystart="490" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a0bb40c7d98c3638f5fea004246a7fb6f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>)</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>constexpr angle operator-</definition>
        <argsstring>(U const &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this - other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="500" column="24" bodyfile="include/rolly/types/angle.h" bodystart="500" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1af503bc734615155e4f727bd9ed790209" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>)</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>constexpr angle&amp; operator+=</definition>
        <argsstring>(U const &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this += other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="510" column="24" bodyfile="include/rolly/types/angle.h" bodystart="510" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a877410d1ce3c690a66da73c8c8cba6f0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>)</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>constexpr angle&amp; operator-=</definition>
        <argsstring>(U const &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this -= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="521" column="24" bodyfile="include/rolly/types/angle.h" bodystart="521" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a16b31742e4c2a0e80fdba6b94651064e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>)</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>constexpr angle&amp; operator*=</definition>
        <argsstring>(U const &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this *= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="532" column="24" bodyfile="include/rolly/types/angle.h" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a45d33fea8994dd76e3964dc1aa72018e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>)</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>constexpr angle&amp; operator/=</definition>
        <argsstring>(U const &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this /= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="543" column="24" bodyfile="include/rolly/types/angle.h" bodystart="543" bodyend="546"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a5470198b343db477861d55f3b089149f" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>static constexpr angle from_radians</definition>
        <argsstring>(number_type radians)</argsstring>
        <name>from_radians</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>radians</declname>
        </param>
        <briefdescription>
<para>Constructs an angle from radians. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radians</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle in radians. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Constructed angle. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1angle_1a485ca2070340a13e5e78cb687dbc1465" kindref="member">from_degrees</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="188" column="31" bodyfile="include/rolly/types/angle.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a485ca2070340a13e5e78cb687dbc1465" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>static constexpr angle from_degrees</definition>
        <argsstring>(number_type degrees)</argsstring>
        <name>from_degrees</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
<para>Constructs an angle from degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degrees</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle in degrees. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Constructed angle. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1angle_1a5470198b343db477861d55f3b089149f" kindref="member">from_radians</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="196" column="31" bodyfile="include/rolly/types/angle.h" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a5c55f8db6f6cb4c73858af1e28f768e8" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>static constexpr angle from</definition>
        <argsstring>(number_type value, angle_unit u)</argsstring>
        <name>from</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a3f652efe88945dad9f5db87673b0909e" kindref="member">angle_unit</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>Constructs an angle from another unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Numeric value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Constructed angle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="204" column="31" bodyfile="include/rolly/types/angle.h" bodystart="204" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1afa7805bec73a51bf1c0256515e28ee56" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>static constexpr angle zero</definition>
        <argsstring>()</argsstring>
        <name>zero</name>
        <briefdescription>
<para>Constructs an zero angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="215" column="31" bodyfile="include/rolly/types/angle.h" bodystart="215" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a206a627d4bbd55113b5eaac5ae4771fb" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>static constexpr angle pi</definition>
        <argsstring>()</argsstring>
        <name>pi</name>
        <briefdescription>
<para>Constructs an angle with value <computeroutput>pi</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="220" column="31" bodyfile="include/rolly/types/angle.h" bodystart="220" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a99148853695ae53641609f542e18e4aa" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>static constexpr angle two_pi</definition>
        <argsstring>()</argsstring>
        <name>two_pi</name>
        <briefdescription>
<para>Constructs an angle with value <computeroutput>2pi</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="225" column="31" bodyfile="include/rolly/types/angle.h" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1ab67f404883d5c94e4f2cd95ab3566e5a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>static constexpr angle half_pi</definition>
        <argsstring>()</argsstring>
        <name>half_pi</name>
        <briefdescription>
<para>Constructs an angle with value <computeroutput>pi/2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="230" column="31" bodyfile="include/rolly/types/angle.h" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a4ae3c43c7e9c16d33bf52172f1f898db" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>static constexpr angle third_pi</definition>
        <argsstring>()</argsstring>
        <name>third_pi</name>
        <briefdescription>
<para>Constructs an angle with value <computeroutput>pi/3</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="235" column="31" bodyfile="include/rolly/types/angle.h" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1angle_1a4eabbb298d080362e01c8ba722984785" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref></type>
        <definition>static constexpr angle quarter_pi</definition>
        <argsstring>()</argsstring>
        <name>quarter_pi</name>
        <briefdescription>
<para>Constructs an angle with value <computeroutput>pi/4</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="240" column="31" bodyfile="include/rolly/types/angle.h" bodystart="240" bodyend="240"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structrolly_1_1types_1_1angle_1aedba7c4771ce3dc1d53a2759279b49e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, angle const &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1types_1_1angle" kindref="compound">angle</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/angle.h" line="548" column="14" bodyfile="include/rolly/types/angle.h" bodystart="548" bodyend="551"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Newtype describing an angle. </para>
    </briefdescription>
    <detaileddescription>
<para>Stores an angle in radians. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type. Must satisfy concept <computeroutput><ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">rolly::concepts::num</ref></computeroutput>. Default is <computeroutput>f32</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="include/rolly/types/angle.h" line="32" column="16" bodyfile="include/rolly/types/angle.h" bodystart="32" bodyend="555"/>
    <listofallmembers>
      <member refid="structrolly_1_1types_1_1angle_1a13388a97dd44dac80896feb90613d45d" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>acos</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a0b3265454614c3cb2c563ec74dfeb851" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>angle</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a33f20a9549cf6a2b79817fde3034aa33" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>angle</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a2ddf4eb45f66fc53a35a92fec3fd22b9" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>angle</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a908e7bc2c2d8e9a26301ff68ddbb023c" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>angle</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ad96ebdfffee4655081b053b19084c3d9" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>angle_to</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a7b1e681365ca2379776ba38496c8d9e1" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>as</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a4eadd631845fcfea8cf526a58403cf9b" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>as_f32</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a4f3d1e4786e042fac8b82314a89439ce" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>as_f64</name></member>
      <member refid="structrolly_1_1types_1_1angle_1aa75b20c064709be7f48b79fbe1135fc2" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>asin</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a214638797f0f6df8d0c82c2a4d1a1266" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>atan</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ab4296efb618a5d97bd8779ec48fa7f56" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>cast</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ab81f96b5cb802f028c83868875fa42c3" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>cos</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a6133257e807ce7986b58d501bc09d734" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>degrees</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a5c55f8db6f6cb4c73858af1e28f768e8" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>from</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a485ca2070340a13e5e78cb687dbc1465" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>from_degrees</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a5470198b343db477861d55f3b089149f" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>from_radians</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ab67f404883d5c94e4f2cd95ab3566e5a" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>half_pi</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a88fdf66be062767e4090d10a7d1de681" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>in</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a287bb4c3be885ca0f758ecfa8ad27682" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>is_finite</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ab50fe362d80e4a70a8c67fc749d1a0fe" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>lerp</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a2c7a3a8ecd971a7784f8c3cfcbaae7ac" prot="private" virt="non-virtual"><scope>rolly::types::angle</scope><name>m_</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a107b40f8f53dbbb17f9224074426b8e6" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>number_type</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ad0ed9dded3dc4405713f0b9270930a92" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator bool</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a11f5e5b2d5a79d40ca187cb76f1c5fff" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator number_type</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a309d0757a973d6d2c6614d0581b45d92" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator!=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a187480616a4887aa0d98538df458e26d" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator*</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a75f902dd70e3e238bfff25510eb96123" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator*</name></member>
      <member refid="structrolly_1_1types_1_1angle_1acd68ed48b123c38fe645b4a9c6694e2c" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator*</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ae1f0b69d4d88c07eb2e8b092cf379996" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator*=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a16b31742e4c2a0e80fdba6b94651064e" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator*=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ab6cb838c89f8d1f7082caaf515cccfbe" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator+</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ada7d9122b1eb43d1a63e0a661d49ea60" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator+</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a09b3b0e8330ce76a89450f25a598b50e" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator+</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a566265d7ea4ab6649c2bfdf2e96145af" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator++</name></member>
      <member refid="structrolly_1_1types_1_1angle_1afe13db0e1af81cd99e0f21f4b35561f1" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator++</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a70d5b448a690e5cfcdd24190b2bfb71c" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator+=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1af503bc734615155e4f727bd9ed790209" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator+=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1af748c933998a173b97ccb5d74a9a9d10" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator-</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a9f62a83ad05047c663de6705ab6ce5f2" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator-</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a0bb40c7d98c3638f5fea004246a7fb6f" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator-</name></member>
      <member refid="structrolly_1_1types_1_1angle_1afd70a5715cd3b48b3a1f247e6f5bc0a8" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator--</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a32ad7696f348d2811a994e27daf6cc67" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator--</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a531456a8461a83f3cfebc5c7952c2e37" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator-=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a877410d1ce3c690a66da73c8c8cba6f0" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator-=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1aea4139bbd4e98b1967da63f4390137f1" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator/</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a69e3844905e49f7a8924565fba0a3c60" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator/</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a5bbe5bc05125c4ca21de9c8e367002f0" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator/=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a45d33fea8994dd76e3964dc1aa72018e" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator/=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1aa23ff0fac2171ad6ce2140c4cd965d42" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator&lt;</name></member>
      <member refid="structrolly_1_1types_1_1angle_1aedba7c4771ce3dc1d53a2759279b49e4" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator&lt;&lt;</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ae2dbf39105d4518d91f4ac2783106737" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator&lt;=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a02bfe50e08aad2328c0836a4c362ceb7" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ade8996f319db17f70ad5ce969e840558" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1aefd7979ce2368b9ef98210aa864b6295" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator==</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a5ff964a65187ef94f6a280f9cbd5f2e5" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator&gt;</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a24164f3417a133a550089a5a276af6d9" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>operator&gt;=</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a206a627d4bbd55113b5eaac5ae4771fb" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>pi</name></member>
      <member refid="structrolly_1_1types_1_1angle_1aa0e06aa96b91570c0bf5a341e27a19b5" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>positive</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a4eabbb298d080362e01c8ba722984785" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>quarter_pi</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a4d596e0bb6f37199a669740aab6256ac" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>radians</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a65712cf7f7c8341f6ffb6f3604573e6d" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>signed_</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a6affa04d1ef290bb34a5b569ca8798a5" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>sin</name></member>
      <member refid="structrolly_1_1types_1_1angle_1ac3ca04e925cf9e490eadfa612dcb2810" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>sin_cos</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a0c7665e88eb32274796d8cefb28b1c30" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>tan</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a4ae3c43c7e9c16d33bf52172f1f898db" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>third_pi</name></member>
      <member refid="structrolly_1_1types_1_1angle_1aac993ecccd3d88aafefb6b8e3caa1dee" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>to_string</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a99148853695ae53641609f542e18e4aa" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>two_pi</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a524546a00e65da4c0a58a20d7913a593" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>value</name></member>
      <member refid="structrolly_1_1types_1_1angle_1afa7805bec73a51bf1c0256515e28ee56" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>zero</name></member>
      <member refid="structrolly_1_1types_1_1angle_1a62ac8ec6740b5914e8f9226c7714dbe6" prot="public" virt="non-virtual"><scope>rolly::types::angle</scope><name>~angle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
