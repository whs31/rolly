<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="signals_8h" kind="file" language="C++">
    <compoundname>signals.h</compoundname>
    <includes local="no">cstring</includes>
    <includes local="no">atomic</includes>
    <includes local="no">memory</includes>
    <includes local="no">mutex</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">thread</includes>
    <includes local="no">vector</includes>
    <includes refid="definitions_8h" local="yes">../global/definitions.h</includes>
    <includedby refid="functional_8h" local="yes">functional.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>atomic</label>
      </node>
      <node id="11">
        <label>export.h</label>
        <link refid="export_8h"/>
      </node>
      <node id="12">
        <label>platform_definitions.h</label>
        <link refid="platform__definitions_8h_source"/>
      </node>
      <node id="10">
        <label>../global/definitions.h</label>
        <link refid="definitions_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
      <node id="5">
        <label>mutex</label>
      </node>
      <node id="1">
        <label>signals.h</label>
        <link refid="signals_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>thread</label>
      </node>
      <node id="6">
        <label>type_traits</label>
      </node>
      <node id="2">
        <label>cstring</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>functional.h</label>
        <link refid="functional_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>signals.h</label>
        <link refid="signals_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>rolly.h</label>
        <link refid="rolly_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classrolly_1_1signal__base" prot="public">rolly::signal_base</innerclass>
    <innerclass refid="structrolly_1_1detail_1_1observer__type" prot="public">rolly::detail::observer_type</innerclass>
    <innerclass refid="structrolly_1_1trait_1_1typelist" prot="public">rolly::trait::typelist</innerclass>
    <innerclass refid="structrolly_1_1trait_1_1is__callable_3_01F_00_01typelist_3_01T_8_8_8_01_4_00_01void__t_3_01declt66028bba37b643a5c2d0222823d22cb8" prot="public">rolly::trait::is_callable&lt; F, typelist&lt; T... &gt;, void_t&lt; decltype(std::declval&lt; F &gt;()(std::declval&lt; T &gt;()...))&gt; &gt;</innerclass>
    <innerclass refid="structrolly_1_1trait_1_1is__weak__ptr" prot="public">rolly::trait::is_weak_ptr</innerclass>
    <innerclass refid="structrolly_1_1trait_1_1is__weak__ptr_3_01T_00_01void__t_3_01decltype_07std_1_1declval_3_01T_01_13fd328036332a30c13445a07df30ceb" prot="public">rolly::trait::is_weak_ptr&lt; T, void_t&lt; decltype(std::declval&lt; T &gt;().expired()), decltype(std::declval&lt; T &gt;().lock()), decltype(std::declval&lt; T &gt;().reset())&gt; &gt;</innerclass>
    <innerclass refid="structrolly_1_1trait_1_1is__weak__ptr__compatible" prot="public">rolly::trait::is_weak_ptr_compatible</innerclass>
    <innerclass refid="structrolly_1_1trait_1_1is__weak__ptr__compatible_3_01T_00_01void__t_3_01decltype_07to__weak_07s21218c6e5bd4c76e56da307adfbeb012" prot="public">rolly::trait::is_weak_ptr_compatible&lt; T, void_t&lt; decltype(to_weak(std::declval&lt; T &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structrolly_1_1trait_1_1is__signal" prot="public">rolly::trait::is_signal</innerclass>
    <innerclass refid="structrolly_1_1trait_1_1is__signal_3_01signal__base_3_01L_00_01T_8_8_8_01_4_01_4" prot="public">rolly::trait::is_signal&lt; signal_base&lt; L, T... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1func__ptr" prot="public">detail::func_ptr</innerclass>
    <innerclass refid="structdetail_1_1function__traits" prot="public">detail::function_traits</innerclass>
    <innerclass refid="structdetail_1_1function__traits_3_01T_00_01std_1_1enable__if__t_3_01trait_1_1is__func__v_3_01T_01_4_01_4_01_4" prot="public">detail::function_traits&lt; T, std::enable_if_t&lt; trait::is_func_v&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1function__traits_3_01T_01_5_00_01std_1_1enable__if__t_3_01trait_1_1is__func__v_3_01T_01_4_01_4_01_4" prot="public">detail::function_traits&lt; T *, std::enable_if_t&lt; trait::is_func_v&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1function__traits_3_01T_00_01std_1_1enable__if__t_3_01trait_1_1is__pmf__v_3_01T_01_4_01_4_01_4" prot="public">detail::function_traits&lt; T, std::enable_if_t&lt; trait::is_pmf_v&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1function__traits_3_01T_00_01std_1_1enable__if__t_3_01trait_1_1has__call__operator__v_3_01T_01_4_01_4_01_4" prot="public">detail::function_traits&lt; T, std::enable_if_t&lt; trait::has_call_operator_v&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1object__pointer" prot="public">detail::object_pointer</innerclass>
    <innerclass refid="structdetail_1_1object__pointer_3_01T_01_5_00_01std_1_1enable__if__t_3_01trait_1_1is__pointer__v_3_01T_01_5_01_4_01_4_01_4" prot="public">detail::object_pointer&lt; T *, std::enable_if_t&lt; trait::is_pointer_v&lt; T * &gt; &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1object__pointer_3_01T_00_01std_1_1enable__if__t_3_01trait_1_1is__weak__ptr__v_3_01T_01_4_01_4_01_4" prot="public">detail::object_pointer&lt; T, std::enable_if_t&lt; trait::is_weak_ptr_v&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1object__pointer_3_01T_00_01std_1_1enable__if__t_3_01_9_01trait_1_1is__pointer__v9d17afaa4d8ddd746027d98f7cb68c51" prot="public">detail::object_pointer&lt; T, std::enable_if_t&lt; ! trait::is_pointer_v&lt; T &gt; &amp;&amp;! trait::is_weak_ptr_v&lt; T &gt; &amp;&amp;trait::is_weak_ptr_compatible_v&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1null__mutex" prot="public">detail::null_mutex</innerclass>
    <innerclass refid="structdetail_1_1spin__mutex" prot="public">detail::spin_mutex</innerclass>
    <innerclass refid="classdetail_1_1copy__on__write" prot="public">detail::copy_on_write</innerclass>
    <innerclass refid="structdetail_1_1copy__on__write_1_1payload" prot="private">detail::copy_on_write::payload</innerclass>
    <innerclass refid="structdetail_1_1signal__wrapper" prot="public">detail::signal_wrapper</innerclass>
    <innerclass refid="classdetail_1_1slot__state" prot="public">detail::slot_state</innerclass>
    <innerclass refid="classconnection__blocker" prot="public">connection_blocker</innerclass>
    <innerclass refid="classconnection" prot="public">connection</innerclass>
    <innerclass refid="classscoped__connection" prot="public">scoped_connection</innerclass>
    <innerclass refid="structobserver__base" prot="public">observer_base</innerclass>
    <innerclass refid="structdetail_1_1cleanable" prot="public">detail::cleanable</innerclass>
    <innerclass refid="classdetail_1_1slot__base" prot="public">detail::slot_base</innerclass>
    <innerclass refid="classdetail_1_1slot__base" prot="public">detail::slot_base</innerclass>
    <innerclass refid="classdetail_1_1slot" prot="public">detail::slot</innerclass>
    <innerclass refid="classdetail_1_1slot__extended" prot="public">detail::slot_extended</innerclass>
    <innerclass refid="classdetail_1_1slot__pmf" prot="public">detail::slot_pmf</innerclass>
    <innerclass refid="classdetail_1_1slot__pmf__extended" prot="public">detail::slot_pmf_extended</innerclass>
    <innerclass refid="classdetail_1_1slot__tracked" prot="public">detail::slot_tracked</innerclass>
    <innerclass refid="classdetail_1_1slot__pmf__tracked" prot="public">detail::slot_pmf_tracked</innerclass>
    <innerclass refid="classsignal__base" prot="public">signal_base</innerclass>
    <innerclass refid="structsignal__base_1_1group__type" prot="private">signal_base::group_type</innerclass>
    <innernamespace refid="namespacerolly">rolly</innernamespace>
    <innernamespace refid="namespacerolly_1_1detail">rolly::detail</innernamespace>
    <innernamespace refid="namespacerolly_1_1trait">rolly::trait</innernamespace>
    <innernamespace refid="namespacedetail">detail</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="signals_8h_1a7a2842dcf41230a75b5a413092d072a0" prot="public" static="no">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::int32_t</ref></type>
        <definition>using group_id =  std::int32_t</definition>
        <argsstring></argsstring>
        <name>group_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A group_id is used to identify a group of slots </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="150" column="3" bodyfile="rolly/functional/signals.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="signals_8h_1ae42c0e8811996ab532903d47deea5d7d" prot="public" static="no">
        <type>void const  *</type>
        <definition>using obj_ptr =  void const*</definition>
        <argsstring></argsstring>
        <name>obj_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="318" column="5" bodyfile="rolly/functional/signals.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="signals_8h_1abcafe0a6d0b19652cdaaff7972a8913f" prot="public" static="no">
        <type><ref refid="structobserver__base" kindref="compound">observer_base</ref>&lt; <ref refid="structdetail_1_1null__mutex" kindref="compound">detail::null_mutex</ref> &gt;</type>
        <definition>using observer_st =  observer_base&lt;detail::null_mutex&gt;</definition>
        <argsstring></argsstring>
        <name>observer_st</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specialization of <ref refid="structobserver__base" kindref="compound">observer_base</ref> to be used in single threaded contexts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="750" column="3" bodyfile="rolly/functional/signals.h" bodystart="750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="signals_8h_1ae0ab6731432a68886ecdf0eaab68dfd3" prot="public" static="no">
        <type><ref refid="structobserver__base" kindref="compound">observer_base</ref>&lt; <ref refid="cpp/thread/mutex" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::mutex</ref> &gt;</type>
        <definition>using observer =  observer_base&lt;std::mutex&gt;</definition>
        <argsstring></argsstring>
        <name>observer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specialization of <ref refid="structobserver__base" kindref="compound">observer_base</ref> to be used in multi-threaded contexts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="755" column="3" bodyfile="rolly/functional/signals.h" bodystart="755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="signals_8h_1ac576ce92b5bf16a54f83d46e023897d7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; slot_base&lt; T... &gt; &gt;</type>
        <definition>using slot_ptr =  std::shared_ptr&lt;slot_base&lt;T...&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>slot_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="769" column="5" bodyfile="rolly/functional/signals.h" bodystart="769" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="signals_8h_1af36a1262b557206b85e8089c51ec6e52" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsignal__base" kindref="compound">signal_base</ref>&lt; <ref refid="structdetail_1_1null__mutex" kindref="compound">detail::null_mutex</ref>, T... &gt;</type>
        <definition>using signal_st =  signal_base&lt;detail::null_mutex, T...&gt;</definition>
        <argsstring></argsstring>
        <name>signal_st</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specialization of <ref refid="classsignal__base" kindref="compound">signal_base</ref> to be used in single threaded contexts. Slot connection, disconnection and signal emission are not thread-safe. The performance improvement over the thread-safe variant is not impressive, so this is not very useful. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1587" column="3" bodyfile="rolly/functional/signals.h" bodystart="1587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="signals_8h_1a702f70cb6e382f634a0ab7e3c8021cc1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsignal__base" kindref="compound">signal_base</ref>&lt; <ref refid="cpp/thread/mutex" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::mutex</ref>, T... &gt;</type>
        <definition>using signal =  signal_base&lt;std::mutex, T...&gt;</definition>
        <argsstring></argsstring>
        <name>signal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specialization of <ref refid="classsignal__base" kindref="compound">signal_base</ref> to be used in multi-threaded contexts. Slot connection, disconnection and signal emission are thread-safe.</para>
<para>Recursive signal emission and emission cycles are supported too. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1596" column="3" bodyfile="rolly/functional/signals.h" bodystart="1596" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacerolly_1aaa49597f11fa34841f1e7c48b7fe1fb8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool with_rtti</definition>
        <argsstring></argsstring>
        <name>with_rtti</name>
        <initializer>=



    false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="106" column="27" bodyfile="rolly/functional/signals.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a666a4e9726827588e42f0857d8a87c68" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_weak_ptr_compatible_v</definition>
        <argsstring></argsstring>
        <name>is_weak_ptr_compatible_v</name>
        <initializer>=
      detail::is_weak_ptr_compatible&lt;std::decay_t&lt;P&gt;&gt;::value</initializer>
        <briefdescription>
<para>determine if a pointer is convertible into a &quot;weak&quot; pointer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="115" column="20" bodyfile="rolly/functional/signals.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a0ce1d8dcc7700b383ed4cab2a35ef160" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_callable_v</definition>
        <argsstring></argsstring>
        <name>is_callable_v</name>
        <initializer>= detail::is_callable&lt;T..., L&gt;::value</initializer>
        <briefdescription>
<para>determine if a type T (Callable or Pmf) is callable with supplied arguments </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="120" column="20" bodyfile="rolly/functional/signals.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1ad73fb921872b6292fd6244b46ea4ebeb" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_weak_ptr_v</definition>
        <argsstring></argsstring>
        <name>is_weak_ptr_v</name>
        <initializer>= detail::is_weak_ptr&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="123" column="20" bodyfile="rolly/functional/signals.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a26520841c8b04240e098d1360c774d08" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool has_call_operator_v</definition>
        <argsstring></argsstring>
        <name>has_call_operator_v</name>
        <initializer>= detail::has_call_operator&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="126" column="20" bodyfile="rolly/functional/signals.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a60d8a43ca3d5d473f1651ef5114c2628" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_pointer_v</definition>
        <argsstring></argsstring>
        <name>is_pointer_v</name>
        <initializer>= <ref refid="cpp/types/is_pointer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_pointer</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="129" column="20" bodyfile="rolly/functional/signals.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a803db4963a7d275f1f2dc56ab3a33e0b" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_func_v</definition>
        <argsstring></argsstring>
        <name>is_func_v</name>
        <initializer>= <ref refid="cpp/types/is_function" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_function</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="132" column="20" bodyfile="rolly/functional/signals.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a2bc53fe616698994943b2b23620e7749" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_pmf_v</definition>
        <argsstring></argsstring>
        <name>is_pmf_v</name>
        <initializer>= <ref refid="cpp/types/is_member_function_pointer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_member_function_pointer</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="135" column="20" bodyfile="rolly/functional/signals.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1aa06dc940ac021f05e56d97c2dac9adeb" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_observer_v</definition>
        <argsstring></argsstring>
        <name>is_observer_v</name>
        <initializer>= <ref refid="cpp/types/is_base_of" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_base_of</ref>&lt;
      ::<ref refid="structrolly_1_1detail_1_1observer__type" kindref="compound">rolly::detail::observer_type</ref>,
      std::remove_pointer_t&lt;std::remove_reference_t&lt;T&gt;&gt;&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="138" column="20" bodyfile="rolly/functional/signals.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a908ba454a2355d53f9831b0570f348e7" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_signal_v</definition>
        <argsstring></argsstring>
        <name>is_signal_v</name>
        <initializer>= detail::is_signal&lt;S&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="143" column="20" bodyfile="rolly/functional/signals.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="signals_8h_1adeb27d2b612c4dc5278075ac28de887f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/memory/weak_ptr" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::weak_ptr</ref>&lt; T &gt;</type>
        <definition>std::weak_ptr&lt;T&gt; rolly::trait::to_weak</definition>
        <argsstring>(std::weak_ptr&lt; T &gt; w)</argsstring>
        <name>to_weak</name>
        <param>
          <type><ref refid="cpp/memory/weak_ptr" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::weak_ptr</ref>&lt; T &gt;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointers that can be converted to a weak pointer concept for tracking purpose must implement the to_weak() function in order to make use of ADL to convert that type and make it usable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="35" column="19" bodyfile="rolly/functional/signals.h" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="signals_8h_1ae2cd9e10c3e6cc9120e19c324ba099bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/memory/weak_ptr" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::weak_ptr</ref>&lt; T &gt;</type>
        <definition>std::weak_ptr&lt;T&gt; rolly::trait::to_weak</definition>
        <argsstring>(std::shared_ptr&lt; T &gt; s)</argsstring>
        <name>to_weak</name>
        <param>
          <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; T &gt;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="40" column="19" bodyfile="rolly/functional/signals.h" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="signals_8h_1a73e115fc79b33407c9eef0068d911895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>func_ptr</type>
        <definition>func_ptr detail::get_function_ptr</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>get_function_ptr</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="302" column="14" bodyfile="rolly/functional/signals.h" bodystart="302" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="signals_8h_1a09bd2025da2246a3e57d8ca73804b1a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool detail::eq_function_ptr</definition>
        <argsstring>(T const &amp;t, func_ptr const &amp;d)</argsstring>
        <name>eq_function_ptr</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>func_ptr const &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="309" column="10" bodyfile="rolly/functional/signals.h" bodystart="309" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="signals_8h_1aac03fdb1eac801324961de1429865071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>obj_ptr</type>
        <definition>obj_ptr get_object_ptr</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>get_object_ptr</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="351" column="13" bodyfile="rolly/functional/signals.h" bodystart="351" bodyend="353" declfile="rolly/functional/signals.h" declline="321" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="signals_8h_1a295045e13c2fdaa99bf88534b05bddaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T const  &amp;</type>
        <definition>T const&amp; detail::cow_read</definition>
        <argsstring>(T const &amp;v)</argsstring>
        <name>cow_read</name>
        <param>
          <type>T const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specializations for thread-safe code path </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="488" column="13" bodyfile="rolly/functional/signals.h" bodystart="488" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="signals_8h_1a86340467e86f20672c9f295024b21476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T const  &amp;</type>
        <definition>T const&amp; detail::cow_read</definition>
        <argsstring>(copy_on_write&lt; T &gt; &amp;v)</argsstring>
        <name>cow_read</name>
        <param>
          <type>copy_on_write&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="493" column="13" bodyfile="rolly/functional/signals.h" bodystart="493" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="signals_8h_1a91f8bfa713f665b8ff5b297726914fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; detail::cow_write</definition>
        <argsstring>(T &amp;v)</argsstring>
        <name>cow_write</name>
        <param>
          <type>T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="498" column="7" bodyfile="rolly/functional/signals.h" bodystart="498" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="signals_8h_1a32fc39fc81cbdbc015eb1e7d6b0b0dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; detail::cow_write</definition>
        <argsstring>(copy_on_write&lt; T &gt; &amp;v)</argsstring>
        <name>cow_write</name>
        <param>
          <type>copy_on_write&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="503" column="7" bodyfile="rolly/functional/signals.h" bodystart="503" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="signals_8h_1ad2038027f0da5ce4a6c7cc1d8bbc5c2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename B</type>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Arg</declname>
            <defname>Arg</defname>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; B &gt;</type>
        <definition>std::shared_ptr&lt;B&gt; detail::make_shared</definition>
        <argsstring>(Arg &amp;&amp;... arg)</argsstring>
        <name>make_shared</name>
        <param>
          <type>Arg &amp;&amp;...</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="508" column="28" bodyfile="rolly/functional/signals.h" bodystart="508" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="signals_8h_1a0f80269fcd1de453f2d6219cf29c475c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lockable</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;! trait::is_signal_v&lt; std::decay_t&lt; Arg &gt; &gt;, <ref refid="classconnection" kindref="compound">connection</ref> &gt;</type>
        <definition>std::enable_if_t&lt;! trait::is_signal_v&lt;std::decay_t&lt;Arg&gt; &gt;, connection&gt; connect</definition>
        <argsstring>(signal_base&lt; Lockable, T... &gt; &amp;sig, Arg &amp;&amp;arg, Args &amp;&amp;... args)</argsstring>
        <name>connect</name>
        <param>
          <type><ref refid="classsignal__base" kindref="compound">signal_base</ref>&lt; Lockable, T... &gt; &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>Arg &amp;&amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Freestanding connect function that defers to the <computeroutput><ref refid="classsignal__base_1a416fd3f71ad61dfa22a70b274496f576" kindref="member">signal_base::connect</ref></computeroutput> member. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1556" column="5" bodyfile="rolly/functional/signals.h" bodystart="1556" bodyend="1558"/>
      </memberdef>
      <memberdef kind="function" id="signals_8h_1a7ed5753445baad800ce7f8c62fe2dfc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lockable1</type>
          </param>
          <param>
            <type>typename Lockable2</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T1</declname>
            <defname>T1</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>T2</declname>
            <defname>T2</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classconnection" kindref="compound">connection</ref></type>
        <definition>connection connect</definition>
        <argsstring>(signal_base&lt; Lockable1, T1... &gt; &amp;sig1, signal_base&lt; Lockable2, T2... &gt; &amp;sig2, Args &amp;&amp;... args)</argsstring>
        <name>connect</name>
        <param>
          <type><ref refid="classsignal__base" kindref="compound">signal_base</ref>&lt; Lockable1, T1... &gt; &amp;</type>
          <declname>sig1</declname>
        </param>
        <param>
          <type><ref refid="classsignal__base" kindref="compound">signal_base</ref>&lt; Lockable2, T2... &gt; &amp;</type>
          <declname>sig2</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Freestanding connect function that chains one signal to another. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1569" column="14" bodyfile="rolly/functional/signals.h" bodystart="1569" bodyend="1578"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="rolly/functional/signals.h"/>
  </compounddef>
</doxygen>
