<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structrolly_1_1types_1_1size2d" kind="struct" language="C++" prot="public">
    <compoundname>rolly::types::size2d</compoundname>
    <includes refid="size2d_8h" local="no">size2d.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref></type>
        <declname>T</declname>
        <defname>T</defname>
        <defval><ref refid="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" kindref="member">f32</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" prot="public" static="no">
        <type>T</type>
        <definition>using number_type =  T</definition>
        <argsstring></argsstring>
        <name>number_type</name>
        <briefdescription>
<para>Underlying number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="38" column="7" bodyfile="include/rolly/types/size2d.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structrolly_1_1types_1_1size2d_1a60c9d33976efa382c7b548c19a5fdd77" prot="private" static="no" mutable="no">
        <type><ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>number_type x_</definition>
        <argsstring></argsstring>
        <name>x_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="594" column="19" bodyfile="include/rolly/types/size2d.h" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structrolly_1_1types_1_1size2d_1aec0f04620860b55b130d230fa5591b86" prot="private" static="no" mutable="no">
        <type><ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>number_type y_</definition>
        <argsstring></argsstring>
        <name>y_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="595" column="19" bodyfile="include/rolly/types/size2d.h" bodystart="595" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a35447c126800f7a4302ba2af7cd66411" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr size2d</definition>
        <argsstring>(size2d const &amp;)=default</argsstring>
        <name>size2d</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Default copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="43" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a618109a64ac4cba549e2a6d25f6c0cd9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> &amp;</type>
        <definition>constexpr size2d&amp; operator=</definition>
        <argsstring>(size2d const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Default copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="48" column="24"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a2d50877007a22752a7292a88c95ed6f8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr size2d</definition>
        <argsstring>(size2d &amp;&amp;)=default</argsstring>
        <name>size2d</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Default move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="53" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a94676acb5e8ff50209cf6886e09b6b43" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> &amp;</type>
        <definition>constexpr size2d&amp; operator=</definition>
        <argsstring>(size2d &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Default move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="58" column="24"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1af511b2e0426d957343779166907439fe" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr size2d</definition>
        <argsstring>()</argsstring>
        <name>size2d</name>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> with zero coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="63" column="17" bodyfile="include/rolly/types/size2d.h" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a292f11d09851adc68f8f60b50216cd9e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr size2d</definition>
        <argsstring>(number_type x, number_type y)</argsstring>
        <name>size2d</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> from given scalar values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="72" column="17" bodyfile="include/rolly/types/size2d.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a90090e51fc91401ed1ba552cbf1b05f1" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr size2d</definition>
        <argsstring>(number_type value)</argsstring>
        <name>size2d</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>, setting all components to the same value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set all components to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="80" column="26" bodyfile="include/rolly/types/size2d.h" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ac189045668ab39657be7db09f34d6f15" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr size2d</definition>
        <argsstring>(point2d&lt; number_type &gt; const &amp;p)</argsstring>
        <name>size2d</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>&lt; <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> from a <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="88" column="26" bodyfile="include/rolly/types/size2d.h" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1aa11dc7bf967ab05052263482133a03ff" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr size2d</definition>
        <argsstring>(vector2d&lt; number_type &gt; const &amp;v)</argsstring>
        <name>size2d</name>
        <param>
          <type><ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>&lt; <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> from a <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="96" column="26" bodyfile="include/rolly/types/size2d.h" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a9f83aeaabb5dca616513668ff812f165" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d inverted</definition>
        <argsstring>() const</argsstring>
        <name>inverted</name>
        <briefdescription>
<para>Returns inverted <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Inverted <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="104" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a23d20565ed8828ea60602ae5f69d45b6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type x</definition>
        <argsstring>() const</argsstring>
        <name>x</name>
        <briefdescription>
<para>Returns the x-coordinate of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> as scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The x-coordinate of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="110" column="30" bodyfile="include/rolly/types/size2d.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ad8e273c4442bfd92a64727fd411385a6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type y</definition>
        <argsstring>() const</argsstring>
        <name>y</name>
        <briefdescription>
<para>Returns the y-coordinate of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> as scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The y-coordinate of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="116" column="30" bodyfile="include/rolly/types/size2d.h" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a9e764a6a4f38cbdb7711383af5fa8d18" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &amp;</type>
        <definition>constexpr number_type&amp; x_mut</definition>
        <argsstring>()</argsstring>
        <name>x_mut</name>
        <briefdescription>
<para>Returns mutable reference to the x-coordinate of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> as scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mutable reference to the x-coordinate of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="122" column="30" bodyfile="include/rolly/types/size2d.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a7212185fd6ab59c60da53e8e15606a4e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &amp;</type>
        <definition>constexpr number_type&amp; y_mut</definition>
        <argsstring>()</argsstring>
        <name>y_mut</name>
        <briefdescription>
<para>Returns mutable reference to the y-coordinate of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> as scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mutable reference to the y-coordinate of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="128" column="30" bodyfile="include/rolly/types/size2d.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1afd175a8ec445e68f164ae4d65673cc28" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <briefdescription>
<para>Alias to <computeroutput>x</computeroutput> member function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="133" column="30" bodyfile="include/rolly/types/size2d.h" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a4b978383c4f7e8992279ac67e3193bda" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type height</definition>
        <argsstring>() const</argsstring>
        <name>height</name>
        <briefdescription>
<para>Alias to <computeroutput>y</computeroutput> member function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="138" column="30" bodyfile="include/rolly/types/size2d.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ada99cbb83067f0f172dcc766d04a4c68" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &amp;</type>
        <definition>constexpr number_type&amp; width_mut</definition>
        <argsstring>()</argsstring>
        <name>width_mut</name>
        <briefdescription>
<para>Alias to <computeroutput>x_mut</computeroutput> member function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="143" column="30" bodyfile="include/rolly/types/size2d.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1aa7aaa79cc094a08c7ddc39c056b927c4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &amp;</type>
        <definition>constexpr number_type&amp; height_mut</definition>
        <argsstring>()</argsstring>
        <name>height_mut</name>
        <briefdescription>
<para>Alias to <computeroutput>y_mut</computeroutput> member function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="148" column="30" bodyfile="include/rolly/types/size2d.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1aac993ecccd3d88aafefb6b8e3caa1dee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string to_string</definition>
        <argsstring>() const</argsstring>
        <name>to_string</name>
        <briefdescription>
<para>Returns string representation of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Size is represented as it&apos;s numeric values. If the underlying number type is floating <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, it is rounded to two decimal places. <simplesect kind="note"><para>Due to limitations of the language, units are not displayed. </para>
</simplesect>
<simplesect kind="return"><para>String representation of the object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="157" column="20" bodyfile="include/rolly/types/size2d.h" bodystart="157" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a25129afd086e1ed1078677311854d7ab" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="cpp/container/array" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::array</ref>&lt; <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref>, 2 &gt;</type>
        <definition>constexpr std::array&lt;number_type, 2&gt; to_array</definition>
        <argsstring>() const</argsstring>
        <name>to_array</name>
        <briefdescription>
<para>Casts into an array of two values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="167" column="29" bodyfile="include/rolly/types/size2d.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a773014d9be700f99ca76e9990945e509" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="cpp/utility/tuple" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::tuple</ref>&lt; <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref>, <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt;</type>
        <definition>constexpr std::tuple&lt;number_type, number_type&gt; to_tuple</definition>
        <argsstring>() const</argsstring>
        <name>to_tuple</name>
        <briefdescription>
<para>Casts into a tuple of two values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="172" column="29" bodyfile="include/rolly/types/size2d.h" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a67ac57bed3924789d4157e4a9487749c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="cpp/utility/pair" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::pair</ref>&lt; <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref>, <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt;</type>
        <definition>constexpr std::pair&lt;number_type, number_type&gt; to_pair</definition>
        <argsstring>() const</argsstring>
        <name>to_pair</name>
        <briefdescription>
<para>Casts into a pair of two values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="177" column="28" bodyfile="include/rolly/types/size2d.h" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1aeffd93a88852c0ba4d0c92f5d737cd90" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d round</definition>
        <argsstring>() const</argsstring>
        <name>round</name>
        <briefdescription>
<para>Rounds each component to the nearest integer value. </para>
        </briefdescription>
        <detaileddescription>
<para>This behavior is preserved for negative values (unlike the basic cast). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="183" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ae798bbf805c9e9b542ec541534ec0a18" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d ceil</definition>
        <argsstring>() const</argsstring>
        <name>ceil</name>
        <briefdescription>
<para>Rounds each component to the smallest integer equal or greater than the original value. </para>
        </briefdescription>
        <detaileddescription>
<para>This behavior is preserved for negative values (unlike the basic cast). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="189" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a7565a914b1a24ca2de6de6808d054ee1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d floor</definition>
        <argsstring>() const</argsstring>
        <name>floor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="195" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1abb313668b1c479efda4864fa5e702b18" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d lerp</definition>
        <argsstring>(size2d const &amp;other, f32 t) const</argsstring>
        <name>lerp</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" kindref="member">f32</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Linearly interpolate between this <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> and another <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">rolly::types::size2d</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>from<sp/>=<sp/><ref refid="structrolly_1_1types_1_1size2d_1af511b2e0426d957343779166907439fe" kindref="member">size2d</ref>(0.0F,<sp/>10.0F);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>to<sp/>=<sp/><ref refid="structrolly_1_1types_1_1size2d_1af511b2e0426d957343779166907439fe" kindref="member">size2d</ref>(8.0F,<sp/>-4.0F);</highlight></codeline>
<codeline><highlight class="normal">fmt::println(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>from.lerp(to,<sp/>-1.0F));</highlight></codeline>
<codeline><highlight class="normal">fmt::println(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>from.lerp(to,<sp/>0.0F));</highlight></codeline>
<codeline><highlight class="normal">fmt::println(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>from.lerp(to,<sp/>0.5F));</highlight></codeline>
<codeline><highlight class="normal">fmt::println(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>from.lerp(to,<sp/>1.0F));</highlight></codeline>
<codeline><highlight class="normal">fmt::println(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>from.lerp(to,<sp/>2.0F));</highlight></codeline>
</programlisting></para>
<para>Output: <programlisting filename=".shell-session"><codeline><highlight class="normal">[-8.0,<sp/>24.0]</highlight></codeline>
<codeline><highlight class="normal">[0.0,<sp/>10.0]</highlight></codeline>
<codeline><highlight class="normal">[4.0,<sp/>3.0]</highlight></codeline>
<codeline><highlight class="normal">[8.0,<sp/>-4.0]</highlight></codeline>
<codeline><highlight class="normal">[16.0,<sp/>-18.0]</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolation factor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The interpolated <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="223" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="223" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1afefbf271cf6c7924e08116c924878f28" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d max</definition>
        <argsstring>(size2d const &amp;other) const</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the largest x and y values of this and another <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> with the largest x and y values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="232" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a0d01e5ac468318f504b6493c901ec463" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d min</definition>
        <argsstring>(size2d const &amp;other) const</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the smallest x and y values of this and another <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> with the smallest x and y values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="241" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a2aabf4fe2af2e63d0f014260e9d13e37" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d clamp</definition>
        <argsstring>(size2d const &amp;start, size2d const &amp;end) const</argsstring>
        <name>clamp</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> each component of which clamped by corresponding components of start and end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The start <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The end <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The clamped <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="251" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a1e9f97bd0d5587b31d117df29c28e55a" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <briefdescription>
<para>Returns the absolute value of each component. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The absolute value of each component. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="259" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="259" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ae00ce5f8010628203d96c9c83d57549f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type dot</definition>
        <argsstring>(size2d const &amp;other) const</argsstring>
        <name>dot</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns dot product of this and another <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Dot product is defined as <computeroutput>[x1, y1] . [x2, y2] = x1 * x2 + y1 * y2</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product of this and another <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="267" column="30" bodyfile="include/rolly/types/size2d.h" bodystart="267" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a2901bb7d1cac020c38b1564de50cfed3" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type cross</definition>
        <argsstring>(size2d const &amp;other) const</argsstring>
        <name>cross</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the norm of the cross product of this and another <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Cross product is defined as <computeroutput>[x1, y1] x [x2, y2] = x1 * y2 - y1 * x2</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The norm of the cross product of this and another <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="277" column="30" bodyfile="include/rolly/types/size2d.h" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a09eb0be0be1b9fb26096c1fccbe3d9ca" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool is_finite</definition>
        <argsstring>() const</argsstring>
        <name>is_finite</name>
        <briefdescription>
<para>Returns true if all members are finite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="284" column="23" bodyfile="include/rolly/types/size2d.h" bodystart="284" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a231e8ba696d19d5efb24deba2b63c471" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool is_positive</definition>
        <argsstring>() const</argsstring>
        <name>is_positive</name>
        <briefdescription>
<para>Returns true if all members are positive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="289" column="23" bodyfile="include/rolly/types/size2d.h" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a7d2bbc553fa9b07157c1e60536c45cd5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="cpp/types/size_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::size_t</ref></type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>requires</definition>
        <argsstring>(N2==2) static const expr size2d from_array(std</argsstring>
        <name>requires</name>
        <param>
          <type>N2</type>
          <defval>=2</defval>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> from <computeroutput><ref refid="cpp/container/array" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::array</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N2</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the array. Must be equal to <computeroutput>2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput><ref refid="cpp/container/array" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::array</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="323" column="9" bodyfile="include/rolly/types/size2d.h" bodystart="323" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ad0ed9dded3dc4405713f0b9270930a92" prot="public" static="no" constexpr="yes" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if underlying values is both not <computeroutput>0</computeroutput> and not <computeroutput>NaN</computeroutput> or <computeroutput>Infinity</computeroutput> in case of floating point. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Also returns <computeroutput>false</computeroutput> if underlying values is <computeroutput>NaN</computeroutput> or <computeroutput>Infinity</computeroutput> in case of floating point. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="344" column="27" bodyfile="include/rolly/types/size2d.h" bodystart="344" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ac252a44c73ef696bf047b7b7b0ea13bc" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator!</definition>
        <argsstring>() const</argsstring>
        <name>operator!</name>
        <briefdescription>
<para>Returns <computeroutput>false</computeroutput> if underlying values is both not <computeroutput>0</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="357" column="23" bodyfile="include/rolly/types/size2d.h" bodystart="357" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ab9ac4cd426342503f1f042a51470593c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>&lt; <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt;</type>
        <definition>constexpr point2d&lt;number_type&gt; to_point2d</definition>
        <argsstring>() const</argsstring>
        <name>to_point2d</name>
        <briefdescription>
<para>Converts this <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> into <computeroutput><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The resulting <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="363" column="26" bodyfile="include/rolly/types/size2d.h" bodystart="363" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ac2b0983e1aef983282f639f645773e14" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>&lt; <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt;</type>
        <definition>constexpr vector2d&lt;number_type&gt; to_vector2d</definition>
        <argsstring>() const</argsstring>
        <name>to_vector2d</name>
        <briefdescription>
<para>Converts this <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> into <computeroutput><ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The resulting <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="369" column="27" bodyfile="include/rolly/types/size2d.h" bodystart="369" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a6d1f5ab120dc1249f3957364ea4ca08c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>)</type>
            <declname>T2</declname>
            <defname>T2</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>&lt; T2 &gt;</type>
        <definition>constexpr size2d&lt;T2&gt; cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
<para>Cast from one numeric representation to another, preserving the units. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T2</parametername>
</parameternamelist>
<parameterdescription>
<para>New number type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> with the new number type and the same value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="377" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="377" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a2a9968f570f4b9c725759a8e01965ab7" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d to_f32</definition>
        <argsstring>() const</argsstring>
        <name>to_f32</name>
        <briefdescription>
<para>Casts into <computeroutput>f32</computeroutput> <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="384" column="19" bodyfile="include/rolly/types/size2d.h" bodystart="384" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1abc3f0758e4708e6ec5268bc04124fa1f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>&lt; <ref refid="namespacerolly_1_1types_1abc2f107791bd7c1d49ecf0f168c085a3" kindref="member">f64</ref> &gt;</type>
        <definition>constexpr size2d&lt;f64&gt; to_f64</definition>
        <argsstring>() const</argsstring>
        <name>to_f64</name>
        <briefdescription>
<para>Casts into <computeroutput>f64</computeroutput> <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="389" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="389" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a0d7edb63dd4ea49c014b9453eb5f59c1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>&lt; <ref refid="namespacerolly_1_1types_1a65cf28726f89e62ccf2f1354bc2716df" kindref="member">u32</ref> &gt;</type>
        <definition>constexpr size2d&lt;u32&gt; to_u32</definition>
        <argsstring>() const</argsstring>
        <name>to_u32</name>
        <briefdescription>
<para>Casts into <computeroutput>u32</computeroutput> <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="394" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="394" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1aed2e608b3dfd13e494846164b6a862fd" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>&lt; <ref refid="namespacerolly_1_1types_1a66e1d499241ccae9a18a20a1f4f0590d" kindref="member">u64</ref> &gt;</type>
        <definition>constexpr size2d&lt;u64&gt; to_u64</definition>
        <argsstring>() const</argsstring>
        <name>to_u64</name>
        <briefdescription>
<para>Casts into <computeroutput>u64</computeroutput> <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="399" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="399" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ab77fb89662764e0ebf0ffb88d2ee1a83" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>&lt; <ref refid="namespacerolly_1_1types_1ac47ac2e28dd2cb38fbf05ce10f810407" kindref="member">usize</ref> &gt;</type>
        <definition>constexpr size2d&lt;usize&gt; to_usize</definition>
        <argsstring>() const</argsstring>
        <name>to_usize</name>
        <briefdescription>
<para>Casts into <computeroutput>usize</computeroutput> <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="404" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="404" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a2d49c1c8f75b5118e483e60301d663a6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>&lt; <ref refid="namespacerolly_1_1types_1aec4a1429cc91fb7ff41599b263c348cc" kindref="member">i32</ref> &gt;</type>
        <definition>constexpr size2d&lt;i32&gt; to_i32</definition>
        <argsstring>() const</argsstring>
        <name>to_i32</name>
        <briefdescription>
<para>Casts into <computeroutput>i32</computeroutput> <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="409" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="409" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ab700c0137734d4d31361e41ad5b19e01" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>&lt; <ref refid="namespacerolly_1_1types_1ae72e52134285dbd83ca4227ec77394a2" kindref="member">i64</ref> &gt;</type>
        <definition>constexpr size2d&lt;i64&gt; to_i64</definition>
        <argsstring>() const</argsstring>
        <name>to_i64</name>
        <briefdescription>
<para>Casts into <computeroutput>i64</computeroutput> <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="414" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="414" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a75645228e93837e8b95cdfa72c81b23d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>&lt; <ref refid="namespacerolly_1_1types_1a30f901b0e451a40d688c0fe8ec125c85" kindref="member">isize</ref> &gt;</type>
        <definition>constexpr size2d&lt;isize&gt; to_isize</definition>
        <argsstring>() const</argsstring>
        <name>to_isize</name>
        <briefdescription>
<para>Casts into <computeroutput>isize</computeroutput> <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="419" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="419" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a93372fd934b4d48851c3744d3b2459e3" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type area</definition>
        <argsstring>() const</argsstring>
        <name>area</name>
        <briefdescription>
<para>Returns result of multiplication of both scalars. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Area of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="425" column="30" bodyfile="include/rolly/types/size2d.h" bodystart="425" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a3820c3154aeba18fca212d9e0cfe15eb" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d operator+</definition>
        <argsstring>() const</argsstring>
        <name>operator+</name>
        <briefdescription>
<para>Returns the unchanged <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="430" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="430" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a091915ad3b593bfdb1b91cfbab628806" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Returns the negated <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="435" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="435" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1afe58c4ae5a1b86722f1bb7e493d9c4c7" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator==</definition>
        <argsstring>(size2d const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the size2ds are equal, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="442" column="23" bodyfile="include/rolly/types/size2d.h" bodystart="442" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1aa8e1a22e8c56a57174744d5f29381cb3" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator!=</definition>
        <argsstring>(size2d const &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Inequality comparison. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the size2ds are not equal, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="451" column="23" bodyfile="include/rolly/types/size2d.h" bodystart="451" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a03bb0c520217a5ec4d674ef5919a67fd" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d operator+</definition>
        <argsstring>(size2d const &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Addition operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sum of both size2ds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="460" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="460" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a1bbe18feced3a808007b32c01a468f5c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d operator-</definition>
        <argsstring>(size2d const &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Subtraction operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The difference of both size2ds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="469" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="469" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a4e50cf45daf31c0230ad9817e9505617" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d operator*</definition>
        <argsstring>(number_type const &amp;other) const</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Multiplies <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> with a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The product of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> and the scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="478" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="478" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a7b3f9ee15a663bff92cd2fc18ad1449b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>constexpr size2d operator/</definition>
        <argsstring>(number_type const &amp;other) const</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Divides <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The quotient of the <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> and the scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="487" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="487" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a48b3ca3c60b15e28feb97078b842df53" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> &amp;</type>
        <definition>constexpr size2d&amp; operator+=</definition>
        <argsstring>(size2d const &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Addition assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="496" column="24" bodyfile="include/rolly/types/size2d.h" bodystart="496" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a004d06472b0bc95ea68d8109e6881f23" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> &amp;</type>
        <definition>constexpr size2d&amp; operator-=</definition>
        <argsstring>(size2d const &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Subtraction assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="507" column="24" bodyfile="include/rolly/types/size2d.h" bodystart="507" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ac021356eb669cb80b1fe88a0409ddacd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> &amp;</type>
        <definition>constexpr size2d&amp; operator*=</definition>
        <argsstring>(number_type const &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Multiplication assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="518" column="24" bodyfile="include/rolly/types/size2d.h" bodystart="518" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1aed9513e93bda0b6d5437f27b5efb5b6a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> &amp;</type>
        <definition>constexpr size2d&amp; operator/=</definition>
        <argsstring>(number_type const &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Division assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the division. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="529" column="24" bodyfile="include/rolly/types/size2d.h" bodystart="529" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a6d6a33b6751a162fe8ae5fa9afdca5ad" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr size2d</definition>
        <argsstring>(QSize const &amp;other)</argsstring>
        <name>size2d</name>
        <param>
          <type>QSize const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> from <computeroutput>QSize</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput>QSize</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This constructor is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://doc.qt.io/qt-5/qsize.html">https://doc.qt.io/qt-5/qsize.html</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="542" column="26" bodyfile="include/rolly/types/size2d.h" bodystart="542" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ab32b02ca1608f0e8eb61fcdda22b8b0a" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr size2d</definition>
        <argsstring>(QSizeF const &amp;other)</argsstring>
        <name>size2d</name>
        <param>
          <type>QSizeF const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> from <computeroutput>QSizeF</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput>QSizeF</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This constructor is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://doc.qt.io/qt-5/qsizef.html">https://doc.qt.io/qt-5/qsizef.html</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="551" column="26" bodyfile="include/rolly/types/size2d.h" bodystart="551" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ab618ae49b64028b5f82e1576dc1caac8" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr QSize</type>
        <definition>constexpr QSize to_qsize</definition>
        <argsstring>() const</argsstring>
        <name>to_qsize</name>
        <briefdescription>
<para>Casts this <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> into <computeroutput>QSize</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The resulting <computeroutput>QSize</computeroutput>. </para>
</simplesect>
<simplesect kind="remark"><para>This function is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://doc.qt.io/qt-5/qsize.html">https://doc.qt.io/qt-5/qsize.html</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="580" column="24" bodyfile="include/rolly/types/size2d.h" bodystart="580" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1aad6f8c3ba195944ffd3afe60bc5168c6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr QSizeF</type>
        <definition>constexpr QSizeF to_qsizef</definition>
        <argsstring>() const</argsstring>
        <name>to_qsizef</name>
        <briefdescription>
<para>Casts this <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> into <computeroutput>QSizeF</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The resulting <computeroutput>QSizeF</computeroutput>. </para>
</simplesect>
<simplesect kind="remark"><para>This function is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://doc.qt.io/qt-5/qsizef.html">https://doc.qt.io/qt-5/qsizef.html</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="590" column="25" bodyfile="include/rolly/types/size2d.h" bodystart="590" bodyend="590"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a36b9a814805a9ceda7540bbf51922584" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>static constexpr size2d zero</definition>
        <argsstring>()</argsstring>
        <name>zero</name>
        <briefdescription>
<para>The same as <emphasis>origin</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="294" column="32" bodyfile="include/rolly/types/size2d.h" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1ae153e1878556244a110e988e13dbf38a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>static constexpr size2d splat</definition>
        <argsstring>(number_type value)</argsstring>
        <name>splat</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>, setting all components to the same value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set all components to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="300" column="32" bodyfile="include/rolly/types/size2d.h" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1aba8cc630689bb12a861e755ebf08b1dd" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>static constexpr size2d from_tuple</definition>
        <argsstring>(std::tuple&lt; Args... &gt; const &amp;other)</argsstring>
        <name>from_tuple</name>
        <param>
          <type><ref refid="cpp/utility/tuple" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::tuple</ref>&lt; Args... &gt; const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> from <computeroutput><ref refid="cpp/utility/tuple" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::tuple</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput><ref refid="cpp/utility/tuple" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::tuple</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="312" column="32" bodyfile="include/rolly/types/size2d.h" bodystart="312" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a13769708074262c9f8e6c275fe50a637" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>static constexpr size2d from_pair</definition>
        <argsstring>(std::pair&lt; number_type, number_type &gt; const &amp;other)</argsstring>
        <name>from_pair</name>
        <param>
          <type><ref refid="cpp/utility/pair" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::pair</ref>&lt; <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref>, <ref refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt; const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> from <computeroutput><ref refid="cpp/utility/pair" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::pair</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput><ref refid="cpp/utility/pair" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::pair</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="335" column="32" bodyfile="include/rolly/types/size2d.h" bodystart="335" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1a86e6953410f514fcbb502a3d6c49f4e2" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>static constexpr size2d from_qsize</definition>
        <argsstring>(QSize const &amp;other)</argsstring>
        <name>from_qsize</name>
        <param>
          <type>QSize const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> from <computeroutput>QSize</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput>QSize</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://doc.qt.io/qt-5/qsize.html">https://doc.qt.io/qt-5/qsize.html</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="560" column="32" bodyfile="include/rolly/types/size2d.h" bodystart="560" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1size2d_1aadbb4ede8a4953dc30569ab2996ee350" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></type>
        <definition>static constexpr size2d from_qsizef</definition>
        <argsstring>(QSizeF const &amp;other)</argsstring>
        <name>from_qsizef</name>
        <param>
          <type>QSizeF const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> from <computeroutput>QSizeF</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput>QSizeF</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://doc.qt.io/qt-5/qsizef.html">https://doc.qt.io/qt-5/qsizef.html</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/size2d.h" line="570" column="32" bodyfile="include/rolly/types/size2d.h" bodystart="570" bodyend="572"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A two-dimensional <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> tagged with a unit. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type. Must satisfy concept <computeroutput><ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">rolly::concepts::num</ref></computeroutput>. Default is <computeroutput>f32</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>rolly::types::length </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">rolly::types::point2d</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">rolly::types::vector2d</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="include/rolly/types/size2d.h" line="34" column="17" bodyfile="include/rolly/types/size2d.h" bodystart="34" bodyend="596"/>
    <listofallmembers>
      <member refid="structrolly_1_1types_1_1size2d_1a1e9f97bd0d5587b31d117df29c28e55a" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>abs</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a93372fd934b4d48851c3744d3b2459e3" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>area</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a6d1f5ab120dc1249f3957364ea4ca08c" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>cast</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ae798bbf805c9e9b542ec541534ec0a18" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>ceil</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a2aabf4fe2af2e63d0f014260e9d13e37" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>clamp</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a2901bb7d1cac020c38b1564de50cfed3" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>cross</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ae00ce5f8010628203d96c9c83d57549f" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>dot</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a7565a914b1a24ca2de6de6808d054ee1" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>floor</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a13769708074262c9f8e6c275fe50a637" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>from_pair</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a86e6953410f514fcbb502a3d6c49f4e2" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>from_qsize</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1aadbb4ede8a4953dc30569ab2996ee350" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>from_qsizef</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1aba8cc630689bb12a861e755ebf08b1dd" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>from_tuple</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a4b978383c4f7e8992279ac67e3193bda" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>height</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1aa7aaa79cc094a08c7ddc39c056b927c4" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>height_mut</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a9f83aeaabb5dca616513668ff812f165" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>inverted</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a09eb0be0be1b9fb26096c1fccbe3d9ca" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>is_finite</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a231e8ba696d19d5efb24deba2b63c471" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>is_positive</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1abb313668b1c479efda4864fa5e702b18" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>lerp</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1afefbf271cf6c7924e08116c924878f28" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>max</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a0d01e5ac468318f504b6493c901ec463" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>min</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a107b40f8f53dbbb17f9224074426b8e6" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>number_type</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ad0ed9dded3dc4405713f0b9270930a92" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator bool</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ac252a44c73ef696bf047b7b7b0ea13bc" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator!</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1aa8e1a22e8c56a57174744d5f29381cb3" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator!=</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a4e50cf45daf31c0230ad9817e9505617" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator*</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ac021356eb669cb80b1fe88a0409ddacd" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator*=</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a3820c3154aeba18fca212d9e0cfe15eb" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator+</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a03bb0c520217a5ec4d674ef5919a67fd" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator+</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a48b3ca3c60b15e28feb97078b842df53" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator+=</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a091915ad3b593bfdb1b91cfbab628806" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator-</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a1bbe18feced3a808007b32c01a468f5c" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator-</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a004d06472b0bc95ea68d8109e6881f23" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator-=</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a7b3f9ee15a663bff92cd2fc18ad1449b" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator/</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1aed9513e93bda0b6d5437f27b5efb5b6a" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator/=</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a618109a64ac4cba549e2a6d25f6c0cd9" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator=</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a94676acb5e8ff50209cf6886e09b6b43" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator=</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1afe58c4ae5a1b86722f1bb7e493d9c4c7" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>operator==</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a7d2bbc553fa9b07157c1e60536c45cd5" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>requires</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1aeffd93a88852c0ba4d0c92f5d737cd90" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>round</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a35447c126800f7a4302ba2af7cd66411" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>size2d</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a2d50877007a22752a7292a88c95ed6f8" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>size2d</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1af511b2e0426d957343779166907439fe" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>size2d</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a292f11d09851adc68f8f60b50216cd9e" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>size2d</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a90090e51fc91401ed1ba552cbf1b05f1" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>size2d</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ac189045668ab39657be7db09f34d6f15" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>size2d</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1aa11dc7bf967ab05052263482133a03ff" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>size2d</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a6d6a33b6751a162fe8ae5fa9afdca5ad" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>size2d</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ab32b02ca1608f0e8eb61fcdda22b8b0a" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>size2d</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ae153e1878556244a110e988e13dbf38a" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>splat</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a25129afd086e1ed1078677311854d7ab" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_array</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a2a9968f570f4b9c725759a8e01965ab7" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_f32</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1abc3f0758e4708e6ec5268bc04124fa1f" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_f64</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a2d49c1c8f75b5118e483e60301d663a6" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_i32</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ab700c0137734d4d31361e41ad5b19e01" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_i64</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a75645228e93837e8b95cdfa72c81b23d" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_isize</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a67ac57bed3924789d4157e4a9487749c" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_pair</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ab9ac4cd426342503f1f042a51470593c" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_point2d</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ab618ae49b64028b5f82e1576dc1caac8" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_qsize</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1aad6f8c3ba195944ffd3afe60bc5168c6" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_qsizef</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1aac993ecccd3d88aafefb6b8e3caa1dee" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_string</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a773014d9be700f99ca76e9990945e509" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_tuple</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a0d7edb63dd4ea49c014b9453eb5f59c1" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_u32</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1aed2e608b3dfd13e494846164b6a862fd" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_u64</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ab77fb89662764e0ebf0ffb88d2ee1a83" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_usize</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ac2b0983e1aef983282f639f645773e14" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>to_vector2d</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1afd175a8ec445e68f164ae4d65673cc28" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>width</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ada99cbb83067f0f172dcc766d04a4c68" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>width_mut</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a23d20565ed8828ea60602ae5f69d45b6" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>x</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a60c9d33976efa382c7b548c19a5fdd77" prot="private" virt="non-virtual"><scope>rolly::types::size2d</scope><name>x_</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a9e764a6a4f38cbdb7711383af5fa8d18" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>x_mut</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1ad8e273c4442bfd92a64727fd411385a6" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>y</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1aec0f04620860b55b130d230fa5591b86" prot="private" virt="non-virtual"><scope>rolly::types::size2d</scope><name>y_</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a7212185fd6ab59c60da53e8e15606a4e" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>y_mut</name></member>
      <member refid="structrolly_1_1types_1_1size2d_1a36b9a814805a9ceda7540bbf51922584" prot="public" virt="non-virtual"><scope>rolly::types::size2d</scope><name>zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
