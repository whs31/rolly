<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structrolly_1_1types_1_1velocity" kind="struct" language="C++" prot="public">
    <compoundname>rolly::types::velocity</compoundname>
    <includes refid="velocity_8h" local="no">velocity.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref></type>
        <declname>T</declname>
        <defname>T</defname>
        <defval><ref refid="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" kindref="member">f32</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" prot="public" static="no">
        <type>T</type>
        <definition>using number_type =  T</definition>
        <argsstring></argsstring>
        <name>number_type</name>
        <briefdescription>
<para>Underlying number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="35" column="7" bodyfile="include/rolly/types/velocity.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structrolly_1_1types_1_1velocity_1a2c7a3a8ecd971a7784f8c3cfcbaae7ac" prot="private" static="no" mutable="no">
        <type><ref refid="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>number_type m_</definition>
        <argsstring></argsstring>
        <name>m_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="451" column="19" bodyfile="include/rolly/types/velocity.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a595f83924562103941cf49228c292f06" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr velocity</definition>
        <argsstring>()</argsstring>
        <name>velocity</name>
        <briefdescription>
<para>Constructs an zero velocity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1velocity_1af98329d98332c5de7d68db12f21cb7e6" kindref="member">velocity::zero</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="41" column="17" bodyfile="include/rolly/types/velocity.h" bodystart="41" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a7c93c75912bcbce960ab8da8ff204125" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr velocity</definition>
        <argsstring>(number_type const value)</argsstring>
        <name>velocity</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs an velocity from a numeric value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Numeric value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="48" column="26" bodyfile="include/rolly/types/velocity.h" bodystart="48" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1aaf12ef801ad20d51faf41826b8c18b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~velocity</definition>
        <argsstring>()=default</argsstring>
        <name>~velocity</name>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="54" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a083bb7b47f044b047fafda458c5ba161" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr velocity</definition>
        <argsstring>(velocity const &amp;)=default</argsstring>
        <name>velocity</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="59" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a0c02bd8d238e9e3f5ed913376337e9ce" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr velocity</definition>
        <argsstring>(velocity &amp;&amp;)=default</argsstring>
        <name>velocity</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="64" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1ac160707298a3b02b93dd89fecf4b5ed4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;</type>
        <definition>constexpr velocity&amp; operator=</definition>
        <argsstring>(velocity const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="69" column="26"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a9d449959748f6ef550258665862aebf4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;</type>
        <definition>constexpr velocity&amp; operator=</definition>
        <argsstring>(velocity &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Move assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="74" column="26"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a767242fe07f6a7d1091a32c0462822c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string to_string</definition>
        <argsstring>(velocity_unit u=velocity_unit::meters_per_second) const</argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a48de939a7ab495a5cd0a8e834673d6d7" kindref="member">velocity_unit</ref></type>
          <declname>u</declname>
          <defval>velocity_unit::meters_per_second</defval>
        </param>
        <briefdescription>
<para>Returns string representation of the velocity. </para>
        </briefdescription>
        <detaileddescription>
<para>Velocity is represented in specified unit. If the underlying number type is floating point, it is rounded to two decimal places. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Representation measurement unit. Default is meters per second. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String representation of the object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="83" column="20" bodyfile="include/rolly/types/velocity.h" bodystart="83" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a9218853344b2ab6f68c559b2e1e38b04" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type in</definition>
        <argsstring>(velocity_unit u) const</argsstring>
        <name>in</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a48de939a7ab495a5cd0a8e834673d6d7" kindref="member">velocity_unit</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>Returns the velocity in the given unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit to return the velocity in. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Velocity in the given unit. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="102" column="30" bodyfile="include/rolly/types/velocity.h" bodystart="102" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1abfb7a96dc22e28517d1886226f908146" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type kmph</definition>
        <argsstring>() const</argsstring>
        <name>kmph</name>
        <briefdescription>
<para>Returns the velocity in kilometers per hour. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1velocity_1aca506cd9750552c9afe0902eff87f277" kindref="member">mps</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="114" column="30" bodyfile="include/rolly/types/velocity.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1aca506cd9750552c9afe0902eff87f277" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type mps</definition>
        <argsstring>() const</argsstring>
        <name>mps</name>
        <briefdescription>
<para>Returns the velocity in meters per second. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1velocity_1abfb7a96dc22e28517d1886226f908146" kindref="member">kmph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="122" column="30" bodyfile="include/rolly/types/velocity.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a022c0ba5543853b07cc8247eab3ced66" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>) U ___sfinae_requirement___(is_num_v&lt; U &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref>&lt; U &gt;</type>
        <definition>constexpr velocity&lt;U&gt; cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
<para>Casts the velocity to another numeric type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Target numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Casted velocity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="130" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a524546a00e65da4c0a58a20d7913a593" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <briefdescription>
<para>Returns the underlying numeric scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The underlying numeric scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="173" column="30" bodyfile="include/rolly/types/velocity.h" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a7b1e681365ca2379776ba38496c8d9e1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>) U ___sfinae_requirement___(is_num_v&lt; U &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr U</type>
        <definition>constexpr U as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <briefdescription>
<para>Returns this numeric newtype as number in another numeric representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type. Must satisfy concept <computeroutput><ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">rolly::concepts::num</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="180" column="20" bodyfile="include/rolly/types/velocity.h" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a4eadd631845fcfea8cf526a58403cf9b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" kindref="member">f32</ref></type>
        <definition>constexpr f32 as_f32</definition>
        <argsstring>() const</argsstring>
        <name>as_f32</name>
        <briefdescription>
<para>Returns this velocity as 32-bit floating-point number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="187" column="23" bodyfile="include/rolly/types/velocity.h" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a4f3d1e4786e042fac8b82314a89439ce" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1abc2f107791bd7c1d49ecf0f168c085a3" kindref="member">f64</ref></type>
        <definition>constexpr f64 as_f64</definition>
        <argsstring>() const</argsstring>
        <name>as_f64</name>
        <briefdescription>
<para>Returns this velocity as 64-bit floating-point number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="192" column="23" bodyfile="include/rolly/types/velocity.h" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a287bb4c3be885ca0f758ecfa8ad27682" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_finite</definition>
        <argsstring>() const</argsstring>
        <name>is_finite</name>
        <briefdescription>
<para>Returns true if this velocity is a finite number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="197" column="13" bodyfile="include/rolly/types/velocity.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a566265d7ea4ab6649c2bfdf2e96145af" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T &amp;</type>
        <definition>constexpr T&amp; operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Increments the underlying value by 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="202" column="20" bodyfile="include/rolly/types/velocity.h" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1afe13db0e1af81cd99e0f21f4b35561f1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T &amp;</type>
        <definition>constexpr T&amp; operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Increments the underlying value by 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="210" column="20" bodyfile="include/rolly/types/velocity.h" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1afd70a5715cd3b48b3a1f247e6f5bc0a8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T &amp;</type>
        <definition>constexpr T&amp; operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
<para>Decrements the underlying value by 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="218" column="20" bodyfile="include/rolly/types/velocity.h" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a32ad7696f348d2811a994e27daf6cc67" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T &amp;</type>
        <definition>constexpr T&amp; operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Decrements the underlying value by 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="226" column="20" bodyfile="include/rolly/types/velocity.h" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1ad0ed9dded3dc4405713f0b9270930a92" prot="public" static="no" constexpr="yes" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if underlying value is not <computeroutput>0</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="234" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a11f5e5b2d5a79d40ca187cb76f1c5fff" prot="public" static="no" constexpr="yes" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr operator number_type</definition>
        <argsstring>() const</argsstring>
        <name>operator number_type</name>
        <briefdescription>
<para>Returns the underlying value as <computeroutput>number_type</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="239" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="239" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a1e17ad59806c8576b924b05d15851839" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator==</definition>
        <argsstring>(velocity const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> velocity with <ref refid="namespacerolly_1_1math_1a3ac3258dd6ee92741399970d50868c2e" kindref="member">rolly::math::approx_eq</ref> for equality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other velocity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if both velocities are approximately equal, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="246" column="23" bodyfile="include/rolly/types/velocity.h" bodystart="246" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a44625f37f3945facae3ce6df3e309eac" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator!=</definition>
        <argsstring>(velocity const &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> velocity with <ref refid="namespacerolly_1_1math_1a3ac3258dd6ee92741399970d50868c2e" kindref="member">rolly::math::approx_eq</ref> for inequality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other velocity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if both velocities are not approximately equal, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="255" column="23" bodyfile="include/rolly/types/velocity.h" bodystart="255" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a26f06a2a5f0d1922d7014306f7f3452f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&lt;</definition>
        <argsstring>(velocity const &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> velocity for less than. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other velocity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if this velocities is less than <emphasis>other</emphasis>, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="262" column="18" bodyfile="include/rolly/types/velocity.h" bodystart="262" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1ac4a2a5ddb00771e4811cfcbd650046f9" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&gt;</definition>
        <argsstring>(velocity const &amp;other) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> velocity for greater than. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other velocity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if this velocities is greater than <emphasis>other</emphasis>, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="269" column="23" bodyfile="include/rolly/types/velocity.h" bodystart="269" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1ac994ac0cc109e2af0899a906c8ea7ff7" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&lt;=</definition>
        <argsstring>(velocity const &amp;other) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> velocity for less than or equal to. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other velocity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if this velocities is less than or equal to <emphasis>other</emphasis>, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="276" column="18" bodyfile="include/rolly/types/velocity.h" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a06337aa6ef04fcdef9c227e7ba0425f1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&gt;=</definition>
        <argsstring>(velocity const &amp;other) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this and <emphasis>other</emphasis> velocity for greater than or equal to. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other velocity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if this velocities is greater than or equal to <emphasis>other</emphasis>, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="283" column="23" bodyfile="include/rolly/types/velocity.h" bodystart="283" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a187480616a4887aa0d98538df458e26d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Returns the underlying numeric scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The underlying numeric scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="289" column="30" bodyfile="include/rolly/types/velocity.h" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1ac84fad9a679cc80ce232892f98fecc9b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>constexpr velocity operator+</definition>
        <argsstring>() const</argsstring>
        <name>operator+</name>
        <briefdescription>
<para>Returns <computeroutput>this</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="294" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1ab87eef98ea02d51865c0015577da93fe" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>constexpr velocity operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Returns <computeroutput>-this</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="299" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1ad286b16bdcf8102ba1827d7d2c2fbcab" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>constexpr velocity operator+</definition>
        <argsstring>(velocity const &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this + other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="305" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="305" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a244abd0b1f7a7aa4f078bd8fa584716d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>constexpr velocity operator-</definition>
        <argsstring>(velocity const &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this - other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="311" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a8a9e24904130c4dc7a3916d81e356346" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>constexpr velocity operator*</definition>
        <argsstring>(velocity const &amp;other) const</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this * other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="317" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="317" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a5560374113833ba2c819cdcc130ec525" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>constexpr velocity operator/</definition>
        <argsstring>(velocity const &amp;other) const</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this / other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="323" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="323" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a28373e32a7af5f56f5ab6ea01d9a7485" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;</type>
        <definition>constexpr velocity&amp; operator+=</definition>
        <argsstring>(velocity const &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this += other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="329" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1ae8c8d72b46fc352afedee6ecdfa8de9c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;</type>
        <definition>constexpr velocity&amp; operator-=</definition>
        <argsstring>(velocity const &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this -= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="338" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a071e223a9a68a4e4c41bb5e4ddcf7fac" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;</type>
        <definition>constexpr velocity&amp; operator*=</definition>
        <argsstring>(velocity const &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this *= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="347" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a2e24cc856d4994531f3059dc89a8c540" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;</type>
        <definition>constexpr velocity&amp; operator/=</definition>
        <argsstring>(velocity const &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this /= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="356" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a3f0519ec8fc6c583fc26b36954a0d03f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>) U ___sfinae_requirement___(is_num_v&lt; U &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>constexpr velocity operator*</definition>
        <argsstring>(U const &amp;other) const</argsstring>
        <name>operator*</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this * other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="367" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="367" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a185fdef36e7499d7bcc7236405e39cdc" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>) U ___sfinae_requirement___(is_num_v&lt; U &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>constexpr velocity operator/</definition>
        <argsstring>(U const &amp;other) const</argsstring>
        <name>operator/</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this / other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="377" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="377" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a2b8ec0ab01f877aa6a67eb206341c0bb" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>) U ___sfinae_requirement___(is_num_v&lt; U &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>constexpr velocity operator+</definition>
        <argsstring>(U const &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this + other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="387" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="387" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a4fffa2df465e306a8a2e8a04059ed272" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>) U ___sfinae_requirement___(is_num_v&lt; U &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>constexpr velocity operator-</definition>
        <argsstring>(U const &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this - other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="397" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="397" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1aa33f5800f942e7dc9c7371e3ecfc6cb5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>) U ___sfinae_requirement___(is_num_v&lt; U &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;</type>
        <definition>constexpr velocity&amp; operator+=</definition>
        <argsstring>(U const &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this += other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="407" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="407" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a7fbac48decbd498b61e79b0519e4d38c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>) U ___sfinae_requirement___(is_num_v&lt; U &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;</type>
        <definition>constexpr velocity&amp; operator-=</definition>
        <argsstring>(U const &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this -= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="418" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a2a8c27b81885c6db64253e9d2e726fc2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>) U ___sfinae_requirement___(is_num_v&lt; U &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;</type>
        <definition>constexpr velocity&amp; operator*=</definition>
        <argsstring>(U const &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this *= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="429" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="429" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1a3d17bb9efd9a4b0f7d574fb4a62b14a6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(<ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref>) U ___sfinae_requirement___(is_num_v&lt; U &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> &amp;</type>
        <definition>constexpr velocity&amp; operator/=</definition>
        <argsstring>(U const &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>U const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>this /= other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="440" column="27" bodyfile="include/rolly/types/velocity.h" bodystart="440" bodyend="443"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1ad3e9ad9eef9306a7c9728bfd786870cd" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>static constexpr velocity from_kmph</definition>
        <argsstring>(number_type kmph)</argsstring>
        <name>from_kmph</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>kmph</declname>
        </param>
        <briefdescription>
<para>Constructs an velocity from kilometers-per-hour value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kmph</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity in kilometers-per-hour. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Constructed velocity. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1velocity_1aea9b49172055d70939d24b3a9c44fa1f" kindref="member">from_mps</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="140" column="34" bodyfile="include/rolly/types/velocity.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1aea9b49172055d70939d24b3a9c44fa1f" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>static constexpr velocity from_mps</definition>
        <argsstring>(number_type mps)</argsstring>
        <name>from_mps</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>mps</declname>
        </param>
        <briefdescription>
<para>Constructs an velocity from meters-per-second value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mps</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity in meters-per-second. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Constructed velocity. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1velocity_1ad3e9ad9eef9306a7c9728bfd786870cd" kindref="member">from_kmph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="148" column="34" bodyfile="include/rolly/types/velocity.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1ad5674a85926fdc6e0d32347f5256525f" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>static constexpr velocity from</definition>
        <argsstring>(number_type value, velocity_unit u)</argsstring>
        <name>from</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a48de939a7ab495a5cd0a8e834673d6d7" kindref="member">velocity_unit</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>Constructs an velocity from another unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Numeric value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Constructed velocity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="156" column="34" bodyfile="include/rolly/types/velocity.h" bodystart="156" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1velocity_1af98329d98332c5de7d68db12f21cb7e6" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref></type>
        <definition>static constexpr velocity zero</definition>
        <argsstring>()</argsstring>
        <name>zero</name>
        <briefdescription>
<para>Constructs an zero velocity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="167" column="34" bodyfile="include/rolly/types/velocity.h" bodystart="167" bodyend="167"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structrolly_1_1types_1_1velocity_1ab93099b9eface9deddae7c7e3173d33f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, velocity const &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1types_1_1velocity" kindref="compound">velocity</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/types/velocity.h" line="445" column="14" bodyfile="include/rolly/types/velocity.h" bodystart="445" bodyend="448"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Newtype describing a velocity. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type. Must satisfy concept <computeroutput><ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">rolly::concepts::num</ref></computeroutput>. Default is <computeroutput>f32</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="include/rolly/types/velocity.h" line="31" column="19" bodyfile="include/rolly/types/velocity.h" bodystart="31" bodyend="452"/>
    <listofallmembers>
      <member refid="structrolly_1_1types_1_1velocity_1a7b1e681365ca2379776ba38496c8d9e1" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>as</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a4eadd631845fcfea8cf526a58403cf9b" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>as_f32</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a4f3d1e4786e042fac8b82314a89439ce" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>as_f64</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a022c0ba5543853b07cc8247eab3ced66" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>cast</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1ad5674a85926fdc6e0d32347f5256525f" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>from</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1ad3e9ad9eef9306a7c9728bfd786870cd" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>from_kmph</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1aea9b49172055d70939d24b3a9c44fa1f" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>from_mps</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a9218853344b2ab6f68c559b2e1e38b04" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>in</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a287bb4c3be885ca0f758ecfa8ad27682" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>is_finite</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1abfb7a96dc22e28517d1886226f908146" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>kmph</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a2c7a3a8ecd971a7784f8c3cfcbaae7ac" prot="private" virt="non-virtual"><scope>rolly::types::velocity</scope><name>m_</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1aca506cd9750552c9afe0902eff87f277" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>mps</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a107b40f8f53dbbb17f9224074426b8e6" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>number_type</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1ad0ed9dded3dc4405713f0b9270930a92" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator bool</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a11f5e5b2d5a79d40ca187cb76f1c5fff" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator number_type</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a44625f37f3945facae3ce6df3e309eac" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator!=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a187480616a4887aa0d98538df458e26d" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator*</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a8a9e24904130c4dc7a3916d81e356346" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator*</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a3f0519ec8fc6c583fc26b36954a0d03f" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator*</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a071e223a9a68a4e4c41bb5e4ddcf7fac" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator*=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a2a8c27b81885c6db64253e9d2e726fc2" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator*=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1ac84fad9a679cc80ce232892f98fecc9b" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator+</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1ad286b16bdcf8102ba1827d7d2c2fbcab" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator+</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a2b8ec0ab01f877aa6a67eb206341c0bb" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator+</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a566265d7ea4ab6649c2bfdf2e96145af" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator++</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1afe13db0e1af81cd99e0f21f4b35561f1" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator++</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a28373e32a7af5f56f5ab6ea01d9a7485" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator+=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1aa33f5800f942e7dc9c7371e3ecfc6cb5" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator+=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1ab87eef98ea02d51865c0015577da93fe" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator-</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a244abd0b1f7a7aa4f078bd8fa584716d" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator-</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a4fffa2df465e306a8a2e8a04059ed272" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator-</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1afd70a5715cd3b48b3a1f247e6f5bc0a8" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator--</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a32ad7696f348d2811a994e27daf6cc67" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator--</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1ae8c8d72b46fc352afedee6ecdfa8de9c" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator-=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a7fbac48decbd498b61e79b0519e4d38c" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator-=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a5560374113833ba2c819cdcc130ec525" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator/</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a185fdef36e7499d7bcc7236405e39cdc" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator/</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a2e24cc856d4994531f3059dc89a8c540" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator/=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a3d17bb9efd9a4b0f7d574fb4a62b14a6" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator/=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a26f06a2a5f0d1922d7014306f7f3452f" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator&lt;</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1ab93099b9eface9deddae7c7e3173d33f" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator&lt;&lt;</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1ac994ac0cc109e2af0899a906c8ea7ff7" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator&lt;=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1ac160707298a3b02b93dd89fecf4b5ed4" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a9d449959748f6ef550258665862aebf4" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a1e17ad59806c8576b924b05d15851839" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator==</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1ac4a2a5ddb00771e4811cfcbd650046f9" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator&gt;</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a06337aa6ef04fcdef9c227e7ba0425f1" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>operator&gt;=</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a767242fe07f6a7d1091a32c0462822c4" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>to_string</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a524546a00e65da4c0a58a20d7913a593" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>value</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a595f83924562103941cf49228c292f06" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>velocity</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a7c93c75912bcbce960ab8da8ff204125" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>velocity</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a083bb7b47f044b047fafda458c5ba161" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>velocity</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1a0c02bd8d238e9e3f5ed913376337e9ce" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>velocity</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1af98329d98332c5de7d68db12f21cb7e6" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>zero</name></member>
      <member refid="structrolly_1_1types_1_1velocity_1aaf12ef801ad20d51faf41826b8c18b83" prot="public" virt="non-virtual"><scope>rolly::types::velocity</scope><name>~velocity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
