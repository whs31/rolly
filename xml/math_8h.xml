<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="math_8h" kind="file" language="C++">
    <compoundname>math.h</compoundname>
    <includes local="no">cmath</includes>
    <includes refid="stdint_8h" local="yes">types/stdint.h</includes>
    <includes refid="numbers_8h" local="yes">numbers.h</includes>
    <includedby refid="rolly_8h" local="yes">rolly.h</includedby>
    <includedby refid="angle_8h" local="yes">angle.h</includedby>
    <includedby refid="point2d_8h" local="yes">point2d.h</includedby>
    <includedby refid="velocity_8h" local="yes">velocity.h</includedby>
    <incdepgraph>
      <node id="16">
        <label>fmt/format.h</label>
      </node>
      <node id="8">
        <label>limits</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="15">
        <label>global/version.h</label>
        <link refid="version_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>charconv</label>
      </node>
      <node id="1">
        <label>math.h</label>
        <link refid="math_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="21">
        <label>stdexcept</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="14">
        <label>global/export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="24">
        <label>platform_definitions.h</label>
        <link refid="platform__definitions_8h_source"/>
      </node>
      <node id="17">
        <label>version_definitions.h</label>
        <link refid="version__definitions_8h_source"/>
      </node>
      <node id="22">
        <label>char_utils.h</label>
        <link refid="char__utils_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>semver.h</label>
        <link refid="semver_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>string_view</label>
      </node>
      <node id="23">
        <label>global/definitions.h</label>
        <link refid="definitions_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>optional</label>
      </node>
      <node id="7">
        <label>numbers.h</label>
        <link refid="numbers_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>iosfwd</label>
      </node>
      <node id="9">
        <label>global.h</label>
        <link refid="global_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="26">
        <label>../type_traits.h</label>
        <link refid="type__traits_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>global/charconv.h</label>
        <link refid="charconv_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>type_traits</label>
      </node>
      <node id="25">
        <label>concepts/num.h</label>
        <link refid="num_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>types/stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>angle.h</label>
        <link refid="angle_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>point2d.h</label>
        <link refid="point2d_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>math.h</label>
        <link refid="math_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>vector2d.h</label>
        <link refid="vector2d_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>velocity.h</label>
        <link refid="velocity_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>rolly.h</label>
        <link refid="rolly_8h_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacerolly">rolly</innernamespace>
    <innernamespace refid="namespacerolly_1_1math">rolly::math</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacerolly_1_1math_1ae71706eff25ec5df1ff62b4ae7be36a5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::floating_point</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::floor</definition>
        <argsstring>(T val)</argsstring>
        <name>floor</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Rounds <computeroutput>val</computeroutput> down to the nearest integer. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a <computeroutput>constexpr</computeroutput> version of <computeroutput><ref refid="cpp/numeric/math/floor" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::floor</ref></computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type. Must be a floating point type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to round. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="24" column="25" bodyfile="rolly/math.h" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a06b1201488c8539a55f0d15c3142c846" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::min</definition>
        <argsstring>(T &amp;&amp;v)</argsstring>
        <name>min</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the minimum of a single value. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload simply returns the given value. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The minimum of a single value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="38" column="17" bodyfile="rolly/math.h" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a3a1a1d027d2cc6931b957029c079ad98" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::min</definition>
        <argsstring>(T const &amp;v1, T const &amp;v2, Args const &amp;... args)</argsstring>
        <name>min</name>
        <param>
          <type>T const &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Returns the minimum value among the provided arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function compares multiple values and returns the smallest one. It uses a recursive approach to handle an arbitrary number of arguments. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the values to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template arguments allowing multiple values of type T. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>First value to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second value to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional values to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The minimum value among the provided arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="54" column="17" bodyfile="rolly/math.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1ab3a14f303ad6df0c90ec3f7d5f57154f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::max</definition>
        <argsstring>(T &amp;&amp;v)</argsstring>
        <name>max</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the maximum of a single value. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload simply returns the given value. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The maximum of a single value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="66" column="18" bodyfile="rolly/math.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a00d802cbcc79c27d8b780034747072fd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::max</definition>
        <argsstring>(T const &amp;v1, T const &amp;v2, Args const &amp;... args)</argsstring>
        <name>max</name>
        <param>
          <type>T const &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Returns the maximum value among the provided arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function compares multiple values and returns the largest one. It uses a recursive approach to handle an arbitrary number of arguments. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the values to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template arguments allowing multiple values of type T. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>First value to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second value to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional values to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The maximum value among the provided arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="82" column="17" bodyfile="rolly/math.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1aa3571ee367243a1d142a7dc27a0ffa2d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::abs</definition>
        <argsstring>(T const &amp;v)</argsstring>
        <name>abs</name>
        <param>
          <type>T const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the absolute value of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function simply negates the input if it is negative, and returns the input unchanged if it is non-negative. It is a <computeroutput>constexpr</computeroutput> version of <computeroutput>std::abs</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to take the absolute value of. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The absolute value of v. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="96" column="17" bodyfile="rolly/math.h" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a94cb063ba3f91b4919f5fd80469f9260" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr f32</type>
        <definition>constexpr f32 rolly::math::fmod</definition>
        <argsstring>(f32 const x, f32 const y)</argsstring>
        <name>fmod</name>
        <param>
          <type>f32 const</type>
          <declname>x</declname>
        </param>
        <param>
          <type>f32 const</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Returns the remainder of the division of x by y. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a <computeroutput>constexpr</computeroutput> version of <computeroutput><ref refid="cpp/numeric/math/fmod" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::fmod</ref></computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>First value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Second value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The remainder of the division of x by y. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="108" column="19" bodyfile="rolly/math.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a8b04e5cf1529e6fad4b713259ce61722" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::num</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::to_radians</definition>
        <argsstring>(T degrees) noexcept</argsstring>
        <name>to_radians</name>
        <param>
          <type>T</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
<para>Converts degrees to radians. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Underlying type. Must be an integral or floating point type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degrees</parametername>
</parameternamelist>
<parameterdescription>
<para>Degree value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Radian value. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1a92152fa5d7fe7579552beee6eb51014e" kindref="member">to_degrees</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="123" column="18" bodyfile="rolly/math.h" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a92152fa5d7fe7579552beee6eb51014e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::num</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::to_degrees</definition>
        <argsstring>(T radians) noexcept</argsstring>
        <name>to_degrees</name>
        <param>
          <type>T</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
<para>Converts radians to degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Underlying type. Must be an integral or floating point type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radians</parametername>
</parameternamelist>
<parameterdescription>
<para>Radian value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Degree value. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1a8b04e5cf1529e6fad4b713259ce61722" kindref="member">to_radians</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="140" column="18" bodyfile="rolly/math.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a3ac3258dd6ee92741399970d50868c2e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::math::approx_eq</definition>
        <argsstring>(T a, T b, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</argsstring>
        <name>approx_eq</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T</type>
          <declname>epsilon</declname>
          <defval><ref refid="cpp/types/numeric_limits" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::numeric_limits</ref>&lt; T &gt;::epsilon()</defval>
        </param>
        <briefdescription>
<para>Returns true if numbers are approximately equal within given epsilon. </para>
        </briefdescription>
        <detaileddescription>
<para>Compares floating point values using formula <computeroutput>|a - b| &lt;= epsilon * epsilon_factor</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Epsilon factor for comparison. Default is <computeroutput><ref refid="cpp/types/numeric_limits/epsilon" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::numeric_limits&lt;T&gt;::epsilon()</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if numbers are approximately equal within given epsilon. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1ab3a5a941d1f40a4960f8090e98c680d9" kindref="member">is_null</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="158" column="7" bodyfile="rolly/math.h" bodystart="158" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1ab3a5a941d1f40a4960f8090e98c680d9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::math::is_null</definition>
        <argsstring>(T a, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</argsstring>
        <name>is_null</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>epsilon</declname>
          <defval><ref refid="cpp/types/numeric_limits" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::numeric_limits</ref>&lt; T &gt;::epsilon()</defval>
        </param>
        <briefdescription>
<para>Returns true if number is approximately zero within given epsilon. </para>
        </briefdescription>
        <detaileddescription>
<para>Compares floating point values using formula <computeroutput>|a| &lt;= epsilon * epsilon_factor</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Epsilon factor for comparison. Default is <computeroutput><ref refid="cpp/types/numeric_limits/epsilon" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::numeric_limits&lt;T&gt;::epsilon()</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if number is zero within given epsilon. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1a3ac3258dd6ee92741399970d50868c2e" kindref="member">approx_eq</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="177" column="21" bodyfile="rolly/math.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a241b7b3a3e1ba6ed1cfe08d1367b77ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::num</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T rolly::math::div_euclid</definition>
        <argsstring>(T a, T b)</argsstring>
        <name>div_euclid</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Calculates Euclidean division, the matching method for <bold>rem_euclid</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Dividend </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="191" column="8" bodyfile="rolly/math.h" bodystart="191" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a7209b4640ac965aaa277f6d2d2fb017d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::num</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T rolly::math::rem_euclid</definition>
        <argsstring>(T a, T b)</argsstring>
        <name>rem_euclid</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Calculates the least nonnegative remainder of <computeroutput>self (mod rhs)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Dividend </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="213" column="8" bodyfile="rolly/math.h" bodystart="213" bodyend="221"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="rolly/math.h"/>
  </compounddef>
</doxygen>
