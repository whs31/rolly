<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="contracts_8h" kind="file" language="C++">
    <compoundname>contracts.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">string_view</includes>
    <includes local="no">functional</includes>
    <includes local="no">fmt/format.h</includes>
    <includes refid="definitions_8h" local="yes">global/definitions.h</includes>
    <includes refid="export_8h" local="yes">global/export.h</includes>
    <includes refid="source__location_8h" local="yes">source_location.h</includes>
    <includedby refid="result_8h" local="yes">result.h</includedby>
    <includedby refid="box_8h" local="yes">box.h</includedby>
    <includedby refid="observer__ptr_8h" local="yes">observer_ptr.h</includedby>
    <includedby refid="prelude_8h" local="yes">prelude.h</includedby>
    <includedby refid="registrable_8h" local="yes">registrable.h</includedby>
    <includedby refid="rolly_8h" local="yes">rolly.h</includedby>
    <includedby refid="angle_8h" local="yes">angle.h</includedby>
    <includedby refid="velocity_8h" local="yes">velocity.h</includedby>
    <incdepgraph>
      <node id="10">
        <label>format/ostream_formatter.h</label>
        <link refid="ostream__formatter_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>functional</label>
      </node>
      <node id="5">
        <label>fmt/format.h</label>
      </node>
      <node id="15">
        <label>cstdint</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="7">
        <label>export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="8">
        <label>platform_definitions.h</label>
        <link refid="platform__definitions_8h_source"/>
      </node>
      <node id="3">
        <label>string_view</label>
      </node>
      <node id="6">
        <label>global/definitions.h</label>
        <link refid="definitions_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="12">
        <label>iosfwd</label>
      </node>
      <node id="14">
        <label>cstddef</label>
      </node>
      <node id="9">
        <label>source_location.h</label>
        <link refid="source__location_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>contracts.h</label>
        <link refid="contracts_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>type_traits</label>
      </node>
      <node id="13">
        <label>types/stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>filedevice.h</label>
        <link refid="filedevice_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>angle.h</label>
        <link refid="angle_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>point2d.h</label>
        <link refid="point2d_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>dll.h</label>
        <link refid="dll_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>traits.h</label>
        <link refid="traits_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>pimpl.h</label>
        <link refid="pimpl_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>shared_library.h</label>
        <link refid="shared__library_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>qt.h</label>
        <link refid="qt_8h_source"/>
      </node>
      <node id="14">
        <label>memory.h</label>
        <link refid="memory_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>registrable.h</label>
        <link refid="registrable_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>plugin_loader.h</label>
        <link refid="plugin__loader_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>qml.h</label>
        <link refid="qml_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>box.h</label>
        <link refid="box_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>result.h</label>
        <link refid="result_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>config.h</label>
        <link refid="config_8h_source"/>
      </node>
      <node id="1">
        <label>contracts.h</label>
        <link refid="contracts_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>observer_ptr.h</label>
        <link refid="observer__ptr_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>savefile.h</label>
        <link refid="savefile_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>vector2d.h</label>
        <link refid="vector2d_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>velocity.h</label>
        <link refid="velocity_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>prelude.h</label>
        <link refid="prelude_8h_source"/>
      </node>
      <node id="6">
        <label>rolly.h</label>
        <link refid="rolly_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structrolly_1_1contracts_1_1contract__violation" prot="public">rolly::contracts::contract_violation</innerclass>
    <innernamespace refid="namespacerolly">rolly</innernamespace>
    <innernamespace refid="namespacerolly_1_1contracts">rolly::contracts</innernamespace>
    <innernamespace refid="namespacerolly_1_1contracts_1_1detail">rolly::contracts::detail</innernamespace>
    <innernamespace refid="namespacerolly_1_1contracts_1_1audit">rolly::contracts::audit</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacerolly_1_1contracts_1abc0d6ffe3d1fdb96d3872c5148f529e2" prot="public" static="no" strong="yes">
        <type>signed char</type>
        <name>contract_type</name>
        <enumvalue id="namespacerolly_1_1contracts_1abc0d6ffe3d1fdb96d3872c5148f529e2ac3c270a815f2c6329cf95844e757cf7f" prot="public">
          <name>precondition</name>
          <briefdescription>
<para>Precondition. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1_1contracts_1abc0d6ffe3d1fdb96d3872c5148f529e2a251848760bc80cc0b08dec58b4199c6b" prot="public">
          <name>postcondition</name>
          <briefdescription>
<para>Postcondition. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1_1contracts_1abc0d6ffe3d1fdb96d3872c5148f529e2a97a1fb4792ab0d80857d825020ced2f0" prot="public">
          <name>invariant</name>
          <briefdescription>
<para>Invariant. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type of contract. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="75" column="27" bodyfile="include/rolly/contracts.h" bodystart="75" bodyend="79"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacerolly_1_1contracts_1aca5defb1c056aa55df22bc093159c32e" prot="public" static="no">
        <type><ref refid="cpp/utility/functional/function" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::function</ref>&lt; void(contract_violation const  &amp;)&gt;</type>
        <definition>using contract_violation_handler =  std::function&lt;void(contract_violation const&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>contract_violation_handler</name>
        <briefdescription>
<para>Contract violation handler type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Handler function must be <computeroutput>[[noreturn]]</computeroutput>. The behavior is undefined if it does not terminate the program. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="97" column="3" bodyfile="include/rolly/contracts.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacerolly_1_1contracts_1ab0bc120d0ba17557276c0082ec51e7b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::default_contract_violation_handler</definition>
        <argsstring>(contract_violation const &amp;violation)</argsstring>
        <name>default_contract_violation_handler</name>
        <param>
          <type>contract_violation const &amp;</type>
          <declname>violation</declname>
        </param>
        <briefdescription>
<para>Default contract violation handler. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of the contract violation handler.</para>
<para>Prints the violation to the standard error stream and terminates the program. If it is possible, colors the violation message in red.</para>
<para>Example output:</para>
<para><programlisting><codeline><highlight class="normal">Contract<sp/>violation<sp/>(invariant):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Hello,<sp/>world!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>in<sp/>function<sp/>&apos;int<sp/>__cdecl<sp/>main(int,char<sp/>**)&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>in<sp/>file<sp/>&apos;D:/dev/my/floppy-dev/bin/main.cc&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>at<sp/>line<sp/>7:18</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Process<sp/>finished<sp/>with<sp/>exit<sp/>code<sp/>3</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>violation</parametername>
</parameternamelist>
<parameterdescription>
<para>Contract violation data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="123" column="10" declfile="include/rolly/contracts.h" declline="123" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>contract_violation_handler &amp;</type>
        <definition>contract_violation_handler&amp; rolly::contracts::violation_handler</definition>
        <argsstring>()</argsstring>
        <name>violation_handler</name>
        <briefdescription>
<para>Returns the current global contract violation handler. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mutable reference to the global contract violation handler. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ab0bc120d0ba17557276c0082ec51e7b0" kindref="member">default_contract_violation_handler</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ad4881604e9bfa8b79bcb9c1e23f1e7af" kindref="member">set_violation_handler</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="135" column="32" declfile="include/rolly/contracts.h" declline="135" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1ad4881604e9bfa8b79bcb9c1e23f1e7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>contract_violation_handler</type>
        <definition>contract_violation_handler rolly::contracts::set_violation_handler</definition>
        <argsstring>(contract_violation_handler handler)</argsstring>
        <name>set_violation_handler</name>
        <param>
          <type>contract_violation_handler</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Sets the global contract violation handler and returns the old one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Handler function must be <computeroutput>[[noreturn]]</computeroutput>. The behavior is undefined if it does not terminate the program. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Contract violation handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Old global contract violation handler. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ab0bc120d0ba17557276c0082ec51e7b0" kindref="member">default_contract_violation_handler</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="150" column="5" declfile="include/rolly/contracts.h" declline="150" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1detail_1a85609edb0083695bff46154dd637729f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>contract_violation</type>
        <definition>contract_violation rolly::contracts::detail::make_contract_violation</definition>
        <argsstring>(contract_type type, std::string_view message, source_location location=source_location::current())</argsstring>
        <name>make_contract_violation</name>
        <param>
          <type>contract_type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
        </param>
        <param>
          <type>source_location</type>
          <declname>location</declname>
          <defval>source_location::current()</defval>
        </param>
        <briefdescription>
<para>Creates a contract violation data structure from current location in the source code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of violated contract. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation location in source code. Defaults to current location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Contract violation data structure. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1detail_1a51d1323752d48a6e020de21fbda1e7f5" kindref="member">violate</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="168" column="26" declfile="include/rolly/contracts.h" declline="168" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1detail_1a51d1323752d48a6e020de21fbda1e7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::detail::violate</definition>
        <argsstring>(contract_type type, std::string_view message, source_location location=source_location::current())</argsstring>
        <name>violate</name>
        <param>
          <type>contract_type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
        </param>
        <param>
          <type>source_location</type>
          <declname>location</declname>
          <defval>source_location::current()</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with the violation data from current location in the source code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of violated contract. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation location in source code. Defaults to current location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1detail_1a85609edb0083695bff46154dd637729f" kindref="member">make_contract_violation</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="186" column="12" declfile="include/rolly/contracts.h" declline="186" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::invariant</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Invariant violated&quot;,)</argsstring>
        <name>invariant</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Invariant violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>invariant</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Invariant expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Invariant violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1a85522a06efdcca823d5c7119ebafb850" kindref="member">broken_invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" kindref="member">precondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="202" column="5" bodyfile="include/rolly/contracts.h" bodystart="202" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::precondition</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Precondition violated&quot;,)</argsstring>
        <name>precondition</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Precondition violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>precondition</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Precondition expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Precondition violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation location in source code. Defaults to current location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ab1f48107fb7de5e343fb595d41219bfa" kindref="member">broken_precondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="227" column="5" bodyfile="include/rolly/contracts.h" bodystart="227" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::postcondition</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Postcondition violated&quot;,)</argsstring>
        <name>postcondition</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Postcondition violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>postcondition</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Postcondition expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Postcondition violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1a4660f2a90742b97d33d90f3dfd4ee812" kindref="member">broken_postcondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" kindref="member">precondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="251" column="5" bodyfile="include/rolly/contracts.h" bodystart="251" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1a85522a06efdcca823d5c7119ebafb850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::broken_invariant</definition>
        <argsstring>(std::string_view message=&quot;Broken invariant&quot;,)</argsstring>
        <name>broken_invariant</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken invariant&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken invariant violation. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken invariant&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">invariant</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="273" column="10" bodyfile="include/rolly/contracts.h" bodystart="273" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1ab1f48107fb7de5e343fb595d41219bfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::broken_precondition</definition>
        <argsstring>(std::string_view message=&quot;Broken precondition&quot;,)</argsstring>
        <name>broken_precondition</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken precondition&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken precondition violation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken precondition&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1aa8946f97218fccab5c3252ded10a82dd" kindref="member">precondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="292" column="10" bodyfile="include/rolly/contracts.h" bodystart="292" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1a4660f2a90742b97d33d90f3dfd4ee812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::broken_postcondition</definition>
        <argsstring>(std::string_view message=&quot;Broken postcondition&quot;,)</argsstring>
        <name>broken_postcondition</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken postcondition&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken postcondition violation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken postcondition&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1a6fc741e9082a3b9384dfd50c1b36e64b" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="311" column="10" bodyfile="include/rolly/contracts.h" bodystart="311" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1adfba2187b8f7e9795c0fb5ec669a15a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::not_implemented</definition>
        <argsstring>()</argsstring>
        <name>not_implemented</name>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken invariant violation. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for marking a function as <emphasis>unimplemented</emphasis>. <simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1ad298c10384725ecb46aa64acbe8f7d07" kindref="member">invariant</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="330" column="10" bodyfile="include/rolly/contracts.h" bodystart="330" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a7e49ec735d033ca6f6da7652f78c4a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::invariant</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Invariant violated&quot;,)</argsstring>
        <name>invariant</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Invariant violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>invariant</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <simplesect kind="note"><para>The expression is only evaluated in debug mode. In release mode this function is a no-op. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Invariant expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Invariant violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a90bd93c4cbe4a541b3398ee95ed17505" kindref="member">broken_invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a6c79fd5607d45e582936442da6e322f4" kindref="member">precondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a9cf84ba57be583af6f5a3972047d8416" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="356" column="7" bodyfile="include/rolly/contracts.h" bodystart="356" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a6c79fd5607d45e582936442da6e322f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::precondition</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Precondition violated&quot;,)</argsstring>
        <name>precondition</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Precondition violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>precondition</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <simplesect kind="note"><para>The expression is only evaluated in debug mode. In release mode this function is a no-op. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Precondition expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Precondition violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation location in source code. Defaults to current location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a5bf2bc45f46e47e578f2defd5d87b52a" kindref="member">broken_precondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a7e49ec735d033ca6f6da7652f78c4a30" kindref="member">invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a9cf84ba57be583af6f5a3972047d8416" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="387" column="7" bodyfile="include/rolly/contracts.h" bodystart="387" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a9cf84ba57be583af6f5a3972047d8416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::postcondition</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Postcondition violated&quot;,)</argsstring>
        <name>postcondition</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Postcondition violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>postcondition</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <simplesect kind="note"><para>The expression is only evaluated in debug mode. In release mode this function is a no-op. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Postcondition expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Postcondition violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a040c855daee4842d4c0caefd701b6607" kindref="member">broken_postcondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a7e49ec735d033ca6f6da7652f78c4a30" kindref="member">invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a6c79fd5607d45e582936442da6e322f4" kindref="member">precondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="417" column="7" bodyfile="include/rolly/contracts.h" bodystart="417" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a90bd93c4cbe4a541b3398ee95ed17505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::broken_invariant</definition>
        <argsstring>(std::string_view message=&quot;Broken invariant&quot;,)</argsstring>
        <name>broken_invariant</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken invariant&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken invariant violation. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <simplesect kind="note"><para>The expression is only evaluated in debug mode. In release mode this function is a no-op. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken invariant&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a7e49ec735d033ca6f6da7652f78c4a30" kindref="member">invariant</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="444" column="12" bodyfile="include/rolly/contracts.h" bodystart="444" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a5bf2bc45f46e47e578f2defd5d87b52a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::broken_precondition</definition>
        <argsstring>(std::string_view message=&quot;Broken precondition&quot;,)</argsstring>
        <name>broken_precondition</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken precondition&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken precondition violation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken precondition&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a6c79fd5607d45e582936442da6e322f4" kindref="member">precondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="466" column="12" bodyfile="include/rolly/contracts.h" bodystart="466" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a040c855daee4842d4c0caefd701b6607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::broken_postcondition</definition>
        <argsstring>(std::string_view message=&quot;Broken postcondition&quot;,)</argsstring>
        <name>broken_postcondition</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken postcondition&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken postcondition violation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken postcondition&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a9cf84ba57be583af6f5a3972047d8416" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="488" column="12" bodyfile="include/rolly/contracts.h" bodystart="488" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a123d98f0454da1fde978fa21ec6dd5e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::not_implemented</definition>
        <argsstring>()</argsstring>
        <name>not_implemented</name>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken invariant violation. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for marking a function as <emphasis>unimplemented</emphasis>. <simplesect kind="note"><para>The expression is only evaluated in debug mode. In release mode this function is a no-op. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a7e49ec735d033ca6f6da7652f78c4a30" kindref="member">invariant</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="511" column="12" bodyfile="include/rolly/contracts.h" bodystart="511" bodyend="517"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/rolly/contracts.h"/>
  </compounddef>
</doxygen>
