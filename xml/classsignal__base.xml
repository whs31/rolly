<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsignal__base" kind="class" language="C++" prot="public" final="yes">
    <compoundname>signal_base</compoundname>
    <basecompoundref refid="structdetail_1_1cleanable" prot="public" virt="non-virtual">cleanable</basecompoundref>
    <includes refid="signals_8h" local="no">rolly/functional/signals.h</includes>
    <innerclass refid="structsignal__base_1_1group__type" prot="private">signal_base::group_type</innerclass>
    <templateparamlist>
      <param>
        <type>typename Lockable</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classsignal__base_1a3c85546c070f774e5b17b5ca08ef358f" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/types/integral_constant" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::integral_constant</ref>&lt; bool, ! <ref refid="cpp/types/is_same" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_same</ref>&lt; L, <ref refid="structdetail_1_1null__mutex" kindref="compound">detail::null_mutex</ref> &gt;::value &gt;</type>
        <definition>using is_thread_safe =  std::integral_constant&lt;bool, ! std::is_same&lt;L, detail::null_mutex&gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>is_thread_safe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1074" column="5" bodyfile="rolly/functional/signals.h" bodystart="1075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsignal__base_1a21aaaef7b9d12121c5af4d27bf3f69e4" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>std::conditional_t&lt; <ref refid="cpp/types/integral_constant" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">is_thread_safe</ref>&lt; L &gt;::value, <ref refid="classdetail_1_1copy__on__write" kindref="compound">detail::copy_on_write</ref>&lt; U &gt;, U &gt;</type>
        <definition>using cow_type =  std::conditional_t&lt;is_thread_safe&lt;L&gt;::value, detail::copy_on_write&lt;U&gt;, U&gt;</definition>
        <argsstring></argsstring>
        <name>cow_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1078" column="5" bodyfile="rolly/functional/signals.h" bodystart="1078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsignal__base_1aa6a744c9054331f13290a2bf5f7674cb" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>std::conditional_t&lt; <ref refid="cpp/types/integral_constant" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">is_thread_safe</ref>&lt; L &gt;::value, <ref refid="classdetail_1_1copy__on__write" kindref="compound">detail::copy_on_write</ref>&lt; U &gt;, U const  &amp; &gt;</type>
        <definition>using cow_copy_type =  std::conditional_t&lt;is_thread_safe&lt;L&gt;::value, detail::copy_on_write&lt;U&gt;, U const&amp;&gt;</definition>
        <argsstring></argsstring>
        <name>cow_copy_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1081" column="5" bodyfile="rolly/functional/signals.h" bodystart="1082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsignal__base_1a57ff225b322751b4c64359f70e032f37" prot="private" static="no">
        <type><ref refid="cpp/thread/unique_lock" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::unique_lock</ref>&lt; Lockable &gt;</type>
        <definition>using lock_type =  std::unique_lock&lt;Lockable&gt;</definition>
        <argsstring></argsstring>
        <name>lock_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1084" column="5" bodyfile="rolly/functional/signals.h" bodystart="1084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsignal__base_1ad19135e347a3d08be483b50d21267901" prot="private" static="no">
        <type><ref refid="classdetail_1_1slot__base" kindref="compound">detail::slot_base</ref>&lt; T... &gt;</type>
        <definition>using slot_base =  detail::slot_base&lt;T...&gt;</definition>
        <argsstring></argsstring>
        <name>slot_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1085" column="5" bodyfile="rolly/functional/signals.h" bodystart="1085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsignal__base_1aa097e33a3cd8391d57dd51c253764725" prot="private" static="no">
        <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">detail::slot_ptr</ref>&lt; T... &gt;</type>
        <definition>using slot_ptr =  detail::slot_ptr&lt;T...&gt;</definition>
        <argsstring></argsstring>
        <name>slot_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1086" column="5" bodyfile="rolly/functional/signals.h" bodystart="1086" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsignal__base_1a997736347e58e312ac7373d2d1c39be7" prot="private" static="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">slot_ptr</ref> &gt;</type>
        <definition>using slots_type =  std::vector&lt;slot_ptr&gt;</definition>
        <argsstring></argsstring>
        <name>slots_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1087" column="5" bodyfile="rolly/functional/signals.h" bodystart="1087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsignal__base_1a5b3fb4ffb0fa1a0bd31dcfc011d0d807" prot="private" static="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; group_type &gt;</type>
        <definition>using list_type =  std::vector&lt;group_type&gt;</definition>
        <argsstring></argsstring>
        <name>list_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1094" column="5" bodyfile="rolly/functional/signals.h" bodystart="1094" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsignal__base_1ae6246084a39469baf1386d17e13953ae" prot="public" static="no">
        <type>trait::typelist&lt; T... &gt;</type>
        <definition>using arg_list =  trait::typelist&lt;T...&gt;</definition>
        <argsstring></argsstring>
        <name>arg_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1097" column="5" bodyfile="rolly/functional/signals.h" bodystart="1097" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsignal__base_1a1a8c1a987b01dc0d3043a2aa94b5db05" prot="public" static="no">
        <type>trait::typelist&lt; <ref refid="classconnection" kindref="compound">connection</ref> &amp;, T... &gt;</type>
        <definition>using ext_arg_list =  trait::typelist&lt;connection&amp;, T...&gt;</definition>
        <argsstring></argsstring>
        <name>ext_arg_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1098" column="5" bodyfile="rolly/functional/signals.h" bodystart="1098" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsignal__base_1a1b4dcadd74e4b032b90a244bf0e670b5" prot="private" static="no" mutable="yes">
        <type>Lockable</type>
        <definition>Lockable m_mutex</definition>
        <argsstring></argsstring>
        <name>m_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1546" column="22" bodyfile="rolly/functional/signals.h" bodystart="1546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsignal__base_1a82d38ae64b8523c4ab71f20c23038e70" prot="private" static="no" mutable="no">
        <type>cow_type&lt; <ref refid="cpp/container/vector" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">list_type</ref>, Lockable &gt;</type>
        <definition>cow_type&lt;list_type, Lockable&gt; m_slots</definition>
        <argsstring></argsstring>
        <name>m_slots</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1547" column="14" bodyfile="rolly/functional/signals.h" bodystart="1547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsignal__base_1ac99b848aac74c450762b3e1ae0469f04" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/atomic/atomic" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::atomic</ref>&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; m_block</definition>
        <argsstring></argsstring>
        <name>m_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1548" column="17" bodyfile="rolly/functional/signals.h" bodystart="1548" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsignal__base_1a0319ae1544070cd262b42d215c4951e4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>signal_base</definition>
        <argsstring>() noexcept</argsstring>
        <name>signal_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1100" column="5" bodyfile="rolly/functional/signals.h" bodystart="1100" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a745f75aa912b0e320e6437f7a3e31dc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~signal_base</definition>
        <argsstring>() override</argsstring>
        <name>~signal_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1103" column="5" bodyfile="rolly/functional/signals.h" bodystart="1103" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a67e8bb741b13dd964d008b43d8789053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>signal_base</definition>
        <argsstring>(signal_base const &amp;)=delete</argsstring>
        <name>signal_base</name>
        <param>
          <type><ref refid="classsignal__base" kindref="compound">signal_base</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1105" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a557e4406dccc4274f857e7513787915d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsignal__base" kindref="compound">signal_base</ref> &amp;</type>
        <definition>signal_base&amp; operator=</definition>
        <argsstring>(signal_base const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classsignal__base" kindref="compound">signal_base</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1106" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1adadc76f932427b93677bae0d71852d8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>signal_base</definition>
        <argsstring>(signal_base &amp;&amp;o)</argsstring>
        <name>signal_base</name>
        <param>
          <type><ref refid="classsignal__base" kindref="compound">signal_base</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1108" column="5" bodyfile="rolly/functional/signals.h" bodystart="1108" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a81e2fcaaa06342dfe4bc572b6bf396f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsignal__base" kindref="compound">signal_base</ref> &amp;</type>
        <definition>signal_base&amp; operator=</definition>
        <argsstring>(signal_base &amp;&amp;o)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classsignal__base" kindref="compound">signal_base</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1115" column="17" bodyfile="rolly/functional/signals.h" bodystart="1115" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1adc61e3f20182ec18fe7b33e3f31e670d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void operator()</definition>
        <argsstring>(U &amp;&amp;... a) const</argsstring>
        <name>operator()</name>
        <param>
          <type>U &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emit a signal</para>
<para>Effect: All non blocked and connected slot functions will be called with supplied arguments. Safety: With proper locking (see pal::signal), emission can happen from multiple threads simultaneously. The guarantees only apply to the signal object, it does not cover thread safety of potentially shared state used in slot functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to emit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1139" column="10" bodyfile="rolly/functional/signals.h" bodystart="1139" bodyend="1153"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a416fd3f71ad61dfa22a70b274496f576" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; trait::is_callable_v&lt; arg_list, Callable &gt;, <ref refid="classconnection" kindref="compound">connection</ref> &gt;</type>
        <definition>std::enable_if_t&lt;trait::is_callable_v&lt;arg_list, Callable&gt;, connection&gt; connect</definition>
        <argsstring>(Callable &amp;&amp;c, group_id gid=0)</argsstring>
        <name>connect</name>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">group_id</ref></type>
          <declname>gid</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect a callable of compatible arguments</para>
<para>Effect: Creates and stores a new slot responsible for executing the supplied callable for every subsequent signal emission. Safety: Thread-safety depends on locking policy.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gid</parametername>
</parameternamelist>
<parameterdescription>
<para>an identifier that can be used to order slot execution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a connection object that can be used to interact with the slot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1168" column="7" bodyfile="rolly/functional/signals.h" bodystart="1168" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a20320695ff13b2c29d5705aadef9b68d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; trait::is_callable_v&lt; ext_arg_list, Callable &gt;, <ref refid="classconnection" kindref="compound">connection</ref> &gt;</type>
        <definition>std::enable_if_t&lt;trait::is_callable_v&lt;ext_arg_list, Callable&gt;, connection&gt; connect_extended</definition>
        <argsstring>(Callable &amp;&amp;c, group_id gid=0)</argsstring>
        <name>connect_extended</name>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">group_id</ref></type>
          <declname>gid</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect a callable with an additional connection argument</para>
<para>The callable&apos;s first argument must be of type connection. This overload the callable to manage it&apos;s own connection through this argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gid</parametername>
</parameternamelist>
<parameterdescription>
<para>an identifier that can be used to order slot execution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a connection object that can be used to interact with the slot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1188" column="7" bodyfile="rolly/functional/signals.h" bodystart="1188" bodyend="1195"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a02c22b38fb69ac4dbd4213ac46041e05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Pmf</type>
          </param>
          <param>
            <type>typename Ptr</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; trait::is_callable_v&lt; arg_list, Pmf, Ptr &gt; &amp;&amp;trait::is_observer_v&lt; Ptr &gt;, <ref refid="classconnection" kindref="compound">connection</ref> &gt;</type>
        <definition>std:: enable_if_t&lt;trait::is_callable_v&lt;arg_list, Pmf, Ptr&gt; &amp;&amp; trait::is_observer_v&lt;Ptr&gt;, connection&gt; connect</definition>
        <argsstring>(Pmf &amp;&amp;pmf, Ptr &amp;&amp;ptr, group_id gid=0)</argsstring>
        <name>connect</name>
        <param>
          <type>Pmf &amp;&amp;</type>
          <declname>pmf</declname>
        </param>
        <param>
          <type>Ptr &amp;&amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">group_id</ref></type>
          <declname>gid</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overload of connect for pointers over member functions derived from observer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmf</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer over member function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>an object pointer derived from observer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gid</parametername>
</parameternamelist>
<parameterdescription>
<para>an identifier that can be used to order slot execution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a connection object that can be used to interact with the slot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1209" column="7" bodyfile="rolly/functional/signals.h" bodystart="1209" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a14f21af9bba5f6a415b6903ab8976ade" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Pmf</type>
          </param>
          <param>
            <type>typename Ptr</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; trait::is_callable_v&lt; arg_list, Pmf, Ptr &gt; &amp;&amp;! trait::is_observer_v&lt; Ptr &gt; &amp;&amp;! trait::is_weak_ptr_compatible_v&lt; Ptr &gt;, <ref refid="classconnection" kindref="compound">connection</ref> &gt;</type>
        <definition>std::enable_if_t&lt; trait::is_callable_v&lt;arg_list, Pmf, Ptr&gt; &amp;&amp; ! trait::is_observer_v&lt;Ptr&gt; &amp;&amp; ! trait::is_weak_ptr_compatible_v&lt;Ptr&gt;, connection&gt; connect</definition>
        <argsstring>(Pmf &amp;&amp;pmf, Ptr &amp;&amp;ptr, group_id gid=0)</argsstring>
        <name>connect</name>
        <param>
          <type>Pmf &amp;&amp;</type>
          <declname>pmf</declname>
        </param>
        <param>
          <type>Ptr &amp;&amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">group_id</ref></type>
          <declname>gid</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overload of connect for pointers over member functions</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmf</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer over member function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>an object pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gid</parametername>
</parameternamelist>
<parameterdescription>
<para>an identifier that can be used to order slot execution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a connection object that can be used to interact with the slot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1231" column="7" bodyfile="rolly/functional/signals.h" bodystart="1231" bodyend="1237"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a7465de5a78da9273f2e0d2271749904e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Pmf</type>
          </param>
          <param>
            <type>typename Ptr</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; trait::is_callable_v&lt; ext_arg_list, Pmf, Ptr &gt; &amp;&amp;! trait::is_weak_ptr_compatible_v&lt; Ptr &gt;, <ref refid="classconnection" kindref="compound">connection</ref> &gt;</type>
        <definition>std::enable_if_t&lt; trait::is_callable_v&lt;ext_arg_list, Pmf, Ptr&gt; &amp;&amp; ! trait::is_weak_ptr_compatible_v&lt;Ptr&gt;, connection&gt; connect_extended</definition>
        <argsstring>(Pmf &amp;&amp;pmf, Ptr &amp;&amp;ptr, group_id gid=0)</argsstring>
        <name>connect_extended</name>
        <param>
          <type>Pmf &amp;&amp;</type>
          <declname>pmf</declname>
        </param>
        <param>
          <type>Ptr &amp;&amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">group_id</ref></type>
          <declname>gid</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overload of connect for pointer over member functions and</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmf</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer over member function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>an object pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gid</parametername>
</parameternamelist>
<parameterdescription>
<para>an identifier that can be used to order slot execution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a connection object that can be used to interact with the slot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1251" column="7" bodyfile="rolly/functional/signals.h" bodystart="1251" bodyend="1258"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1aa093137f1fee7e7d3794e3524aec579f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Pmf</type>
          </param>
          <param>
            <type>typename Ptr</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; ! trait::is_callable_v&lt; arg_list, Pmf &gt; &amp;&amp;trait::is_weak_ptr_compatible_v&lt; Ptr &gt;, <ref refid="classconnection" kindref="compound">connection</ref> &gt;</type>
        <definition>std::enable_if_t&lt; ! trait::is_callable_v&lt;arg_list, Pmf&gt; &amp;&amp; trait::is_weak_ptr_compatible_v&lt;Ptr&gt;, connection&gt; connect</definition>
        <argsstring>(Pmf &amp;&amp;pmf, Ptr &amp;&amp;ptr, group_id gid=0)</argsstring>
        <name>connect</name>
        <param>
          <type>Pmf &amp;&amp;</type>
          <declname>pmf</declname>
        </param>
        <param>
          <type>Ptr &amp;&amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">group_id</ref></type>
          <declname>gid</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overload of connect for lifetime object tracking and automatic disconnection</para>
<para>Ptr must be convertible to an object following a loose form of weak pointer concept, by implementing the ADL-detected conversion function to_weak().</para>
<para>This overload covers the case of a pointer over member function and a trackable pointer of that class.</para>
<para>Note: only weak references are stored, a slot does not extend the lifetime of a suppied object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmf</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer over member function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a trackable object pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gid</parametername>
</parameternamelist>
<parameterdescription>
<para>an identifier that can be used to order slot execution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a connection object that can be used to interact with the slot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1281" column="7" bodyfile="rolly/functional/signals.h" bodystart="1281" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a22daf56f4c425148e89277f4173b48f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>typename Trackable</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; trait::is_callable_v&lt; arg_list, Callable &gt; &amp;&amp;trait::is_weak_ptr_compatible_v&lt; Trackable &gt;, <ref refid="classconnection" kindref="compound">connection</ref> &gt;</type>
        <definition>std::enable_if_t&lt; trait::is_callable_v&lt;arg_list, Callable&gt; &amp;&amp; trait::is_weak_ptr_compatible_v&lt;Trackable&gt;, connection&gt; connect</definition>
        <argsstring>(Callable &amp;&amp;c, Trackable &amp;&amp;ptr, group_id gid=0)</argsstring>
        <name>connect</name>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Trackable &amp;&amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">group_id</ref></type>
          <declname>gid</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overload of connect for lifetime object tracking and automatic disconnection</para>
<para>Trackable must be convertible to an object following a loose form of weak pointer concept, by implementing the ADL-detected conversion function to_weak().</para>
<para>This overload covers the case of a standalone callable and unrelated trackable object.</para>
<para>Note: only weak references are stored, a slot does not extend the lifetime of a suppied object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a trackable object pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gid</parametername>
</parameternamelist>
<parameterdescription>
<para>an identifier that can be used to order slot execution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a connection object that can be used to interact with the slot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1312" column="7" bodyfile="rolly/functional/signals.h" bodystart="1312" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a4ed3027626b8d475a8bb4085b5fb32f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>CallArgs</declname>
            <defname>CallArgs</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classscoped__connection" kindref="compound">scoped_connection</ref></type>
        <definition>scoped_connection connect_scoped</definition>
        <argsstring>(CallArgs &amp;&amp;... args)</argsstring>
        <name>connect_scoped</name>
        <param>
          <type>CallArgs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a connection whose duration is tied to the return object Use the same semantics as connect </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1327" column="23" bodyfile="rolly/functional/signals.h" bodystart="1327" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1ae65354dca29c9244b5ddce4893c7e050" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;(trait::is_callable_v&lt; arg_list, Callable &gt;||trait::is_callable_v&lt; ext_arg_list, Callable &gt;||trait::is_pmf_v&lt; Callable &gt;) &amp;&amp;<ref refid="structdetail_1_1function__traits" kindref="compound">detail::function_traits</ref>&lt; Callable &gt;::is_disconnectable, size_t &gt;</type>
        <definition>std::enable_if_t&lt; (trait::is_callable_v&lt;arg_list, Callable&gt; || trait::is_callable_v&lt;ext_arg_list, Callable&gt; || trait::is_pmf_v&lt;Callable&gt;) &amp;&amp; detail::function_traits&lt;Callable&gt;::is_disconnectable, size_t&gt; disconnect</definition>
        <argsstring>(Callable const &amp;c)</argsstring>
        <name>disconnect</name>
        <param>
          <type>Callable const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disconnect slots bound to a callable</para>
<para>Effect: Disconnects all the slots bound to the callable in argument. Safety: Thread-safety depends on locking policy.</para>
<para>If the callable is a free or static member function, this overload is always available. However, RTTI is needed for it to work for pointer to member functions, function objects or and (references to) lambdas, because the C++ spec does not mandate the pointers to member functions to be unique.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of disconnected slots </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1351" column="7" bodyfile="rolly/functional/signals.h" bodystart="1351" bodyend="1353"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a3f3f7f2dd387a0dd96c939dcbaec92fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Obj</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; ! trait::is_callable_v&lt; arg_list, Obj &gt; &amp;&amp;! trait::is_callable_v&lt; ext_arg_list, Obj &gt; &amp;&amp;! trait::is_pmf_v&lt; Obj &gt;, size_t &gt;</type>
        <definition>std::enable_if_t&lt; ! trait::is_callable_v&lt;arg_list, Obj&gt; &amp;&amp; ! trait::is_callable_v&lt;ext_arg_list, Obj&gt; &amp;&amp; ! trait::is_pmf_v&lt;Obj&gt;, size_t&gt; disconnect</definition>
        <argsstring>(Obj const &amp;obj)</argsstring>
        <name>disconnect</name>
        <param>
          <type>Obj const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disconnect slots bound to this object</para>
<para>Effect: Disconnects all the slots bound to the object or tracked object in argument. Safety: Thread-safety depends on locking policy.</para>
<para>The object may be a pointer or trackable object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>an object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of disconnected slots </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1372" column="7" bodyfile="rolly/functional/signals.h" bodystart="1372" bodyend="1374"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1acbdfdfd1a4812f3b7fa36599e6762414" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>typename Obj</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t disconnect</definition>
        <argsstring>(Callable const &amp;c, Obj const &amp;obj)</argsstring>
        <name>disconnect</name>
        <param>
          <type>Callable const &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Obj const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disconnect slots bound both to a callable and object</para>
<para>Effect: Disconnects all the slots bound to the callable and object in argument. Safety: Thread-safety depends on locking policy.</para>
<para>For naked pointers, the Callable is expected to be a pointer over member function. If obj is trackable, any kind of Callable can be used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>an object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of disconnected slots </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1390" column="12" bodyfile="rolly/functional/signals.h" bodystart="1390" bodyend="1392"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a581fa6bed07a4abaea3dec3a4a4605e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t disconnect</definition>
        <argsstring>(group_id gid)</argsstring>
        <name>disconnect</name>
        <param>
          <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">group_id</ref></type>
          <declname>gid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disconnect slots in a particular group</para>
<para>Effect: Disconnects all the slots in the group id in argument. Safety: Thread-safety depends on locking policy.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gid</parametername>
</parameternamelist>
<parameterdescription>
<para>a group id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of disconnected slots </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1403" column="12" bodyfile="rolly/functional/signals.h" bodystart="1403" bodyend="1413"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a02922e7231c3a315b2bfd1049b675365" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void disconnect_all</definition>
        <argsstring>()</argsstring>
        <name>disconnect_all</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disconnects all the slots Safety: Thread safety depends on locking policy </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1419" column="10" bodyfile="rolly/functional/signals.h" bodystart="1419" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a6492f4e68ba91c40f179d15508a679e4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void block</definition>
        <argsstring>() noexcept</argsstring>
        <name>block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Blocks signal emission Safety: thread safe </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1428" column="10" bodyfile="rolly/functional/signals.h" bodystart="1428" bodyend="1428"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a27e7a6a740ea8eeb2791b996adce72b4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void unblock</definition>
        <argsstring>() noexcept</argsstring>
        <name>unblock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unblocks signal emission Safety: thread safe </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1434" column="10" bodyfile="rolly/functional/signals.h" bodystart="1434" bodyend="1434"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1abc95cfa1a604cb7c20dd0fbb1b1a4c3d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool blocked</definition>
        <argsstring>() const noexcept</argsstring>
        <name>blocked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests blocking state of signal emission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1439" column="10" bodyfile="rolly/functional/signals.h" bodystart="1439" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1aec593142dca44f0123df15cf2793bc29" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t slot_count</definition>
        <argsstring>() noexcept</argsstring>
        <name>slot_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of connected slots Safety: thread safe </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1445" column="12" bodyfile="rolly/functional/signals.h" bodystart="1445" bodyend="1452"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classsignal__base_1a28774e1a1bc1350680ee08faf26e8ff9" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void clean</definition>
        <argsstring>(detail::slot_state *state) override</argsstring>
        <name>clean</name>
        <reimplements refid="structdetail_1_1cleanable_1a345a05a2d450246eca94da2ec99309e8">clean</reimplements>
        <param>
          <type><ref refid="classdetail_1_1slot__state" kindref="compound">detail::slot_state</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>remove disconnected slots </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1458" column="10" bodyfile="rolly/functional/signals.h" bodystart="1458" bodyend="1478"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classsignal__base_1a7e34cb89d2e34e5647eb837697b5f461" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>cow_copy_type&lt; <ref refid="cpp/container/vector" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">list_type</ref>, Lockable &gt;</type>
        <definition>cow_copy_type&lt;list_type, Lockable&gt; slots_reference</definition>
        <argsstring>() const</argsstring>
        <name>slots_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1482" column="26" bodyfile="rolly/functional/signals.h" bodystart="1482" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1aefc462d5903bed6e92b54a3706dc83d0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Slot</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto make_slot</definition>
        <argsstring>(A &amp;&amp;... a)</argsstring>
        <name>make_slot</name>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1489" column="17" bodyfile="rolly/functional/signals.h" bodystart="1489" bodyend="1491"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a0252893d2737887db21bcf4aa72565e8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void add_slot</definition>
        <argsstring>(slot_ptr &amp;&amp;s)</argsstring>
        <name>add_slot</name>
        <param>
          <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">slot_ptr</ref> &amp;&amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1494" column="10" bodyfile="rolly/functional/signals.h" bodystart="1494" bodyend="1514"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1a4a32613c3e2a34e14b3b2e32cb2793c4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cond</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t disconnect_if</definition>
        <argsstring>(Cond &amp;&amp;cond)</argsstring>
        <name>disconnect_if</name>
        <param>
          <type>Cond &amp;&amp;</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1518" column="12" bodyfile="rolly/functional/signals.h" bodystart="1518" bodyend="1540"/>
      </memberdef>
      <memberdef kind="function" id="classsignal__base_1ac8bb3912a3ce86b15842e79d0b421204" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="1543" column="10" bodyfile="rolly/functional/signals.h" bodystart="1543" bodyend="1543"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classsignal__base" kindref="compound">signal_base</ref> is an implementation of the observer pattern, through the use of an emitting object and slots that are connected to the signal and called with supplied arguments when a signal is emitted.</para>
<para><ref refid="classsignal__base" kindref="compound">signal_base</ref> is the general implementation, whose locking policy must be set in order to decide thread safety guarantees. signal and signal_st are partial specializations for multi-threaded and single-threaded use.</para>
<para>It does not allow slots to return a value.</para>
<para>Slot execution order can be constrained by assigning group ids to the slots. The execution order of slots in a same group is unspecified and should not be relied upon, however groups are executed in ascending group ids order. When the group id of a slot is not set, it is assigned to the group 0. Group ids can have any value in the range of signed 32 bit integers.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Lockable</parametername>
</parameternamelist>
<parameterdescription>
<para>a lock type to decide the lock policy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T...</parametername>
</parameternamelist>
<parameterdescription>
<para>the argument types of the emitting and slots functions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>cleanable</label>
        <link refid="structdetail_1_1cleanable"/>
      </node>
      <node id="1">
        <label>signal_base&lt; Lockable, T &gt;</label>
        <link refid="classsignal__base"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>cleanable</label>
        <link refid="structdetail_1_1cleanable"/>
      </node>
      <node id="1">
        <label>signal_base&lt; Lockable, T &gt;</label>
        <link refid="classsignal__base"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="rolly/functional/signals.h" line="1072" column="45" bodyfile="rolly/functional/signals.h" bodystart="1072" bodyend="1549"/>
    <listofallmembers>
      <member refid="classsignal__base_1a0252893d2737887db21bcf4aa72565e8" prot="private" virt="non-virtual"><scope>signal_base</scope><name>add_slot</name></member>
      <member refid="classsignal__base_1ae6246084a39469baf1386d17e13953ae" prot="public" virt="non-virtual"><scope>signal_base</scope><name>arg_list</name></member>
      <member refid="classsignal__base_1a6492f4e68ba91c40f179d15508a679e4" prot="public" virt="non-virtual"><scope>signal_base</scope><name>block</name></member>
      <member refid="classsignal__base_1abc95cfa1a604cb7c20dd0fbb1b1a4c3d" prot="public" virt="non-virtual"><scope>signal_base</scope><name>blocked</name></member>
      <member refid="classsignal__base_1a28774e1a1bc1350680ee08faf26e8ff9" prot="protected" virt="virtual"><scope>signal_base</scope><name>clean</name></member>
      <member refid="classsignal__base_1ac8bb3912a3ce86b15842e79d0b421204" prot="private" virt="non-virtual"><scope>signal_base</scope><name>clear</name></member>
      <member refid="classsignal__base_1a416fd3f71ad61dfa22a70b274496f576" prot="public" virt="non-virtual"><scope>signal_base</scope><name>connect</name></member>
      <member refid="classsignal__base_1a02c22b38fb69ac4dbd4213ac46041e05" prot="public" virt="non-virtual"><scope>signal_base</scope><name>connect</name></member>
      <member refid="classsignal__base_1a14f21af9bba5f6a415b6903ab8976ade" prot="public" virt="non-virtual"><scope>signal_base</scope><name>connect</name></member>
      <member refid="classsignal__base_1aa093137f1fee7e7d3794e3524aec579f" prot="public" virt="non-virtual"><scope>signal_base</scope><name>connect</name></member>
      <member refid="classsignal__base_1a22daf56f4c425148e89277f4173b48f8" prot="public" virt="non-virtual"><scope>signal_base</scope><name>connect</name></member>
      <member refid="classsignal__base_1a20320695ff13b2c29d5705aadef9b68d" prot="public" virt="non-virtual"><scope>signal_base</scope><name>connect_extended</name></member>
      <member refid="classsignal__base_1a7465de5a78da9273f2e0d2271749904e" prot="public" virt="non-virtual"><scope>signal_base</scope><name>connect_extended</name></member>
      <member refid="classsignal__base_1a4ed3027626b8d475a8bb4085b5fb32f2" prot="public" virt="non-virtual"><scope>signal_base</scope><name>connect_scoped</name></member>
      <member refid="classsignal__base_1aa6a744c9054331f13290a2bf5f7674cb" prot="private" virt="non-virtual"><scope>signal_base</scope><name>cow_copy_type</name></member>
      <member refid="classsignal__base_1a21aaaef7b9d12121c5af4d27bf3f69e4" prot="private" virt="non-virtual"><scope>signal_base</scope><name>cow_type</name></member>
      <member refid="classsignal__base_1ae65354dca29c9244b5ddce4893c7e050" prot="public" virt="non-virtual"><scope>signal_base</scope><name>disconnect</name></member>
      <member refid="classsignal__base_1a3f3f7f2dd387a0dd96c939dcbaec92fa" prot="public" virt="non-virtual"><scope>signal_base</scope><name>disconnect</name></member>
      <member refid="classsignal__base_1acbdfdfd1a4812f3b7fa36599e6762414" prot="public" virt="non-virtual"><scope>signal_base</scope><name>disconnect</name></member>
      <member refid="classsignal__base_1a581fa6bed07a4abaea3dec3a4a4605e1" prot="public" virt="non-virtual"><scope>signal_base</scope><name>disconnect</name></member>
      <member refid="classsignal__base_1a02922e7231c3a315b2bfd1049b675365" prot="public" virt="non-virtual"><scope>signal_base</scope><name>disconnect_all</name></member>
      <member refid="classsignal__base_1a4a32613c3e2a34e14b3b2e32cb2793c4" prot="private" virt="non-virtual"><scope>signal_base</scope><name>disconnect_if</name></member>
      <member refid="classsignal__base_1a1a8c1a987b01dc0d3043a2aa94b5db05" prot="public" virt="non-virtual"><scope>signal_base</scope><name>ext_arg_list</name></member>
      <member refid="classsignal__base_1a3c85546c070f774e5b17b5ca08ef358f" prot="private" virt="non-virtual"><scope>signal_base</scope><name>is_thread_safe</name></member>
      <member refid="classsignal__base_1a5b3fb4ffb0fa1a0bd31dcfc011d0d807" prot="private" virt="non-virtual"><scope>signal_base</scope><name>list_type</name></member>
      <member refid="classsignal__base_1a57ff225b322751b4c64359f70e032f37" prot="private" virt="non-virtual"><scope>signal_base</scope><name>lock_type</name></member>
      <member refid="classsignal__base_1ac99b848aac74c450762b3e1ae0469f04" prot="private" virt="non-virtual"><scope>signal_base</scope><name>m_block</name></member>
      <member refid="classsignal__base_1a1b4dcadd74e4b032b90a244bf0e670b5" prot="private" virt="non-virtual"><scope>signal_base</scope><name>m_mutex</name></member>
      <member refid="classsignal__base_1a82d38ae64b8523c4ab71f20c23038e70" prot="private" virt="non-virtual"><scope>signal_base</scope><name>m_slots</name></member>
      <member refid="classsignal__base_1aefc462d5903bed6e92b54a3706dc83d0" prot="private" virt="non-virtual"><scope>signal_base</scope><name>make_slot</name></member>
      <member refid="classsignal__base_1adc61e3f20182ec18fe7b33e3f31e670d" prot="public" virt="non-virtual"><scope>signal_base</scope><name>operator()</name></member>
      <member refid="classsignal__base_1a557e4406dccc4274f857e7513787915d" prot="public" virt="non-virtual"><scope>signal_base</scope><name>operator=</name></member>
      <member refid="classsignal__base_1a81e2fcaaa06342dfe4bc572b6bf396f0" prot="public" virt="non-virtual"><scope>signal_base</scope><name>operator=</name></member>
      <member refid="classsignal__base_1a0319ae1544070cd262b42d215c4951e4" prot="public" virt="non-virtual"><scope>signal_base</scope><name>signal_base</name></member>
      <member refid="classsignal__base_1a67e8bb741b13dd964d008b43d8789053" prot="public" virt="non-virtual"><scope>signal_base</scope><name>signal_base</name></member>
      <member refid="classsignal__base_1adadc76f932427b93677bae0d71852d8d" prot="public" virt="non-virtual"><scope>signal_base</scope><name>signal_base</name></member>
      <member refid="classsignal__base_1ad19135e347a3d08be483b50d21267901" prot="private" virt="non-virtual"><scope>signal_base</scope><name>slot_base</name></member>
      <member refid="classsignal__base_1aec593142dca44f0123df15cf2793bc29" prot="public" virt="non-virtual"><scope>signal_base</scope><name>slot_count</name></member>
      <member refid="classsignal__base_1aa097e33a3cd8391d57dd51c253764725" prot="private" virt="non-virtual"><scope>signal_base</scope><name>slot_ptr</name></member>
      <member refid="classsignal__base_1a7e34cb89d2e34e5647eb837697b5f461" prot="private" virt="non-virtual"><scope>signal_base</scope><name>slots_reference</name></member>
      <member refid="classsignal__base_1a997736347e58e312ac7373d2d1c39be7" prot="private" virt="non-virtual"><scope>signal_base</scope><name>slots_type</name></member>
      <member refid="classsignal__base_1a27e7a6a740ea8eeb2791b996adce72b4" prot="public" virt="non-virtual"><scope>signal_base</scope><name>unblock</name></member>
      <member refid="structdetail_1_1cleanable_1a82e22447aef3fa270c72d0dd6b9b4d18" prot="public" virt="virtual"><scope>signal_base</scope><name>~cleanable</name></member>
      <member refid="classsignal__base_1a745f75aa912b0e320e6437f7a3e31dc8" prot="public" virt="non-virtual"><scope>signal_base</scope><name>~signal_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
