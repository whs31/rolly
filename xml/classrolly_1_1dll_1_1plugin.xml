<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrolly_1_1dll_1_1plugin" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>rolly::dll::plugin</compoundname>
    <includes refid="plugin_8h" local="no">rolly/dll/plugin.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classrolly_1_1dll_1_1plugin_1a413fc61d01d6d908440c634eb9132f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class plugin_loader</definition>
        <argsstring></argsstring>
        <name>plugin_loader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="326" column="5" bodyfile="rolly/dll/plugin.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classrolly_1_1dll_1_1plugin_1a7cfe8ba698ae3d3e7f2448e2e4009b31" prot="protected" static="no" mutable="no">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string soname_</definition>
        <argsstring></argsstring>
        <name>soname_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="329" column="17" bodyfile="rolly/dll/plugin.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a8bcaba9fd6209418b35804efdffb61c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>plugin</definition>
        <argsstring>()=default</argsstring>
        <name>plugin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="240" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a631057f87fff9b84136f55161da38721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>plugin</definition>
        <argsstring>(plugin const &amp;)=default</argsstring>
        <name>plugin</name>
        <param>
          <type><ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">plugin</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="241" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1ab94285591dc3045c5f7c91c0da011486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>plugin</definition>
        <argsstring>(plugin &amp;&amp;)=default</argsstring>
        <name>plugin</name>
        <param>
          <type><ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">plugin</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="242" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a3273be2887eac65ebd74a7ac5bed6779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">plugin</ref> &amp;</type>
        <definition>plugin&amp; operator=</definition>
        <argsstring>(plugin const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">plugin</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="243" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a6375f40e8349a91b610973c7fb67aa75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">plugin</ref> &amp;</type>
        <definition>plugin&amp; operator=</definition>
        <argsstring>(plugin &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">plugin</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="244" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a480eb1084925d7ab72ca200724c6a27c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~plugin</definition>
        <argsstring>()=default</argsstring>
        <name>~plugin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="245" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a782a8f03cca96caa964b019fdf81da84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string_view</type>
        <definition>virtual std::string_view name</definition>
        <argsstring>() const =0</argsstring>
        <name>name</name>
        <briefdescription>
<para>Plugin internal interface name. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should return unique interface name.</para>
<para>It is recommended to document this function&apos;s return value in your plugin documentation.</para>
<para>Used in <ref refid="classrolly_1_1dll_1_1plugin__loader_1abb17c3456dfe332d00c39917da83812d" kindref="member">rolly::dll::plugin_loader::query_interface</ref> method for iterating over plugins. <simplesect kind="return"><para>Internal interface name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="256" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a8abfaef9c352d1a3bd0fd8b433081584" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string_view</type>
        <definition>virtual std::string_view soname</definition>
        <argsstring>() const</argsstring>
        <name>soname</name>
        <briefdescription>
<para>Returns name of the plugin&apos;s shared object file without platform specific extension and <computeroutput>lib</computeroutput> prefix. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, if <computeroutput>libtest.so</computeroutput> is loaded, then <computeroutput>soname</computeroutput> will return <computeroutput>test</computeroutput>. <simplesect kind="return"><para>Name of the related shared object file without platform specific extension and <computeroutput>lib</computeroutput> prefix. </para>
</simplesect>
<simplesect kind="version"><para>2.1.33 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="267" column="31" bodyfile="rolly/dll/plugin.h" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a7effe5b83e10d37f18fb13a2fb35a082" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string_view</type>
        <definition>virtual std::string_view description</definition>
        <argsstring>() const</argsstring>
        <name>description</name>
        <briefdescription>
<para>Plugin description. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should return plugin description. It can be left empty in case if you don&apos;t want to document your plugin. <simplesect kind="return"><para>Plugin description string or <computeroutput>&quot;No description&quot;</computeroutput> if empty. </para>
</simplesect>
<simplesect kind="version"><para>2.1.33 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="276" column="31" bodyfile="rolly/dll/plugin.h" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1ad293e4b7e7d88a16a360415cca9ad9f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classrolly_1_1meta_1_1project__meta" kindref="compound">meta::project_meta</ref> const  &amp;</type>
        <definition>virtual meta::project_meta const&amp; meta</definition>
        <argsstring>() const =0</argsstring>
        <name>meta</name>
        <briefdescription>
<para>Plugin metadata. </para>
        </briefdescription>
        <detaileddescription>
<para>Plugins are described by: <itemizedlist>
<listitem>
<para>name </para>
</listitem>
<listitem>
<para>version </para>
</listitem>
<listitem>
<para>vendor domain </para>
</listitem>
<listitem>
<para>vendor name </para>
</listitem>
</itemizedlist>
<simplesect kind="return"><para>Reference to the plugin metadata. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="289" column="39"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a70ebc47aa2a08a0d5dc1e2222dc2f606" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classrolly_1_1types_1_1guid" kindref="compound">guid</ref> const  &amp;</type>
        <definition>virtual guid const&amp; uuid</definition>
        <argsstring>() const =0</argsstring>
        <name>uuid</name>
        <briefdescription>
<para>Plugin UUID. </para>
        </briefdescription>
        <detaileddescription>
<para>Plugins are described by UUID. <simplesect kind="note"><para>You can generate UUIDs using <ulink url="https://www.uuidgenerator.net/">UUID generator</ulink>. </para>
</simplesect>
<simplesect kind="return"><para>Reference to the plugin UUID. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classrolly_1_1types_1_1guid" kindref="compound">rolly::types::guid</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="299" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a91048bac1d9f2557cc86c9eb8b39ca59" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool init</definition>
        <argsstring>(std::any &amp;init_interface)=0</argsstring>
        <name>init</name>
        <param>
          <type>std::any &amp;</type>
          <declname>init_interface</declname>
        </param>
        <briefdescription>
<para>Called directly after plugin constructor during plugin loading. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init_interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure passed to plugin from the <ref refid="classrolly_1_1dll_1_1plugin__loader" kindref="compound">rolly::dll::plugin_loader</ref> class. Can be used to pass configuration data to plugin, such as pointer to Application object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if plugin was successfully loaded. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="308" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a4d4fdef23d3fbfb46cfcabc3562e7981" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool quit</definition>
        <argsstring>()=0</argsstring>
        <name>quit</name>
        <briefdescription>
<para>Called directly before plugin destructor during plugin unloading. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if plugin was successfully unloaded. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="314" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1aae655bdcd443a53e8cf6b3bd51d824ed" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>static std::string native_soname</definition>
        <argsstring>(std::string_view soname) noexcept</argsstring>
        <name>native_soname</name>
        <param>
          <type>std::string_view</type>
          <declname>soname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="316" column="25" bodyfile="rolly/dll/plugin.h" bodystart="316" bodyend="324"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrolly_1_1dll_1_1plugin_1a06e17f9dcf9f777ae31718fc38fbe877" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>plugin</definition>
        <argsstring>(std::string_view soname)</argsstring>
        <name>plugin</name>
        <param>
          <type>std::string_view</type>
          <declname>soname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/dll/plugin.h" line="332" column="5" bodyfile="rolly/dll/plugin.h" bodystart="332" bodyend="333"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Plugin interface. </para>
    </briefdescription>
    <detaileddescription>
<para>Plugin interface is a base class for your extension plugins.</para>
<para>Calling graph during plugin loading/unloading routine: <image type="html" name="calling_graph.png"></image>
</para>
<sect4 id="classrolly_1_1dll_1_1plugin_1plugin_usage">
<title>Usage basics</title>
<para>To implement the plugin system, you need to implement the following entities: <itemizedlist>
<listitem>
<para>Plugin interface, which will derive from the <ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">rolly::dll::plugin</ref> class . This interface will be used by both the plugin loader and the plugin. Best practice is to put it into a separate header file or the <bold>INTERFACE</bold> library in CMake. </para>
</listitem>
<listitem>
<para>Plugin implementation, which will derive from the interface, presented above. This code will not be linked anywhere, but it is required to compile it as a <bold>SHARED</bold> library, which links to the <emphasis>INTERFACE</emphasis> library described above. </para>
</listitem>
<listitem>
<para>Application with a plugin system (<ref refid="classrolly_1_1dll_1_1plugin__loader" kindref="compound">rolly::dll::plugin_loader</ref> class). Must be compiled as the <bold>EXECUTABLE</bold>, which links to the INTERFACE library described above. </para>
</listitem>
</itemizedlist>
</para>
</sect4>
<sect4 id="classrolly_1_1dll_1_1plugin_1plugin_example_plugin_interface">
<title>Example plugin interface</title>
<para>Here we declare an <bold>INTERFACE</bold> CMake library with a single header file, which contains your plugin interface.</para>
<para>In the header file we simply derive from the <ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">rolly::dll::plugin</ref> without overriding any functions.</para>
<para><bold>CMakeLists.txt</bold> <programlisting filename=".cmake"><codeline><highlight class="normal">cmake_minimum_required(VERSION<sp/>3.16)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">include_guard(GLOBAL)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">add_library(plugin-interface<sp/>INTERFACE)</highlight></codeline>
<codeline><highlight class="normal">target_sources(plugin-interface<sp/>INTERFACE<sp/>include/plugin-api/api.h)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">target_link_libraries(plugin-interface<sp/>INTERFACE<sp/>rolly::rolly)</highlight></codeline>
<codeline><highlight class="normal">target_include_directories(${PROJECT_NAME}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>INTERFACE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$&lt;BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$&lt;INSTALL_INTERFACE:include&gt;</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para><bold>include/plugin-api/api.h</bold> <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rolly/dll/plugin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExamplePlugin<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">rolly::dll::plugin</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>hello()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>example<sp/>function<sp/>-<sp/>part<sp/>of<sp/>your</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">plugin</highlight><highlight class="stringliteral">&apos;s<sp/>public<sp/>API.</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>we<sp/>will<sp/>call<sp/>this<sp/>function<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="stringliteral">application<sp/>later.</highlight></codeline>
<codeline><highlight class="stringliteral">};</highlight></codeline>
</programlisting></para>
</sect4>
<sect4 id="classrolly_1_1dll_1_1plugin_1plugin_example_plugin_impl">
<title>Example plugin implementation</title>
<para>Implementation of the plugin interface must be compiled as a <bold>SHARED</bold> library, which links to the <bold>INTERFACE</bold> library described above.</para>
<para><simplesect kind="warning"><para><ref refid="classrolly_1_1dll_1_1plugin__loader" kindref="compound">rolly::dll::plugin_loader</ref> expects libraries on Linux to be named with the prefix <computeroutput>lib</computeroutput>, e.g. <computeroutput>libplugin-impl</computeroutput>. In Windows, it expects the same, but without the prefix. By default, CMake with MingW compiles the libraries with the prefix <computeroutput>lib</computeroutput>, so don&apos;t forget to set the prefix to <computeroutput>&quot;&quot;</computeroutput>., e.g. <programlisting filename=".cmake"><codeline><highlight class="normal">if(WIN32)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_target_properties(plugin-impl<sp/>PROPERTIES<sp/>PREFIX<sp/>&quot;&quot;)</highlight></codeline>
<codeline><highlight class="normal">endif()</highlight></codeline>
</programlisting></para>
</simplesect>
<bold>CMakeLists.txt</bold> <programlisting filename=".cmake"><codeline><highlight class="normal">cmake_minimum_required(VERSION<sp/>3.16)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">add_library(plugin-impl<sp/>SHARED<sp/>plugin.cc)</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(plugin-impl<sp/>PUBLIC<sp/>plugin-interface<sp/>rolly::rolly)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if(WIN32)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_target_properties(plugin-impl<sp/>PROPERTIES<sp/>PREFIX<sp/>&quot;&quot;)</highlight></codeline>
<codeline><highlight class="normal">endif()</highlight></codeline>
</programlisting></para>
<para>The plugin implementation is a class, which implements the plugin interface and overrides the <ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">rolly::dll::plugin</ref> interface methods.</para>
<para><simplesect kind="remark"><para>Notice the macro <computeroutput>DECLARE_PLUGIN(...)</computeroutput> in the plugin implementation code. This macro is used to register the plugin implementation with the plugin loader and basically expands to something like: <programlisting filename=".cpp"><codeline><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/><ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">rolly::dll::plugin</ref>*<sp/>__rolly_identifier_for_calling()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="classrolly_1_1dll_1_1plugin" kindref="compound">rolly::dll::plugin</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>IMPL_NAME);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="note"><para>Do not forget to fully qualify your implementation class typename when passing it to the <computeroutput>DECLARE_PLUGIN(...)</computeroutput> macro! For example, if your plugin resides in the <computeroutput>example</computeroutput> namespace and is named <computeroutput>ExamplePluginImpl</computeroutput>, qualify it like: <programlisting filename=".cpp"><codeline><highlight class="normal">DECLARE_PLUGIN(example::ExamplePluginImpl)</highlight></codeline>
</programlisting></para>
</simplesect>
<bold>plugin.cc</bold> <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;fmt/core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/format.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;plugin-api/api.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rolly/dll/detail/macro.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>example<sp/>plugin<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExamplePluginImpl<sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ExamplePlugin<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrolly_1_1dll_1_1plugin_1a91048bac1d9f2557cc86c9eb8b39ca59" kindref="member">init</ref>(std::any&amp;<sp/>init_interface)<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::println(</highlight><highlight class="stringliteral">&quot;Plugin:<sp/>plugin<sp/>loaded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>data<sp/>passed<sp/>by<sp/>loader<sp/>in<sp/>init<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>case,<sp/>we<sp/>expect<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>std::any_cast&lt;std::string<sp/>const&amp;&gt;(init_interface);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::println(</highlight><highlight class="stringliteral">&quot;Plugin:<sp/>init<sp/>called<sp/>with<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>s);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classrolly_1_1dll_1_1plugin_1a4d4fdef23d3fbfb46cfcabc3562e7981" kindref="member">quit</ref>()<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::println(</highlight><highlight class="stringliteral">&quot;Plugin:<sp/>plugin<sp/>unloaded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>std::string_view<sp/><ref refid="classrolly_1_1dll_1_1plugin_1a782a8f03cca96caa964b019fdf81da84" kindref="member">name</ref>()<sp/>const<sp/>final<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;example_plugin_impl&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ExamplePluginImpl()<sp/>{<sp/>fmt::println(</highlight><highlight class="stringliteral">&quot;Plugin:<sp/>constructor<sp/>called&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>~ExamplePluginImpl()<sp/>final<sp/>{<sp/>fmt::println(</highlight><highlight class="stringliteral">&quot;Plugin:<sp/>destructor<sp/>called&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>hello()<sp/>const<sp/>final<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice<sp/>this<sp/>macro<sp/>call.<sp/>see<sp/>remarks<sp/>above<sp/>for<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">DECLARE_PLUGIN(ExamplePluginImpl)<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*-pro-type-reinterpret-cast)</highlight></codeline>
</programlisting></para>
</sect4>
<sect4 id="classrolly_1_1dll_1_1plugin_1plugin_example_plugin_app">
<title>Example application</title>
<para>See <ref refid="classrolly_1_1dll_1_1plugin__loader" kindref="compound">rolly::dll::plugin_loader</ref> documentation for method reference.</para>
<para><bold>CMakeLists.txt</bold> <programlisting filename=".cmake"><codeline><highlight class="normal">cmake_minimum_required(VERSION<sp/>3.16)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">include_guard(GLOBAL)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">add_executable(plugin-host<sp/>main.cc)</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(plugin-host<sp/>PUBLIC<sp/>plugin-interface<sp/>rolly::rolly<sp/>spdlog::spdlog)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(WIN32)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>add_custom_command(TARGET<sp/>plugin-host</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>POST_BUILD</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>COMMAND<sp/>${CMAKE_COMMAND}<sp/>-E<sp/>copy<sp/>$&lt;TARGET_RUNTIME_DLLS:plugin-host&gt;</highlight></codeline>
<codeline><highlight class="normal">$&lt;TARGET_FILE_DIR:plugin-host&gt;<sp/>COMMAND_EXPAND_LISTS</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">endif<sp/>()</highlight></codeline>
</programlisting></para>
<para><bold>main.cc</bold> <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;fmt/core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rolly/dll/plugin_loader.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;plugin-api/api.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rolly/log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>spdlog::default_logger()-&gt;set_level(spdlog::level::trace);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>init_data<sp/>=<sp/>std::make_any&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;Hi<sp/>from<sp/>std::any!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>loader<sp/>=<sp/><ref refid="classrolly_1_1dll_1_1plugin__loader" kindref="compound">rolly::dll::plugin_loader</ref>(init_data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>loader.load_all(std::filesystem::current_path().parent_path()<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;plugin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::println(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>plugin:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>res.error());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>plugin<sp/>=<sp/>loader.query_interface&lt;ExamplePlugin&gt;(</highlight><highlight class="stringliteral">&quot;example_plugin_impl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>plugin)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::println(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>plugin:<sp/>plugin<sp/>is<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fmt::println(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>(*plugin).get().hello());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fmt::println(</highlight><highlight class="stringliteral">&quot;Success!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect4>
<sect4 id="classrolly_1_1dll_1_1plugin_1plugin_example_plugin_output">
<title>Output</title>
<para><programlisting filename=".shell-session"><codeline><highlight class="normal">17:20:14<sp/><sp/>.\plugin-host.exe</highlight></codeline>
<codeline><highlight class="normal">Plugin:<sp/>constructor<sp/>called</highlight></codeline>
<codeline><highlight class="normal">[2024-11-12<sp/>17:20:17.008]<sp/>[info]<sp/>rolly::dll:<sp/>loaded<sp/>plugin<sp/>&apos;plugin-impl.dll&apos;</highlight></codeline>
<codeline><highlight class="normal">Plugin:<sp/>plugin<sp/>loaded</highlight></codeline>
<codeline><highlight class="normal">Plugin:<sp/>init<sp/>called<sp/>with<sp/>Hi<sp/>from<sp/>std::any!</highlight></codeline>
<codeline><highlight class="normal">Hello</highlight></codeline>
<codeline><highlight class="normal">Success!</highlight></codeline>
<codeline><highlight class="normal">Plugin:<sp/>plugin<sp/>unloaded</highlight></codeline>
<codeline><highlight class="normal">Plugin:<sp/>destructor<sp/>called</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">17:20:17<sp/><sp/>ls</highlight></codeline>
<codeline><highlight class="normal">D:\dev\radar2\rolly-radar\build\Debug\examples\dll\host</highlight></codeline>
<codeline><highlight class="normal">Mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LastWriteTime<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>Name</highlight></codeline>
<codeline><highlight class="normal">----<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------------<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>------<sp/>----</highlight></codeline>
<codeline><highlight class="normal">d-----<sp/><sp/><sp/><sp/><sp/><sp/><sp/>12.11.2024<sp/><sp/><sp/><sp/><sp/>14:37<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CMakeFiles</highlight></codeline>
<codeline><highlight class="normal">-a----<sp/><sp/><sp/><sp/><sp/><sp/><sp/>12.11.2024<sp/><sp/><sp/><sp/><sp/>14:37<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1197<sp/><sp/><sp/>cmake_install.cmake</highlight></codeline>
<codeline><highlight class="normal">-a----<sp/><sp/><sp/><sp/><sp/><sp/><sp/>12.11.2024<sp/><sp/><sp/><sp/><sp/>14:37<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>317<sp/><sp/><sp/>CTestTestfile.cmake</highlight></codeline>
<codeline><highlight class="normal">-a----<sp/><sp/><sp/><sp/><sp/><sp/><sp/>12.11.2024<sp/><sp/><sp/><sp/><sp/>15:33<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2036629<sp/><sp/><sp/>libfmtd.dll</highlight></codeline>
<codeline><highlight class="normal">-a----<sp/><sp/><sp/><sp/><sp/><sp/><sp/>12.11.2024<sp/><sp/><sp/><sp/><sp/>15:33<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2404<sp/><sp/><sp/>libplugin-host.dll.a</highlight></codeline>
<codeline><highlight class="normal">-a----<sp/><sp/><sp/><sp/><sp/><sp/><sp/>12.11.2024<sp/><sp/><sp/><sp/><sp/>15:33<sp/><sp/><sp/><sp/><sp/><sp/><sp/>14017647<sp/><sp/><sp/>librolly.dll</highlight></codeline>
<codeline><highlight class="normal">-a----<sp/><sp/><sp/><sp/><sp/><sp/><sp/>12.11.2024<sp/><sp/><sp/><sp/><sp/>15:33<sp/><sp/><sp/><sp/><sp/><sp/><sp/>10949254<sp/><sp/><sp/>plugin-host.exe</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ref refid="classrolly_1_1dll_1_1plugin__loader" kindref="compound">rolly::dll::plugin_loader</ref> </para>
</simplesect>
</para>
</sect4>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>string</label>
        <link refid="cpp/string/basic_string" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="1">
        <label>plugin</label>
        <link refid="classrolly_1_1dll_1_1plugin"/>
        <childnode refid="2" relation="usage">
          <edgelabel>soname_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="rolly/dll/plugin.h" line="238" column="7" bodyfile="rolly/dll/plugin.h" bodystart="236" bodyend="334"/>
    <listofallmembers>
      <member refid="classrolly_1_1dll_1_1plugin_1a7effe5b83e10d37f18fb13a2fb35a082" prot="public" virt="virtual"><scope>rolly::dll::plugin</scope><name>description</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a91048bac1d9f2557cc86c9eb8b39ca59" prot="public" virt="pure-virtual"><scope>rolly::dll::plugin</scope><name>init</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1ad293e4b7e7d88a16a360415cca9ad9f1" prot="public" virt="pure-virtual"><scope>rolly::dll::plugin</scope><name>meta</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a782a8f03cca96caa964b019fdf81da84" prot="public" virt="pure-virtual"><scope>rolly::dll::plugin</scope><name>name</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1aae655bdcd443a53e8cf6b3bd51d824ed" prot="public" virt="non-virtual"><scope>rolly::dll::plugin</scope><name>native_soname</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a3273be2887eac65ebd74a7ac5bed6779" prot="public" virt="non-virtual"><scope>rolly::dll::plugin</scope><name>operator=</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a6375f40e8349a91b610973c7fb67aa75" prot="public" virt="non-virtual"><scope>rolly::dll::plugin</scope><name>operator=</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a8bcaba9fd6209418b35804efdffb61c3" prot="public" virt="non-virtual"><scope>rolly::dll::plugin</scope><name>plugin</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a631057f87fff9b84136f55161da38721" prot="public" virt="non-virtual"><scope>rolly::dll::plugin</scope><name>plugin</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1ab94285591dc3045c5f7c91c0da011486" prot="public" virt="non-virtual"><scope>rolly::dll::plugin</scope><name>plugin</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a06e17f9dcf9f777ae31718fc38fbe877" prot="private" virt="non-virtual"><scope>rolly::dll::plugin</scope><name>plugin</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a413fc61d01d6d908440c634eb9132f53" prot="public" virt="non-virtual"><scope>rolly::dll::plugin</scope><name>plugin_loader</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a4d4fdef23d3fbfb46cfcabc3562e7981" prot="public" virt="pure-virtual"><scope>rolly::dll::plugin</scope><name>quit</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a8abfaef9c352d1a3bd0fd8b433081584" prot="public" virt="virtual"><scope>rolly::dll::plugin</scope><name>soname</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a7cfe8ba698ae3d3e7f2448e2e4009b31" prot="protected" virt="non-virtual"><scope>rolly::dll::plugin</scope><name>soname_</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a70ebc47aa2a08a0d5dc1e2222dc2f606" prot="public" virt="pure-virtual"><scope>rolly::dll::plugin</scope><name>uuid</name></member>
      <member refid="classrolly_1_1dll_1_1plugin_1a480eb1084925d7ab72ca200724c6a27c" prot="public" virt="virtual"><scope>rolly::dll::plugin</scope><name>~plugin</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
