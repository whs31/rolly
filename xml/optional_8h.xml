<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="optional_8h" kind="file" language="C++">
    <compoundname>optional.h</compoundname>
    <includes local="no">exception</includes>
    <includes local="no">functional</includes>
    <includes local="no">new</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">variant</includes>
    <includedby refid="semver_8h" local="yes">semver.h</includedby>
    <includedby refid="result_8h" local="yes">result.h</includedby>
    <includedby refid="directories_8h" local="yes">directories.h</includedby>
    <includedby refid="shared__library_8h" local="yes">shared_library.h</includedby>
    <includedby refid="lazy_8h" local="yes">lazy.h</includedby>
    <includedby refid="box_8h" local="yes">box.h</includedby>
    <includedby refid="types_8h" local="yes">types.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="7">
        <label>variant</label>
      </node>
      <node id="2">
        <label>exception</label>
      </node>
      <node id="1">
        <label>optional.h</label>
        <link refid="optional_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>new</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
      <node id="5">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="28">
        <label>filedevice.h</label>
        <link refid="filedevice_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>angle.h</label>
        <link refid="angle_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>version.h</label>
        <link refid="version_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>point2d.h</label>
        <link refid="point2d_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>lazy.h</label>
        <link refid="lazy_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>math.h</label>
        <link refid="math_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>dll.h</label>
        <link refid="dll_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>traits.h</label>
        <link refid="traits_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>pimpl.h</label>
        <link refid="pimpl_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>shared_library.h</label>
        <link refid="shared__library_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>serialization.h</label>
        <link refid="serialization_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>optional.h</label>
        <link refid="optional_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>bit.h</label>
        <link refid="bit_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>directories.h</label>
        <link refid="directories_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>macro.h</label>
        <link refid="macro_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>qt.h</label>
        <link refid="qt_8h_source"/>
      </node>
      <node id="33">
        <label>memory.h</label>
        <link refid="memory_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>semver.h</label>
        <link refid="semver_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>registrable.h</label>
        <link refid="registrable_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>plugin_loader.h</label>
        <link refid="plugin__loader_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>qml.h</label>
        <link refid="qml_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>box.h</label>
        <link refid="box_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>functional.h</label>
        <link refid="functional_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>result.h</label>
        <link refid="result_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>plugin.h</label>
        <link refid="plugin_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>numbers.h</label>
        <link refid="numbers_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>global.h</label>
        <link refid="global_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>config.h</label>
        <link refid="config_8h_source"/>
      </node>
      <node id="32">
        <label>observer_ptr.h</label>
        <link refid="observer__ptr_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>savefile.h</label>
        <link refid="savefile_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>vector2d.h</label>
        <link refid="vector2d_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>velocity.h</label>
        <link refid="velocity_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>prelude.h</label>
        <link refid="prelude_8h_source"/>
      </node>
      <node id="6">
        <label>rolly.h</label>
        <link refid="rolly_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classrolly_1_1optional" prot="public">rolly::optional</innerclass>
    <innerclass refid="structrolly_1_1nullopt__t" prot="public">rolly::nullopt_t</innerclass>
    <innerclass refid="structrolly_1_1nullopt__t_1_1do__not__use" prot="public">rolly::nullopt_t::do_not_use</innerclass>
    <innerclass refid="classrolly_1_1bad__optional__access" prot="public">rolly::bad_optional_access</innerclass>
    <innerclass refid="classrolly_1_1optional" prot="public">rolly::optional</innerclass>
    <innerclass refid="classrolly_1_1optional_3_01T_01_6_01_4" prot="public">rolly::optional&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structstd_1_1hash_3_01rolly_1_1optional_3_01T_01_4_01_4" prot="public">std::hash&lt; rolly::optional&lt; T &gt; &gt;</innerclass>
    <innernamespace refid="namespacerolly">rolly</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="optional_8h_1aaa63d17874c7d1b6b715183d21c2be35" prot="public" static="no">
        <name>TL_OPTIONAL_IS_TRIVIALLY_COPY_CONSTRUCTIBLE</name>
        <param><defname>T</defname></param>
        <initializer><ref refid="cpp/types/is_copy_constructible" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_trivially_copy_constructible</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="65" column="12" bodyfile="rolly/types/optional.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="optional_8h_1a7f33879e981f40bb99f40d8d41701aab" prot="public" static="no">
        <name>TL_OPTIONAL_IS_TRIVIALLY_COPY_ASSIGNABLE</name>
        <param><defname>T</defname></param>
        <initializer><ref refid="cpp/types/is_copy_assignable" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_trivially_copy_assignable</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="67" column="11" bodyfile="rolly/types/optional.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="optional_8h_1a09d77a005b8205210f42a7889f854520" prot="public" static="no">
        <name>TL_OPTIONAL_IS_TRIVIALLY_DESTRUCTIBLE</name>
        <param><defname>T</defname></param>
        <initializer><ref refid="cpp/types/is_destructible" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_trivially_destructible</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="69" column="11" bodyfile="rolly/types/optional.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="optional_8h_1a871c57934f04050d51dc9f568870b63f" prot="public" static="no">
        <name>TL_OPTIONAL_11_CONSTEXPR</name>
        <initializer>constexpr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="80" column="12" bodyfile="rolly/types/optional.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacerolly_1a3052f5fbb6fc7bc98ecb11360c416a8f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr nullopt_t</type>
        <definition>constexpr nullopt_t nullopt</definition>
        <argsstring></argsstring>
        <name>nullopt</name>
        <initializer>{nullopt_t::do_not_use {}, nullopt_t::do_not_use {}}</initializer>
        <briefdescription>
<para>Represents an empty optional. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="665" column="30" bodyfile="rolly/types/optional.h" bodystart="665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a9365b793fe547271e48fa719a7f4854d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto none</definition>
        <argsstring></argsstring>
        <name>none</name>
        <initializer>= <ref refid="namespacerolly_1a3052f5fbb6fc7bc98ecb11360c416a8f" kindref="member">rolly::nullopt</ref></initializer>
        <briefdescription>
<para>Wrap an empty value in an optional. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a helper for creating an optional from a value. It is mostly useful when working with generic code that needs to work with both expected and optional types.</para>
<para><simplesect kind="see"><para><ref refid="namespacerolly_1_1types_1a80f2e5353f29a764733f510a9a2481c9" kindref="member">ok</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1a4d27def5f33f561207ecbc421b842d55" kindref="member">some</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="2118" column="27" bodyfile="rolly/types/optional.h" bodystart="2118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacerolly_1ae42bed75bde5f4d4e4c715b00c5cdec5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compares two optional objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1346" column="25" bodyfile="rolly/types/optional.h" bodystart="1346" bodyend="1348"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aaeabd0a43849c96e6a189456e64a9e80" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1351" column="25" bodyfile="rolly/types/optional.h" bodystart="1351" bodyend="1353"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aa200248ad0ba62c49766a7f23f0ab244" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1356" column="20" bodyfile="rolly/types/optional.h" bodystart="1356" bodyend="1358"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a198e1526e34437f608e39bf6b3b77f28" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1361" column="25" bodyfile="rolly/types/optional.h" bodystart="1361" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aeb7fb289dc87f67607f0f9cd76de2fba" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1366" column="20" bodyfile="rolly/types/optional.h" bodystart="1366" bodyend="1368"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aa469315a3b3d370d5b2e586cb681b11d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1371" column="25" bodyfile="rolly/types/optional.h" bodystart="1371" bodyend="1373"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a43e660efbbd21846c0099fd98d7e7974" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>nullopt_t</type>
        </param>
        <briefdescription>
<para>Compares an optional to a <computeroutput>nullopt</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1377" column="25" bodyfile="rolly/types/optional.h" bodystart="1377" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a65f34be32d65e60a6ae72cb06481d041" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>nullopt_t</type>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1382" column="25" bodyfile="rolly/types/optional.h" bodystart="1382" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a2835f5e825e9642a4ab30e9b80da8832" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>nullopt_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1387" column="25" bodyfile="rolly/types/optional.h" bodystart="1387" bodyend="1389"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a137e7622b0b5826d767aa21b10bf8a4c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>nullopt_t</type>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1392" column="25" bodyfile="rolly/types/optional.h" bodystart="1392" bodyend="1394"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ac4d264d4fa3093b68a6fbc5d8b864beb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;, nullopt_t) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
        </param>
        <param>
          <type>nullopt_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1397" column="20" bodyfile="rolly/types/optional.h" bodystart="1397" bodyend="1399"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1acb7364ea0a1e0438ae84214ced329b4d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>nullopt_t</type>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1402" column="20" bodyfile="rolly/types/optional.h" bodystart="1402" bodyend="1404"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a17605135b9c4fbe2d0d006d5cb0cb0df" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>nullopt_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1407" column="20" bodyfile="rolly/types/optional.h" bodystart="1407" bodyend="1409"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aeb5122e9a208a1d01d21b87705dd8219" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>nullopt_t</type>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1412" column="20" bodyfile="rolly/types/optional.h" bodystart="1412" bodyend="1414"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ad9721a2da6cd3210b3d12cfba5a02b9d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>nullopt_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1417" column="25" bodyfile="rolly/types/optional.h" bodystart="1417" bodyend="1419"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aee4d261d62ca7e4c397b061c3345ffc0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>nullopt_t</type>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1422" column="25" bodyfile="rolly/types/optional.h" bodystart="1422" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ab95b1dc683d04c96118a1b6e13862827" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;, nullopt_t) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
        </param>
        <param>
          <type>nullopt_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1427" column="25" bodyfile="rolly/types/optional.h" bodystart="1427" bodyend="1429"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ac32dbce08b465c015066197343543a66" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>nullopt_t</type>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1432" column="25" bodyfile="rolly/types/optional.h" bodystart="1432" bodyend="1434"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1acb3873114fe93ce619a39084b59b2a2f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compares the optional with a value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1438" column="25" bodyfile="rolly/types/optional.h" bodystart="1438" bodyend="1440"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1adce9e5a2185ca737f529b12e7b115255" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1443" column="25" bodyfile="rolly/types/optional.h" bodystart="1443" bodyend="1445"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a443a871c46e6e084799f9c8973d9e51f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1448" column="25" bodyfile="rolly/types/optional.h" bodystart="1448" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a584bd404eee977379de223dc0647e348" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1453" column="25" bodyfile="rolly/types/optional.h" bodystart="1453" bodyend="1455"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1acc1d8d195c6b5a3493d65e34a9b82e2d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1458" column="20" bodyfile="rolly/types/optional.h" bodystart="1458" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a640100316b3156a07377038175c5e9e2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1463" column="20" bodyfile="rolly/types/optional.h" bodystart="1463" bodyend="1465"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a2829a36208a02c6a07fbb3bf7ea98cde" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1468" column="20" bodyfile="rolly/types/optional.h" bodystart="1468" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ab70c8e8c4439a8be3e5be7b11a880ddc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1473" column="20" bodyfile="rolly/types/optional.h" bodystart="1473" bodyend="1475"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a8a7913965e6fbab14332eb19133451f3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1478" column="25" bodyfile="rolly/types/optional.h" bodystart="1478" bodyend="1480"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a436961c16e6e95f486b0ed58d9a221bf" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1483" column="25" bodyfile="rolly/types/optional.h" bodystart="1483" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a1b3470d1556c16994c691b0a7af7ee48" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1488" column="25" bodyfile="rolly/types/optional.h" bodystart="1488" bodyend="1490"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1acbd31892e6da85b55b99c07bf005b112" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1493" column="25" bodyfile="rolly/types/optional.h" bodystart="1493" bodyend="1495"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ad0cdea02ac170e2603b7a4491036b298" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="cpp/types/is_move_constructible" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_move_constructible</ref>&lt; T &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_swappable&lt; T &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rolly::swap</definition>
        <argsstring>(optional&lt; T &gt; &amp;lhs, optional&lt; T &gt; &amp;rhs) noexcept(noexcept(lhs.swap(rhs)))</argsstring>
        <name>swap</name>
        <param>
          <type>optional&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>optional&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1501" column="8" bodyfile="rolly/types/optional.h" bodystart="1501" bodyend="1503"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a95d13b9563bf751c816a8ccd194410b8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
            <defval>detail::i_am_secret</defval>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class Ret</type>
            <defval>detail::conditional_t&lt;<ref refid="cpp/types/is_same" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_same</ref>&lt;T, detail::i_am_secret&gt;::value, detail::decay_t&lt;U&gt;, T&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr optional&lt; Ret &gt;</type>
        <definition>constexpr optional&lt;Ret&gt; rolly::make_optional</definition>
        <argsstring>(U &amp;&amp;v)</argsstring>
        <name>make_optional</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1516" column="29" bodyfile="rolly/types/optional.h" bodystart="1516" bodyend="1518"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ab0f9d87f10324655edd29d2312df8f90" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr optional&lt; T &gt;</type>
        <definition>constexpr optional&lt;T&gt; rolly::make_optional</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>make_optional</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1521" column="29" bodyfile="rolly/types/optional.h" bodystart="1521" bodyend="1523"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a2fc860684dfb51f96cef87b70a678076" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr optional&lt; T &gt;</type>
        <definition>constexpr optional&lt;T&gt; rolly::make_optional</definition>
        <argsstring>(std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</argsstring>
        <name>make_optional</name>
        <param>
          <type><ref refid="cpp/utility/initializer_list" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::initializer_list</ref>&lt; U &gt;</type>
          <declname>il</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1526" column="29" bodyfile="rolly/types/optional.h" bodystart="1526" bodyend="1528"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a4d27def5f33f561207ecbc421b842d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>optional&lt; std::decay_t&lt; T &gt; &gt;</type>
        <definition>optional&lt;std::decay_t&lt;T&gt; &gt; rolly::some</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>some</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Wrap a value in an optional. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a helper for creating an optional from a value. It is mostly useful when working with generic code that needs to work with both expected and optional types.</para>
<para><simplesect kind="see"><para><ref refid="namespacerolly_1_1types_1a80f2e5353f29a764733f510a9a2481c9" kindref="member">ok</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1a9365b793fe547271e48fa719a7f4854d" kindref="member">none</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="2103" column="15" bodyfile="rolly/types/optional.h" bodystart="2103" bodyend="2105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="rolly/types/optional.h"/>
  </compounddef>
</doxygen>
