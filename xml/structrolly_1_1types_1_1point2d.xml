<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structrolly_1_1types_1_1point2d" kind="class" language="C++" prot="public">
    <compoundname>rolly::types::point2d</compoundname>
    <includes refid="point2d_8h" local="no">rolly/types/point2d.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="namespacerolly_1_1concepts_1aea9bb2c4075cdbbe6ae4d3b6eef46cda" kindref="member">concepts::num</ref></type>
        <declname>T</declname>
        <defname>T</defname>
        <defval><ref refid="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" kindref="member">f32</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" prot="public" static="no">
        <type>T</type>
        <definition>using number_type =  T</definition>
        <argsstring></argsstring>
        <name>number_type</name>
        <briefdescription>
<para>Underlying number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="40" column="7" bodyfile="rolly/types/point2d.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structrolly_1_1types_1_1point2d_1aca415dad69e458881b26ebb293dadd03" prot="public" static="no">
        <type><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>&lt; <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt;</type>
        <definition>using size2d_type =  size2d&lt;number_type&gt;</definition>
        <argsstring></argsstring>
        <name>size2d_type</name>
        <briefdescription>
<para>Associated <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="45" column="7" bodyfile="rolly/types/point2d.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structrolly_1_1types_1_1point2d_1aefb331b2e63a2318c2322e2f6dd68e02" prot="public" static="no">
        <type><ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>&lt; <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt;</type>
        <definition>using vector2d_type =  vector2d&lt;number_type&gt;</definition>
        <argsstring></argsstring>
        <name>vector2d_type</name>
        <briefdescription>
<para>Associated vector type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="50" column="7" bodyfile="rolly/types/point2d.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structrolly_1_1types_1_1point2d_1ae40d4cb269d0be9c0d20a9efe0462757" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T x_</definition>
        <argsstring></argsstring>
        <name>x_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="698" column="9" bodyfile="rolly/types/point2d.h" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structrolly_1_1types_1_1point2d_1a644d1b6657ad3f073d95487bdd5d08a9" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T y_</definition>
        <argsstring></argsstring>
        <name>y_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="699" column="9" bodyfile="rolly/types/point2d.h" bodystart="699" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a8309f6a91b9a3bf1e60930642489704f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr point2d</definition>
        <argsstring>()</argsstring>
        <name>point2d</name>
        <briefdescription>
<para>Constructs new point with zero coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="55" column="17" bodyfile="rolly/types/point2d.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1adaa9ee962add91d3195ab65fa81b3036" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr point2d</definition>
        <argsstring>(number_type x, number_type y)</argsstring>
        <name>point2d</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Constructs new point from given scalar values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="64" column="17" bodyfile="rolly/types/point2d.h" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a5e33226da626860ba9780746bbfea353" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr point2d</definition>
        <argsstring>(number_type value)</argsstring>
        <name>point2d</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs new point, setting all components to the same value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set all components to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="72" column="26" bodyfile="rolly/types/point2d.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a8acad6ce2b894c6fbcb928bc2681a2e7" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr point2d</definition>
        <argsstring>(size2d_type const &amp;other)</argsstring>
        <name>point2d</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d_1aca415dad69e458881b26ebb293dadd03" kindref="member">size2d_type</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new point from <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="80" column="26" bodyfile="rolly/types/point2d.h" bodystart="80" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a2a57ca14183941daa2d14efdc93cf98a" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr point2d</definition>
        <argsstring>(vector2d&lt; number_type &gt; const &amp;v)</argsstring>
        <name>point2d</name>
        <param>
          <type><ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>&lt; <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructs new point from a <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="87" column="26" bodyfile="rolly/types/point2d.h" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aa9dd348d29b48f5544b5b1fb6f551f63" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::invocable&lt; <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt;</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto map</definition>
        <argsstring>(F &amp;&amp;fn) const</argsstring>
        <name>map</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Applies the function <bold>fn</bold> to each component of the point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of function to apply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="101" column="22" bodyfile="rolly/types/point2d.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1afe7ce514915669e40cfa8357d337dd02" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::invocable&lt; <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref>, <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt;</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto zip</definition>
        <argsstring>(point2d const &amp;other, F &amp;&amp;fn) const</argsstring>
        <name>zip</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Applies the function <bold>fn</bold> to each component of this point and the other point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of function to apply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other point to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="118" column="22" bodyfile="rolly/types/point2d.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ae2f0dff27f264a72bd885ec6ae87fec7" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d_1aca415dad69e458881b26ebb293dadd03" kindref="member">size2d_type</ref></type>
        <definition>constexpr size2d_type to_size2d</definition>
        <argsstring>() const</argsstring>
        <name>to_size2d</name>
        <briefdescription>
<para>Converts this <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> into <computeroutput><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The resulting <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="127" column="30" bodyfile="rolly/types/point2d.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ac2b0983e1aef983282f639f645773e14" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>&lt; <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt;</type>
        <definition>constexpr vector2d&lt;number_type&gt; to_vector2d</definition>
        <argsstring>() const</argsstring>
        <name>to_vector2d</name>
        <briefdescription>
<para>Converts this <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> into <computeroutput><ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The resulting <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="133" column="27" bodyfile="rolly/types/point2d.h" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ab3e5ec535cd4a8f62d5fcf8d6c0c78e4" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d to_f32</definition>
        <argsstring>() const</argsstring>
        <name>to_f32</name>
        <briefdescription>
<para>Casts into <computeroutput>f32</computeroutput> <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="140" column="19" bodyfile="rolly/types/point2d.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1af121ce08567dabbc578cb00d0a185018" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>&lt; <ref refid="namespacerolly_1_1types_1abc2f107791bd7c1d49ecf0f168c085a3" kindref="member">f64</ref> &gt;</type>
        <definition>constexpr point2d&lt;f64&gt; to_f64</definition>
        <argsstring>() const</argsstring>
        <name>to_f64</name>
        <briefdescription>
<para>Casts into <computeroutput>f64</computeroutput> <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="145" column="26" bodyfile="rolly/types/point2d.h" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aed48a77f21850e1cc3dfc2334771a230" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>&lt; <ref refid="namespacerolly_1_1types_1a65cf28726f89e62ccf2f1354bc2716df" kindref="member">u32</ref> &gt;</type>
        <definition>constexpr point2d&lt;u32&gt; to_u32</definition>
        <argsstring>() const</argsstring>
        <name>to_u32</name>
        <briefdescription>
<para>Casts into <computeroutput>u32</computeroutput> <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="152" column="26" bodyfile="rolly/types/point2d.h" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a7326c358d8e846eca7cbc0e5be8feab3" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>&lt; <ref refid="namespacerolly_1_1types_1a66e1d499241ccae9a18a20a1f4f0590d" kindref="member">u64</ref> &gt;</type>
        <definition>constexpr point2d&lt;u64&gt; to_u64</definition>
        <argsstring>() const</argsstring>
        <name>to_u64</name>
        <briefdescription>
<para>Casts into <computeroutput>u64</computeroutput> <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="157" column="26" bodyfile="rolly/types/point2d.h" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ac343688a6c53fd1f85a681ca3a5e34bd" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>&lt; <ref refid="namespacerolly_1_1types_1ac47ac2e28dd2cb38fbf05ce10f810407" kindref="member">usize</ref> &gt;</type>
        <definition>constexpr point2d&lt;usize&gt; to_usize</definition>
        <argsstring>() const</argsstring>
        <name>to_usize</name>
        <briefdescription>
<para>Casts into <computeroutput>usize</computeroutput> <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="162" column="26" bodyfile="rolly/types/point2d.h" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a03d83cad8c39fbd2d55bf94fd301b841" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>&lt; <ref refid="namespacerolly_1_1types_1aec4a1429cc91fb7ff41599b263c348cc" kindref="member">i32</ref> &gt;</type>
        <definition>constexpr point2d&lt;i32&gt; to_i32</definition>
        <argsstring>() const</argsstring>
        <name>to_i32</name>
        <briefdescription>
<para>Casts into <computeroutput>i32</computeroutput> <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="167" column="26" bodyfile="rolly/types/point2d.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a0beaddc77edbfcee9e24d7baefb4b5fd" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>&lt; <ref refid="namespacerolly_1_1types_1ae72e52134285dbd83ca4227ec77394a2" kindref="member">i64</ref> &gt;</type>
        <definition>constexpr point2d&lt;i64&gt; to_i64</definition>
        <argsstring>() const</argsstring>
        <name>to_i64</name>
        <briefdescription>
<para>Casts into <computeroutput>i64</computeroutput> <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="172" column="26" bodyfile="rolly/types/point2d.h" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ae9e6f63112c6efcf2d099ad5c880cb33" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>&lt; <ref refid="namespacerolly_1_1types_1a30f901b0e451a40d688c0fe8ec125c85" kindref="member">isize</ref> &gt;</type>
        <definition>constexpr point2d&lt;isize&gt; to_isize</definition>
        <argsstring>() const</argsstring>
        <name>to_isize</name>
        <briefdescription>
<para>Casts into <computeroutput>isize</computeroutput> <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="177" column="26" bodyfile="rolly/types/point2d.h" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a99ce985c9b7b330173ec9102618a734d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::any_of&lt; <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, <ref refid="structrolly_1_1types_1_1point2d_1aca415dad69e458881b26ebb293dadd03" kindref="member">size2d_type</ref> &gt;</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d div_euclid</definition>
        <argsstring>(Q const &amp;other) const</argsstring>
        <name>div_euclid</name>
        <param>
          <type>Q const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Calculates Euclidean division, the matching method for rem_euclid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the divisor. Can be <computeroutput><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></computeroutput> or <computeroutput><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The quotient. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1a7209b4640ac965aaa277f6d2d2fb017d" kindref="member">rolly::math::rem_euclid</ref>, <ref refid="namespacerolly_1_1math_1a241b7b3a3e1ba6ed1cfe08d1367b77ee" kindref="member">rolly::math::div_euclid</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1point2d_1ad7a5b8680b9debb85b5f5303b9308efc" kindref="member">rem_euclid</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="194" column="26" bodyfile="rolly/types/point2d.h" bodystart="194" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ad7a5b8680b9debb85b5f5303b9308efc" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::any_of&lt; <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, <ref refid="structrolly_1_1types_1_1point2d_1aca415dad69e458881b26ebb293dadd03" kindref="member">size2d_type</ref> &gt;</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d rem_euclid</definition>
        <argsstring>(Q const &amp;other) const</argsstring>
        <name>rem_euclid</name>
        <param>
          <type>Q const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Calculates the least nonnegative remainder of <computeroutput>self (mod other)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the divisor. Can be <computeroutput><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></computeroutput> or <computeroutput><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The divisor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The remainder. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1a7209b4640ac965aaa277f6d2d2fb017d" kindref="member">rolly::math::rem_euclid</ref>, <ref refid="namespacerolly_1_1math_1a241b7b3a3e1ba6ed1cfe08d1367b77ee" kindref="member">rolly::math::div_euclid</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1point2d_1a99ce985c9b7b330173ec9102618a734d" kindref="member">div_euclid</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="216" column="26" bodyfile="rolly/types/point2d.h" bodystart="216" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aa3d3553a31f701f4478b4a677e105229" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d operator+</definition>
        <argsstring>() const</argsstring>
        <name>operator+</name>
        <briefdescription>
<para>Returns the unchanged point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="231" column="26" bodyfile="rolly/types/point2d.h" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ac3f967cd57b25335a210d78ecf0d94c5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Returns the negated point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="236" column="26" bodyfile="rolly/types/point2d.h" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aa6539747cd15b9833372eef10125c797" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator==</definition>
        <argsstring>(point2d const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Checks if two points are equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="242" column="23" bodyfile="rolly/types/point2d.h" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a8aa02e2b747bfa29a5952d92c7200d92" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator!=</definition>
        <argsstring>(point2d const &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Checks if two points are not equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="250" column="23" bodyfile="rolly/types/point2d.h" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a564ee3611258da0d1490fccf698b7a49" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::any_of&lt; <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, <ref refid="structrolly_1_1types_1_1point2d_1aca415dad69e458881b26ebb293dadd03" kindref="member">size2d_type</ref>, <ref refid="structrolly_1_1types_1_1point2d_1aefb331b2e63a2318c2322e2f6dd68e02" kindref="member">vector2d_type</ref> &gt;</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d operator+</definition>
        <argsstring>(Q const &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type>Q const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Sums point and either <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> or <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the summand. Can be <computeroutput><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></computeroutput>, <computeroutput><ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref></computeroutput> or <computeroutput><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The summand. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sum. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="268" column="26" bodyfile="rolly/types/point2d.h" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aeb82eef9d0fa589582978bef726e7c22" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::any_of&lt; <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, <ref refid="structrolly_1_1types_1_1point2d_1aca415dad69e458881b26ebb293dadd03" kindref="member">size2d_type</ref>, <ref refid="structrolly_1_1types_1_1point2d_1aefb331b2e63a2318c2322e2f6dd68e02" kindref="member">vector2d_type</ref> &gt;</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d operator-</definition>
        <argsstring>(Q const &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>Q const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Subtracts point and either <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> or <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the subtrahend. Can be <computeroutput><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></computeroutput>, <computeroutput><ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref></computeroutput> or <computeroutput><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The subtrahend. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The difference. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="286" column="26" bodyfile="rolly/types/point2d.h" bodystart="286" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ad292b9946c18c60310d04ac803c8dbf2" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d operator*</definition>
        <argsstring>(number_type const &amp;other) const</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Multiplies point with scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The product. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="295" column="26" bodyfile="rolly/types/point2d.h" bodystart="295" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a155699052321b915cb254cbb50a79020" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d operator/</definition>
        <argsstring>(number_type const &amp;other) const</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Divides point with scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The quotient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="304" column="26" bodyfile="rolly/types/point2d.h" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a23d20565ed8828ea60602ae5f69d45b6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type x</definition>
        <argsstring>() const</argsstring>
        <name>x</name>
        <briefdescription>
<para>Returns the x-coordinate of the <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> as scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The x-coordinate of the <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="312" column="30" bodyfile="rolly/types/point2d.h" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ad8e273c4442bfd92a64727fd411385a6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type y</definition>
        <argsstring>() const</argsstring>
        <name>y</name>
        <briefdescription>
<para>Returns the y-coordinate of the <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> as scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The y-coordinate of the <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="318" column="30" bodyfile="rolly/types/point2d.h" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a9e764a6a4f38cbdb7711383af5fa8d18" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &amp;</type>
        <definition>constexpr number_type&amp; x_mut</definition>
        <argsstring>()</argsstring>
        <name>x_mut</name>
        <briefdescription>
<para>Returns mutable reference to the x-coordinate of the <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> as scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mutable reference to the x-coordinate of the <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="324" column="30" bodyfile="rolly/types/point2d.h" bodystart="324" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a7212185fd6ab59c60da53e8e15606a4e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &amp;</type>
        <definition>constexpr number_type&amp; y_mut</definition>
        <argsstring>()</argsstring>
        <name>y_mut</name>
        <briefdescription>
<para>Returns mutable reference to the y-coordinate of the <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> as scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mutable reference to the y-coordinate of the <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="330" column="30" bodyfile="rolly/types/point2d.h" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1abc96ec4d6a1dc687107250ee15371984" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d inverted</definition>
        <argsstring>() const</argsstring>
        <name>inverted</name>
        <briefdescription>
<para>Returns inverted <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Inverted <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="336" column="26" bodyfile="rolly/types/point2d.h" bodystart="336" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1acdee2fae21eb84437089f84df0234b00" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::any_of&lt; <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, <ref refid="structrolly_1_1types_1_1point2d_1aca415dad69e458881b26ebb293dadd03" kindref="member">size2d_type</ref>, <ref refid="structrolly_1_1types_1_1point2d_1aefb331b2e63a2318c2322e2f6dd68e02" kindref="member">vector2d_type</ref> &gt;</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> &amp;</type>
        <definition>constexpr point2d&amp; operator+=</definition>
        <argsstring>(Q const &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>Q const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Adds point and either <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> or <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the summand. Can be <computeroutput><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></computeroutput>, <computeroutput><ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref></computeroutput> or <computeroutput><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The summand. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sum. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="352" column="25" bodyfile="rolly/types/point2d.h" bodystart="352" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a6418e811b603149d344cc6c92845d676" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::any_of&lt; <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, <ref refid="structrolly_1_1types_1_1point2d_1aca415dad69e458881b26ebb293dadd03" kindref="member">size2d_type</ref>, <ref refid="structrolly_1_1types_1_1point2d_1aefb331b2e63a2318c2322e2f6dd68e02" kindref="member">vector2d_type</ref> &gt;</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> &amp;</type>
        <definition>constexpr point2d&amp; operator-=</definition>
        <argsstring>(Q const &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>Q const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Subtracts point and either <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref> or <ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the subtrahend. Can be <computeroutput><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></computeroutput>, <computeroutput><ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">vector2d</ref></computeroutput> or <computeroutput><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The subtrahend. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The difference. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="372" column="25" bodyfile="rolly/types/point2d.h" bodystart="372" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ab154c51eff222eda2c7f3c4722da279a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> &amp;</type>
        <definition>constexpr point2d&amp; operator*=</definition>
        <argsstring>(number_type const &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Multiplies point with scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The product. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="383" column="25" bodyfile="rolly/types/point2d.h" bodystart="383" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a03508a5b76a4f7965d217993c147aff9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> &amp;</type>
        <definition>constexpr point2d&amp; operator/=</definition>
        <argsstring>(number_type const &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Divides point with scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The quotient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="394" column="25" bodyfile="rolly/types/point2d.h" bodystart="394" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aac993ecccd3d88aafefb6b8e3caa1dee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string to_string</definition>
        <argsstring>() const</argsstring>
        <name>to_string</name>
        <briefdescription>
<para>Returns string representation of the <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Size is represented as it&apos;s numeric values. If the underlying number type is floating <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, it is rounded to two decimal places. <simplesect kind="note"><para>Due to limitations of the language, units are not displayed. </para>
</simplesect>
<simplesect kind="return"><para>String representation of the object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="415" column="20" bodyfile="rolly/types/point2d.h" bodystart="415" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a25129afd086e1ed1078677311854d7ab" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="cpp/container/array" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::array</ref>&lt; <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref>, 2 &gt;</type>
        <definition>constexpr std::array&lt;number_type, 2&gt; to_array</definition>
        <argsstring>() const</argsstring>
        <name>to_array</name>
        <briefdescription>
<para>Casts into an array of two values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="425" column="29" bodyfile="rolly/types/point2d.h" bodystart="425" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a773014d9be700f99ca76e9990945e509" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="cpp/utility/tuple" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::tuple</ref>&lt; <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref>, <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt;</type>
        <definition>constexpr std::tuple&lt;number_type, number_type&gt; to_tuple</definition>
        <argsstring>() const</argsstring>
        <name>to_tuple</name>
        <briefdescription>
<para>Casts into a tuple of two values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="432" column="29" bodyfile="rolly/types/point2d.h" bodystart="432" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a67ac57bed3924789d4157e4a9487749c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="cpp/utility/pair" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::pair</ref>&lt; <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref>, <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt;</type>
        <definition>constexpr std::pair&lt;number_type, number_type&gt; to_pair</definition>
        <argsstring>() const</argsstring>
        <name>to_pair</name>
        <briefdescription>
<para>Casts into a pair of two values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="439" column="28" bodyfile="rolly/types/point2d.h" bodystart="439" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a54e757ef2d9c198f0964f184267373a3" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d round</definition>
        <argsstring>() const</argsstring>
        <name>round</name>
        <briefdescription>
<para>Rounds each component to the nearest integer value. </para>
        </briefdescription>
        <detaileddescription>
<para>This behavior is preserved for negative values (unlike the basic cast). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="447" column="26" bodyfile="rolly/types/point2d.h" bodystart="447" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aca0b014878e192e6aa9d9aea85395992" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d ceil</definition>
        <argsstring>() const</argsstring>
        <name>ceil</name>
        <briefdescription>
<para>Rounds each component to the smallest integer equal or greater than the original value. </para>
        </briefdescription>
        <detaileddescription>
<para>This behavior is preserved for negative values (unlike the basic cast). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="456" column="26" bodyfile="rolly/types/point2d.h" bodystart="456" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ad77fe8fabcb32f2d8ae019f13dcf1608" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d floor</definition>
        <argsstring>() const</argsstring>
        <name>floor</name>
        <briefdescription>
<para>Rounds each component to the largest integer equal or less than the original value. </para>
        </briefdescription>
        <detaileddescription>
<para>This behavior is preserved for negative values (unlike the basic cast). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="464" column="26" bodyfile="rolly/types/point2d.h" bodystart="464" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a3adcd0e5c871b95c7541f0eae758d622" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d lerp</definition>
        <argsstring>(point2d const &amp;other, f32 t) const</argsstring>
        <name>lerp</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" kindref="member">f32</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Linearly interpolate between this <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> and another <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">rolly::types::point2d</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>from<sp/>=<sp/><ref refid="structrolly_1_1types_1_1point2d_1a8309f6a91b9a3bf1e60930642489704f" kindref="member">point2d</ref>(0.0F,<sp/>10.0F);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>to<sp/>=<sp/><ref refid="structrolly_1_1types_1_1point2d_1a8309f6a91b9a3bf1e60930642489704f" kindref="member">point2d</ref>(8.0F,<sp/>-4.0F);</highlight></codeline>
<codeline><highlight class="normal">fmt::println(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>from.lerp(to,<sp/>-1.0F));</highlight></codeline>
<codeline><highlight class="normal">fmt::println(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>from.lerp(to,<sp/>0.0F));</highlight></codeline>
<codeline><highlight class="normal">fmt::println(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>from.lerp(to,<sp/>0.5F));</highlight></codeline>
<codeline><highlight class="normal">fmt::println(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>from.lerp(to,<sp/>1.0F));</highlight></codeline>
<codeline><highlight class="normal">fmt::println(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>from.lerp(to,<sp/>2.0F));</highlight></codeline>
</programlisting></para>
<para>Output: <programlisting filename=".shell-session"><codeline><highlight class="normal">[-8.0,<sp/>24.0]</highlight></codeline>
<codeline><highlight class="normal">[0.0,<sp/>10.0]</highlight></codeline>
<codeline><highlight class="normal">[4.0,<sp/>3.0]</highlight></codeline>
<codeline><highlight class="normal">[8.0,<sp/>-4.0]</highlight></codeline>
<codeline><highlight class="normal">[16.0,<sp/>-18.0]</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolation factor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The interpolated <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="494" column="26" bodyfile="rolly/types/point2d.h" bodystart="494" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aa751b3d34455c80ef9cec7794d7bdf50" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d max</definition>
        <argsstring>(point2d const &amp;other) const</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the largest x and y values of this and another <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> with the largest x and y values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="503" column="26" bodyfile="rolly/types/point2d.h" bodystart="503" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ae0b3c78c0f61578b2bb16038be75ffc8" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d min</definition>
        <argsstring>(point2d const &amp;other) const</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the smallest x and y values of this and another <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> with the smallest x and y values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="512" column="26" bodyfile="rolly/types/point2d.h" bodystart="512" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a216a390e53810b375729e6a5f7956b05" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d clamp</definition>
        <argsstring>(point2d const &amp;start, point2d const &amp;end) const</argsstring>
        <name>clamp</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> const &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> const &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> each component of which clamped by corresponding components of start and end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The start <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The end <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The clamped <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="523" column="26" bodyfile="rolly/types/point2d.h" bodystart="523" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ace4abc8698a1ec840274c6217bb74a0c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>constexpr point2d abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <briefdescription>
<para>Returns the absolute value of each component. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The absolute value of each component. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="531" column="26" bodyfile="rolly/types/point2d.h" bodystart="531" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1af51b98c64e4d24aa50dbf3f428eecc86" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type dot</definition>
        <argsstring>(point2d const &amp;other) const</argsstring>
        <name>dot</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns dot product of this and another <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product of this and another <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="540" column="30" bodyfile="rolly/types/point2d.h" bodystart="540" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aa0239cd49090fcc6387f0b454063a9fa" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
        <definition>constexpr number_type cross</definition>
        <argsstring>(point2d const &amp;other) const</argsstring>
        <name>cross</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the norm of the cross product of this and another <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Cross product is defined as <computeroutput>[x1, y1] x [x2, y2] = x1 * y2 - y1 * x2</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The norm of the cross product of this and another <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="550" column="30" bodyfile="rolly/types/point2d.h" bodystart="550" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a09eb0be0be1b9fb26096c1fccbe3d9ca" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool is_finite</definition>
        <argsstring>() const</argsstring>
        <name>is_finite</name>
        <briefdescription>
<para>Returns true if all members are finite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="557" column="23" bodyfile="rolly/types/point2d.h" bodystart="557" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a231e8ba696d19d5efb24deba2b63c471" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool is_positive</definition>
        <argsstring>() const</argsstring>
        <name>is_positive</name>
        <briefdescription>
<para>Returns true if all members are positive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="564" column="23" bodyfile="rolly/types/point2d.h" bodystart="564" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aaa88e4ccbb9262e7210d7e3bab936670" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="cpp/types/size_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::size_t</ref></type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>requires</definition>
        <argsstring>(N2==2) static const expr point2d from_array(std</argsstring>
        <name>requires</name>
        <param>
          <type>N2</type>
          <defval>=2</defval>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> from <computeroutput><ref refid="cpp/container/array" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::array</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N2</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput><ref refid="cpp/container/array" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::array</ref></computeroutput>. Must be equal to <computeroutput>2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput><ref refid="cpp/container/array" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::array</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="600" column="9" bodyfile="rolly/types/point2d.h" bodystart="600" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ad0ed9dded3dc4405713f0b9270930a92" prot="public" static="no" constexpr="yes" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if underlying values is both not <computeroutput>0</computeroutput> and not <computeroutput>NaN</computeroutput> or <computeroutput>Infinity</computeroutput> in case of floating point. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Also returns <computeroutput>false</computeroutput> if underlying values is <computeroutput>NaN</computeroutput> or <computeroutput>Infinity</computeroutput> in case of floating point. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="624" column="27" bodyfile="rolly/types/point2d.h" bodystart="624" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ac252a44c73ef696bf047b7b7b0ea13bc" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator!</definition>
        <argsstring>() const</argsstring>
        <name>operator!</name>
        <briefdescription>
<para>Returns <computeroutput>false</computeroutput> if underlying values is both not <computeroutput>0</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="637" column="23" bodyfile="rolly/types/point2d.h" bodystart="637" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a5bb30b1860728abb55719daeb06e8cc1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr QPoint</type>
        <definition>constexpr QPoint to_qpoint</definition>
        <argsstring>() const</argsstring>
        <name>to_qpoint</name>
        <briefdescription>
<para>Casts this <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> into <computeroutput>QPoint</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This function is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="645" column="25" bodyfile="rolly/types/point2d.h" bodystart="645" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aabfa34e9f3053f5c3a5cc19cbc9b6632" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr QPointF</type>
        <definition>constexpr QPointF to_qpointf</definition>
        <argsstring>() const</argsstring>
        <name>to_qpointf</name>
        <briefdescription>
<para>Casts this <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> into <computeroutput>QPointF</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This function is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="654" column="26" bodyfile="rolly/types/point2d.h" bodystart="654" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a836d8bb1db241638c74685bb4debd497" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr point2d</definition>
        <argsstring>(QPoint const &amp;other)</argsstring>
        <name>point2d</name>
        <param>
          <type>QPoint const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new point from <computeroutput>QPoint</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput>QPoint</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This constructor is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="662" column="26" bodyfile="rolly/types/point2d.h" bodystart="662" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a6cb1ba067e15b19a3b2676a6ea96431c" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr point2d</definition>
        <argsstring>(QPointF const &amp;other)</argsstring>
        <name>point2d</name>
        <param>
          <type>QPointF const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new point from <computeroutput>QPointF</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput>QPointF</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This constructor is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="671" column="26" bodyfile="rolly/types/point2d.h" bodystart="671" bodyend="672"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a37ca83d84630aa765f2e8a2976f4d529" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>static constexpr point2d origin</definition>
        <argsstring>()</argsstring>
        <name>origin</name>
        <briefdescription>
<para>Constructs new point with zero coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="226" column="33" bodyfile="rolly/types/point2d.h" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a744fecea6c6883996d7045f139bc7386" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>static constexpr point2d from_size2d</definition>
        <argsstring>(size2d_type const &amp;other)</argsstring>
        <name>from_size2d</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d_1aca415dad69e458881b26ebb293dadd03" kindref="member">size2d_type</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new point from <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="structrolly_1_1types_1_1size2d" kindref="compound">size2d</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="404" column="33" bodyfile="rolly/types/point2d.h" bodystart="404" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1aeef6a0c0becfedb1b3c8c7dee36ccf0a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>static constexpr point2d zero</definition>
        <argsstring>()</argsstring>
        <name>zero</name>
        <briefdescription>
<para>The same as <emphasis>origin</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="571" column="33" bodyfile="rolly/types/point2d.h" bodystart="571" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a147ab4c455314edbc2049ba7c0b91266" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>static constexpr point2d splat</definition>
        <argsstring>(number_type value)</argsstring>
        <name>splat</name>
        <param>
          <type><ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>, setting all components to the same value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set all components to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="577" column="33" bodyfile="rolly/types/point2d.h" bodystart="577" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1af1ee2b647132ba80f6e2bde339e987b6" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>static constexpr point2d from_tuple</definition>
        <argsstring>(std::tuple&lt; Args... &gt; const &amp;other)</argsstring>
        <name>from_tuple</name>
        <param>
          <type><ref refid="cpp/utility/tuple" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::tuple</ref>&lt; Args... &gt; const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> from <computeroutput><ref refid="cpp/utility/tuple" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::tuple</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput><ref refid="cpp/utility/tuple" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::tuple</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="589" column="33" bodyfile="rolly/types/point2d.h" bodystart="589" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1ac4b37956dff371a083c70dc28aa0e371" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>static constexpr point2d from_pair</definition>
        <argsstring>(std::pair&lt; number_type, number_type &gt; const &amp;other)</argsstring>
        <name>from_pair</name>
        <param>
          <type><ref refid="cpp/utility/pair" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::pair</ref>&lt; <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref>, <ref refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" kindref="member">number_type</ref> &gt; const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> from <computeroutput><ref refid="cpp/utility/pair" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::pair</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput><ref refid="cpp/utility/pair" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::pair</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="612" column="33" bodyfile="rolly/types/point2d.h" bodystart="612" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="structrolly_1_1types_1_1point2d_1a39531c051906a16adf33fde525307ece" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref></type>
        <definition>static constexpr point2d from_qpointf</definition>
        <argsstring>(QPointF const &amp;other)</argsstring>
        <name>from_qpointf</name>
        <param>
          <type>QPointF const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs new point from <computeroutput>QPoint</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput>QPoint</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. /** [[nodiscard]] static constexpr <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref> from_qpoint(QPoint const&amp; other) { return <ref refid="structrolly_1_1types_1_1point2d" kindref="compound">point2d</ref>(other.x(), other.y()); }</para>
</simplesect>
/**</para>
<para>Constructs new point from <computeroutput>QPointF</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <computeroutput>QPointF</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is only available if <bold>Qt Gui</bold> is linked against the TU this header is compiled for. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/point2d.h" line="692" column="33" bodyfile="rolly/types/point2d.h" bodystart="692" bodyend="694"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A two-dimensional point tagged with a unit. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type. Must satisfy concept <computeroutput>floppy::concepts::num</computeroutput>. Default is <computeroutput>f32</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structrolly_1_1types_1_1size2d" kindref="compound">rolly::types::size2d</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classrolly_1_1types_1_1vector2d" kindref="compound">rolly::types::vector2d</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="rolly/types/point2d.h" line="36" column="18" bodyfile="rolly/types/point2d.h" bodystart="36" bodyend="700"/>
    <listofallmembers>
      <member refid="structrolly_1_1types_1_1point2d_1ace4abc8698a1ec840274c6217bb74a0c" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>abs</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aca0b014878e192e6aa9d9aea85395992" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>ceil</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a216a390e53810b375729e6a5f7956b05" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>clamp</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aa0239cd49090fcc6387f0b454063a9fa" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>cross</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a99ce985c9b7b330173ec9102618a734d" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>div_euclid</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1af51b98c64e4d24aa50dbf3f428eecc86" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>dot</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ad77fe8fabcb32f2d8ae019f13dcf1608" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>floor</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ac4b37956dff371a083c70dc28aa0e371" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>from_pair</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a39531c051906a16adf33fde525307ece" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>from_qpointf</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a744fecea6c6883996d7045f139bc7386" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>from_size2d</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1af1ee2b647132ba80f6e2bde339e987b6" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>from_tuple</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1abc96ec4d6a1dc687107250ee15371984" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>inverted</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a09eb0be0be1b9fb26096c1fccbe3d9ca" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>is_finite</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a231e8ba696d19d5efb24deba2b63c471" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>is_positive</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a3adcd0e5c871b95c7541f0eae758d622" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>lerp</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aa9dd348d29b48f5544b5b1fb6f551f63" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>map</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aa751b3d34455c80ef9cec7794d7bdf50" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>max</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ae0b3c78c0f61578b2bb16038be75ffc8" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>min</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a107b40f8f53dbbb17f9224074426b8e6" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>number_type</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ad0ed9dded3dc4405713f0b9270930a92" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator bool</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ac252a44c73ef696bf047b7b7b0ea13bc" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator!</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a8aa02e2b747bfa29a5952d92c7200d92" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator!=</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ad292b9946c18c60310d04ac803c8dbf2" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator*</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ab154c51eff222eda2c7f3c4722da279a" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator*=</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aa3d3553a31f701f4478b4a677e105229" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator+</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a564ee3611258da0d1490fccf698b7a49" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator+</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1acdee2fae21eb84437089f84df0234b00" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator+=</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ac3f967cd57b25335a210d78ecf0d94c5" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator-</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aeb82eef9d0fa589582978bef726e7c22" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator-</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a6418e811b603149d344cc6c92845d676" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator-=</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a155699052321b915cb254cbb50a79020" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator/</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a03508a5b76a4f7965d217993c147aff9" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator/=</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aa6539747cd15b9833372eef10125c797" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>operator==</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a37ca83d84630aa765f2e8a2976f4d529" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>origin</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a8309f6a91b9a3bf1e60930642489704f" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>point2d</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1adaa9ee962add91d3195ab65fa81b3036" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>point2d</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a5e33226da626860ba9780746bbfea353" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>point2d</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a8acad6ce2b894c6fbcb928bc2681a2e7" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>point2d</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a2a57ca14183941daa2d14efdc93cf98a" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>point2d</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a836d8bb1db241638c74685bb4debd497" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>point2d</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a6cb1ba067e15b19a3b2676a6ea96431c" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>point2d</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ad7a5b8680b9debb85b5f5303b9308efc" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>rem_euclid</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aaa88e4ccbb9262e7210d7e3bab936670" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>requires</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a54e757ef2d9c198f0964f184267373a3" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>round</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aca415dad69e458881b26ebb293dadd03" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>size2d_type</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a147ab4c455314edbc2049ba7c0b91266" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>splat</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a25129afd086e1ed1078677311854d7ab" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_array</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ab3e5ec535cd4a8f62d5fcf8d6c0c78e4" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_f32</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1af121ce08567dabbc578cb00d0a185018" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_f64</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a03d83cad8c39fbd2d55bf94fd301b841" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_i32</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a0beaddc77edbfcee9e24d7baefb4b5fd" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_i64</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ae9e6f63112c6efcf2d099ad5c880cb33" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_isize</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a67ac57bed3924789d4157e4a9487749c" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_pair</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a5bb30b1860728abb55719daeb06e8cc1" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_qpoint</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aabfa34e9f3053f5c3a5cc19cbc9b6632" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_qpointf</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ae2f0dff27f264a72bd885ec6ae87fec7" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_size2d</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aac993ecccd3d88aafefb6b8e3caa1dee" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_string</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a773014d9be700f99ca76e9990945e509" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_tuple</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aed48a77f21850e1cc3dfc2334771a230" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_u32</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a7326c358d8e846eca7cbc0e5be8feab3" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_u64</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ac343688a6c53fd1f85a681ca3a5e34bd" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_usize</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ac2b0983e1aef983282f639f645773e14" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>to_vector2d</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aefb331b2e63a2318c2322e2f6dd68e02" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>vector2d_type</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a23d20565ed8828ea60602ae5f69d45b6" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>x</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ae40d4cb269d0be9c0d20a9efe0462757" prot="private" virt="non-virtual"><scope>rolly::types::point2d</scope><name>x_</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a9e764a6a4f38cbdb7711383af5fa8d18" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>x_mut</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1ad8e273c4442bfd92a64727fd411385a6" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>y</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a644d1b6657ad3f073d95487bdd5d08a9" prot="private" virt="non-virtual"><scope>rolly::types::point2d</scope><name>y_</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1a7212185fd6ab59c60da53e8e15606a4e" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>y_mut</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1aeef6a0c0becfedb1b3c8c7dee36ccf0a" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>zero</name></member>
      <member refid="structrolly_1_1types_1_1point2d_1afe7ce514915669e40cfa8357d337dd02" prot="public" virt="non-virtual"><scope>rolly::types::point2d</scope><name>zip</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
