<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacerolly" kind="namespace" language="C++">
    <compoundname>rolly</compoundname>
    <innerclass refid="structrolly_1_1types_1_1angle" prot="public">rolly::types::angle</innerclass>
    <innerclass refid="classrolly_1_1application__dirs" prot="public">rolly::application_dirs</innerclass>
    <innerclass refid="classrolly_1_1bad__optional__access" prot="public">rolly::bad_optional_access</innerclass>
    <innerclass refid="classrolly_1_1box" prot="public">rolly::box</innerclass>
    <innerclass refid="classrolly_1_1exceptions_1_1compile__time__error" prot="public">rolly::exceptions::compile_time_error</innerclass>
    <innerclass refid="classrolly_1_1configuration__file" prot="public">rolly::configuration_file</innerclass>
    <innerclass refid="structrolly_1_1const__overload__t" prot="public">rolly::const_overload_t</innerclass>
    <innerclass refid="structrolly_1_1deleter" prot="public">rolly::deleter</innerclass>
    <innerclass refid="classrolly_1_1exceptions_1_1deserialization__error" prot="public">rolly::exceptions::deserialization_error</innerclass>
    <innerclass refid="classrolly_1_1dirs" prot="public">rolly::dirs</innerclass>
    <innerclass refid="classrolly_1_1types_1_1guid" prot="public">rolly::types::guid</innerclass>
    <innerclass refid="structrolly_1_1is__any__of" prot="public">rolly::is_any_of</innerclass>
    <innerclass refid="structrolly_1_1is__num" prot="public">rolly::is_num</innerclass>
    <innerclass refid="structrolly_1_1is__qgadget" prot="public">rolly::is_qgadget</innerclass>
    <innerclass refid="structrolly_1_1is__qgadget_3_01T_00_01std_1_1void__t_3_01decltype_07T_1_1staticMetaObject_08_4_01_4" prot="public">rolly::is_qgadget&lt; T, std::void_t&lt; decltype(T::staticMetaObject)&gt; &gt;</innerclass>
    <innerclass refid="structrolly_1_1is__qobject" prot="public">rolly::is_qobject</innerclass>
    <innerclass refid="structrolly_1_1non__const__overload__t" prot="public">rolly::non_const_overload_t</innerclass>
    <innerclass refid="structrolly_1_1noncopyable" prot="public">rolly::noncopyable</innerclass>
    <innerclass refid="structrolly_1_1nonmovable" prot="public">rolly::nonmovable</innerclass>
    <innerclass refid="structrolly_1_1nullopt__t" prot="public">rolly::nullopt_t</innerclass>
    <innerclass refid="classrolly_1_1observer__ptr" prot="public">rolly::observer_ptr</innerclass>
    <innerclass refid="classrolly_1_1optional" prot="public">rolly::optional</innerclass>
    <innerclass refid="classrolly_1_1optional_3_01T_01_6_01_4" prot="public">rolly::optional&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structrolly_1_1ostream__formatter" prot="public">rolly::ostream_formatter</innerclass>
    <innerclass refid="structrolly_1_1overload__t" prot="public">rolly::overload_t</innerclass>
    <innerclass refid="structrolly_1_1pin" prot="public">rolly::pin</innerclass>
    <innerclass refid="structrolly_1_1plain__type" prot="public">rolly::plain_type</innerclass>
    <innerclass refid="structrolly_1_1types_1_1point2d" prot="public">rolly::types::point2d</innerclass>
    <innerclass refid="classrolly_1_1propagate__const" prot="public">rolly::propagate_const</innerclass>
    <innerclass refid="structrolly_1_1remove__cvref" prot="public">rolly::remove_cvref</innerclass>
    <innerclass refid="classrolly_1_1savefile" prot="public">rolly::savefile</innerclass>
    <innerclass refid="classrolly_1_1exceptions_1_1serialization__error" prot="public">rolly::exceptions::serialization_error</innerclass>
    <innerclass refid="classrolly_1_1signal__base" prot="public">rolly::signal_base</innerclass>
    <innerclass refid="structrolly_1_1singleton" prot="public">rolly::singleton</innerclass>
    <innerclass refid="structrolly_1_1types_1_1size2d" prot="public">rolly::types::size2d</innerclass>
    <innerclass refid="structrolly_1_1source__location" prot="public">rolly::source_location</innerclass>
    <innerclass refid="classrolly_1_1types_1_1vector2d" prot="public">rolly::types::vector2d</innerclass>
    <innerclass refid="structrolly_1_1types_1_1velocity" prot="public">rolly::types::velocity</innerclass>
    <innerclass refid="structrolly_1_1version" prot="public">rolly::version</innerclass>
    <innernamespace refid="namespacerolly_1_1comparators">rolly::comparators</innernamespace>
    <innernamespace refid="namespacerolly_1_1concepts">rolly::concepts</innernamespace>
    <innernamespace refid="namespacerolly_1_1contracts">rolly::contracts</innernamespace>
    <innernamespace refid="namespacerolly_1_1detail">rolly::detail</innernamespace>
    <innernamespace refid="namespacerolly_1_1dll">rolly::dll</innernamespace>
    <innernamespace refid="namespacerolly_1_1exceptions">rolly::exceptions</innernamespace>
    <innernamespace refid="namespacerolly_1_1io">rolly::io</innernamespace>
    <innernamespace refid="namespacerolly_1_1literals">rolly::literals</innernamespace>
    <innernamespace refid="namespacerolly_1_1math">rolly::math</innernamespace>
    <innernamespace refid="namespacerolly_1_1meta">rolly::meta</innernamespace>
    <innernamespace refid="namespacerolly_1_1numbers">rolly::numbers</innernamespace>
    <innernamespace refid="namespacerolly_1_1prelude">rolly::prelude</innernamespace>
    <innernamespace refid="namespacerolly_1_1qt">rolly::qt</innernamespace>
    <innernamespace refid="namespacerolly_1_1rtti">rolly::rtti</innernamespace>
    <innernamespace refid="namespacerolly_1_1serialization">rolly::serialization</innernamespace>
    <innernamespace refid="namespacerolly_1_1trait">rolly::trait</innernamespace>
    <innernamespace refid="namespacerolly_1_1types">rolly::types</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacerolly_1a7db57d2dfe8e47b6753b16adee1ddcd0" prot="public" static="no" strong="yes">
        <type>signed int</type>
        <name>endian</name>
        <enumvalue id="namespacerolly_1a7db57d2dfe8e47b6753b16adee1ddcd0aaae6635e044ac56046b2893a529b5114" prot="public">
          <name>little</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Little endian. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1a7db57d2dfe8e47b6753b16adee1ddcd0ad861877da56b8b4ceb35c8cbfdf65bb4" prot="public">
          <name>big</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Big endian. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1a7db57d2dfe8e47b6753b16adee1ddcd0a8e5f3adee38c8fccc13c1f3be0143796" prot="public">
          <name>native</name>
          <initializer>= little</initializer>
          <briefdescription>
<para>Native endian. Either little or big. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Endianness. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the backport of <computeroutput>std::endian</computeroutput>. <simplesect kind="version"><para>2.1.32 </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://en.cppreference.com/w/cpp/types/endian">https://en.cppreference.com/w/cpp/types/endian</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="105" column="20" bodyfile="rolly/bit.h" bodystart="105" bodyend="115"/>
      </memberdef>
      <memberdef kind="enum" id="namespacerolly_1ae1e5f60a57661fe4d13cf754e0a8d6ae" prot="public" static="no" strong="yes">
        <type><ref refid="namespacerolly_1_1types_1a254d32383658e016368673396e7afc1b" kindref="member">u8</ref></type>
        <name>saving_policy</name>
        <enumvalue id="namespacerolly_1ae1e5f60a57661fe4d13cf754e0a8d6aeaf47468435c3051a65ef52dbe8a7838b1" prot="public">
          <name>autosave</name>
          <briefdescription>
<para>Saves configuration files automatically on closing. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1ae1e5f60a57661fe4d13cf754e0a8d6aeac9c45ac5595e1bb329ad8e26396d93c5" prot="public">
          <name>explicit_</name>
          <briefdescription>
<para>Saves configuration files only explicitly. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Determines the policy used for autosaving configuration files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/config.h" line="11" column="27" bodyfile="rolly/config.h" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="enum" id="namespacerolly_1afd32bbfaaac78f0211ed4bcc528b15de" prot="public" static="no" strong="yes">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::uint8_t</ref></type>
        <name>prerelease</name>
        <enumvalue id="namespacerolly_1afd32bbfaaac78f0211ed4bcc528b15dea2c1743a391305fbf367df8e4f069f9f9" prot="public">
          <name>alpha</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1afd32bbfaaac78f0211ed4bcc528b15dea987bcab01b929eb2c07877b224215c92" prot="public">
          <name>beta</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1afd32bbfaaac78f0211ed4bcc528b15deaff78648be52a4e79513f4e70b266c62a" prot="public">
          <name>rc</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1afd32bbfaaac78f0211ed4bcc528b15dea334c4a4c42fdb79d7ebc3e73b517e6f8" prot="public">
          <name>none</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="33" column="25" bodyfile="rolly/global/semver.h" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="enum" id="namespacerolly_1aac165e3d48efbaab7e97d5139d630875" prot="public" static="no" strong="yes">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::uint8_t</ref></type>
        <name>comparators_option</name>
        <enumvalue id="namespacerolly_1aac165e3d48efbaab7e97d5139d630875addeceef5ab5e83d395f484906200d378" prot="public">
          <name>exclude_prerelease</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1aac165e3d48efbaab7e97d5139d630875ae6190b381edc2f52d53e4c142b6fdd8a" prot="public">
          <name>include_prerelease</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="418" column="35" bodyfile="rolly/global/semver.h" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="enum" id="namespacerolly_1_1types_1a3f652efe88945dad9f5db87673b0909e" prot="public" static="no" strong="yes">
        <type>char</type>
        <name>angle_unit</name>
        <enumvalue id="namespacerolly_1_1types_1a3f652efe88945dad9f5db87673b0909ea18daee01fc6e54aacd7f4c2eef60ff4d" prot="public">
          <name>degrees</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1_1types_1a3f652efe88945dad9f5db87673b0909ea017969ba49117264eb077e9f66daacfd" prot="public">
          <name>radians</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Inline namespace for geometric-related types. </para>
        </briefdescription>
        <detaileddescription>
<para>Measurement unit of the angle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/angle.h" line="17" column="26" bodyfile="rolly/types/angle.h" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="enum" id="namespacerolly_1_1types_1a48de939a7ab495a5cd0a8e834673d6d7" prot="public" static="no" strong="yes">
        <type>char</type>
        <name>velocity_unit</name>
        <enumvalue id="namespacerolly_1_1types_1a48de939a7ab495a5cd0a8e834673d6d7ac01a692efdbdbc7211b76bb9309a48a1" prot="public">
          <name>kmph</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1_1types_1a48de939a7ab495a5cd0a8e834673d6d7a7c1dc91629afef3369fc77b119a2e24d" prot="public">
          <name>mps</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1_1types_1a48de939a7ab495a5cd0a8e834673d6d7a400b6d1abbad6e83b994800d62c03fee" prot="public">
          <name>kilometers_per_hour</name>
          <initializer>= kmph</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerolly_1_1types_1a48de939a7ab495a5cd0a8e834673d6d7a7355df818aff8043f3acaeda426ae396" prot="public">
          <name>meters_per_second</name>
          <initializer>= mps</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Measurement unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/velocity.h" line="15" column="29" bodyfile="rolly/types/velocity.h" bodystart="15" bodyend="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacerolly_1adee8f199e8943479e2e7ba5269bf0e37" prot="public" static="no">
        <type><ref refid="cpp/types/integral_constant" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::integral_constant</ref>&lt; int, static_cast&lt; signed int &gt;(<ref refid="namespacerolly_1a7db57d2dfe8e47b6753b16adee1ddcd0ad861877da56b8b4ceb35c8cbfdf65bb4" kindref="member">endian::big</ref>)&gt;</type>
        <definition>using big_endian_t =  std::integral_constant&lt;int, static_cast&lt;signed int&gt;(endian::big)&gt;</definition>
        <argsstring></argsstring>
        <name>big_endian_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="version"><para>2.1.32 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="120" column="3" bodyfile="rolly/bit.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1a3d7bc8c2e9c71c3e2399b4623676a000" prot="public" static="no">
        <type><ref refid="cpp/types/integral_constant" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::integral_constant</ref>&lt; int, static_cast&lt; signed int &gt;(<ref refid="namespacerolly_1a7db57d2dfe8e47b6753b16adee1ddcd0aaae6635e044ac56046b2893a529b5114" kindref="member">endian::little</ref>)&gt;</type>
        <definition>using little_endian_t =  std::integral_constant&lt;int, static_cast&lt;signed int&gt;(endian::little)&gt;</definition>
        <argsstring></argsstring>
        <name>little_endian_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="version"><para>2.1.32 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="125" column="3" bodyfile="rolly/bit.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1a1a021e92d7e75961d5ee7400ad081fc9" prot="public" static="no">
        <type><ref refid="cpp/types/integral_constant" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::integral_constant</ref>&lt; int, static_cast&lt; signed int &gt;(<ref refid="namespacerolly_1a7db57d2dfe8e47b6753b16adee1ddcd0a8e5f3adee38c8fccc13c1f3be0143796" kindref="member">endian::native</ref>)&gt;</type>
        <definition>using native_endian_t =  std::integral_constant&lt;int, static_cast&lt;signed int&gt;(endian::native)&gt;</definition>
        <argsstring></argsstring>
        <name>native_endian_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="version"><para>2.1.32 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="130" column="3" bodyfile="rolly/bit.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1a0129ca85eb0fd2fc4f9c8425333c357a" prot="public" static="no">
        <type>detail::range</type>
        <definition>using version_range =  detail::range</definition>
        <argsstring></argsstring>
        <name>version_range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="757" column="3" bodyfile="rolly/global/semver.h" bodystart="757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1a83f09cfe4e868bb4b36a157a0887b0d6" prot="public" static="no">
        <type>detail::satisfies_option</type>
        <definition>using version_range_option =  detail::satisfies_option</definition>
        <argsstring></argsstring>
        <name>version_range_option</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="758" column="3" bodyfile="rolly/global/semver.h" bodystart="758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1a003e7028327d1c1243f546af6e61d80f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>___concept___(concepts::c_ptr)</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>using owner =  T</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
<para>GSL-like owning raw pointer typedef. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="namespacerolly_1a003e7028327d1c1243f546af6e61d80f" kindref="member">rolly::owner&lt;T&gt;</ref></computeroutput> is designed as a safety mechanism for code that must deal directly with raw pointers that own memory.</para>
<para>Ideally such code should be restricted to the implementation of low-level abstractions. <computeroutput><ref refid="namespacerolly_1a003e7028327d1c1243f546af6e61d80f" kindref="member">rolly::owner&lt;T&gt;</ref></computeroutput> can also be used as a stepping point in converting legacy code to use more modern RAII constructs, such as smart pointers. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://github.com/microsoft/GSL/blob/main/include/gsl/pointers">https://github.com/microsoft/GSL/blob/main/include/gsl/pointers</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/memory/owner.h" line="18" column="3" bodyfile="rolly/memory/owner.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1a454d33bccebd3c6eba3dd0c57a547365" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrolly_1_1propagate__const" kindref="compound">propagate_const</ref>&lt; <ref refid="classrolly_1_1box" kindref="compound">box</ref>&lt; T &gt; &gt;</type>
        <definition>using pimpl =  propagate_const&lt;box&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>pimpl</name>
        <briefdescription>
<para>Pointer-to-implementation pattern trait. </para>
        </briefdescription>
        <detaileddescription>
<para>Allows to use <bold>Pimpl</bold> pattern in custom types and classes.</para>
<para>Example declaration:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestPimpl<sp/>:<sp/><ref refid="structrolly_1_1pin" kindref="compound">rolly::pin</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>TestPimpl()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>add(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>int;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">impl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrolly_1_1propagate__const" kindref="compound">rolly::pimpl&lt;struct impl&gt;</ref><sp/>impl_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestPimpl::impl</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>add(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestPimpl::add(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;impl_-&gt;add(a,<sp/>b);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to implement. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/traits/pimpl.h" line="37" column="3" bodyfile="rolly/traits/pimpl.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1a3c0600da43d6867a247432fcc43ce84f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structrolly_1_1remove__cvref" kindref="compound">remove_cvref</ref>&lt; T &gt;::type</type>
        <definition>using remove_cvref_t =  typename remove_cvref&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_cvref_t</name>
        <briefdescription>
<para>The type referred by T or T itself if it is not a reference, with top-level cv-qualifiers removed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/type_traits.h" line="30" column="3" bodyfile="rolly/type_traits.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1abb6b740122d8db472da8ccec3de5ec9c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structrolly_1_1plain__type" kindref="compound">plain_type</ref>&lt; T &gt;::type</type>
        <definition>using plain_type_t =  typename plain_type&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>plain_type_t</name>
        <briefdescription>
<para>Remove all cv qualifiers, references and pointers from a type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structrolly_1_1plain__type" kindref="compound">plain_type</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/type_traits.h" line="62" column="3" bodyfile="rolly/type_traits.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1a918453fbe2927b6410675e5eb5606441" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>expected&lt; T, <ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>using result =  expected&lt;T, std::string&gt;</definition>
        <argsstring></argsstring>
        <name>result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/result.h" line="2640" column="5" bodyfile="rolly/types/result.h" bodystart="2640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1a254d32383658e016368673396e7afc1b" prot="public" static="no">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::uint8_t</ref></type>
        <definition>using u8 =  std::uint8_t</definition>
        <argsstring></argsstring>
        <name>u8</name>
        <briefdescription>
<para>8-bit unsigned integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="12" column="5" bodyfile="rolly/types/stdint.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1a917e58b0692c2df778a27350534cbfe7" prot="public" static="no">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::uint16_t</ref></type>
        <definition>using u16 =  std::uint16_t</definition>
        <argsstring></argsstring>
        <name>u16</name>
        <briefdescription>
<para>16-bit unsigned integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="13" column="5" bodyfile="rolly/types/stdint.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1a65cf28726f89e62ccf2f1354bc2716df" prot="public" static="no">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::uint32_t</ref></type>
        <definition>using u32 =  std::uint32_t</definition>
        <argsstring></argsstring>
        <name>u32</name>
        <briefdescription>
<para>32-bit unsigned integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="14" column="5" bodyfile="rolly/types/stdint.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1a66e1d499241ccae9a18a20a1f4f0590d" prot="public" static="no">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::uint64_t</ref></type>
        <definition>using u64 =  std::uint64_t</definition>
        <argsstring></argsstring>
        <name>u64</name>
        <briefdescription>
<para>64-bit unsigned integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="15" column="5" bodyfile="rolly/types/stdint.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1a090e14ab721404d80f4404634d5c79cc" prot="public" static="no">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::int8_t</ref></type>
        <definition>using i8 =  std::int8_t</definition>
        <argsstring></argsstring>
        <name>i8</name>
        <briefdescription>
<para>8-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="16" column="5" bodyfile="rolly/types/stdint.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1aa9061c03e78b5c69a2e90542f956b1b9" prot="public" static="no">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::int16_t</ref></type>
        <definition>using i16 =  std::int16_t</definition>
        <argsstring></argsstring>
        <name>i16</name>
        <briefdescription>
<para>16-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="17" column="5" bodyfile="rolly/types/stdint.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1aec4a1429cc91fb7ff41599b263c348cc" prot="public" static="no">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::int32_t</ref></type>
        <definition>using i32 =  std::int32_t</definition>
        <argsstring></argsstring>
        <name>i32</name>
        <briefdescription>
<para>32-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="18" column="5" bodyfile="rolly/types/stdint.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1ae72e52134285dbd83ca4227ec77394a2" prot="public" static="no">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::int64_t</ref></type>
        <definition>using i64 =  std::int64_t</definition>
        <argsstring></argsstring>
        <name>i64</name>
        <briefdescription>
<para>64-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="19" column="5" bodyfile="rolly/types/stdint.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1ac47ac2e28dd2cb38fbf05ce10f810407" prot="public" static="no">
        <type><ref refid="cpp/types/size_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::size_t</ref></type>
        <definition>using usize =  std::size_t</definition>
        <argsstring></argsstring>
        <name>usize</name>
        <briefdescription>
<para>Unsigned integer with pointer size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="20" column="5" bodyfile="rolly/types/stdint.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1a30f901b0e451a40d688c0fe8ec125c85" prot="public" static="no">
        <type>std::make_signed_t&lt; <ref refid="cpp/types/size_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::size_t</ref> &gt;</type>
        <definition>using isize =  std::make_signed_t&lt;std::size_t&gt;</definition>
        <argsstring></argsstring>
        <name>isize</name>
        <briefdescription>
<para>Signed integer with pointer size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="21" column="5" bodyfile="rolly/types/stdint.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" prot="public" static="no">
        <type>float</type>
        <definition>using f32 =  float</definition>
        <argsstring></argsstring>
        <name>f32</name>
        <briefdescription>
<para>Float with 32-bit precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="22" column="5" bodyfile="rolly/types/stdint.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1abc2f107791bd7c1d49ecf0f168c085a3" prot="public" static="no">
        <type>double</type>
        <definition>using f64 =  double</definition>
        <argsstring></argsstring>
        <name>f64</name>
        <briefdescription>
<para>Float with 64-bit precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="23" column="5" bodyfile="rolly/types/stdint.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1aa2dce0ff04d649f59f59d9008b781747" prot="public" static="no">
        <type>long double</type>
        <definition>using f128 =  long double</definition>
        <argsstring></argsstring>
        <name>f128</name>
        <briefdescription>
<para>Float with 128-bit precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="24" column="5" bodyfile="rolly/types/stdint.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1adbee524399dbb70a713e4c94d3bc00be" prot="public" static="no">
        <type><ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::uintptr_t</ref></type>
        <definition>using uptr =  std::uintptr_t</definition>
        <argsstring></argsstring>
        <name>uptr</name>
        <briefdescription>
<para>Unsigned integer with pointer size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="25" column="5" bodyfile="rolly/types/stdint.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1a70c2c38542d55bfe51d75907a6c8125a" prot="public" static="no">
        <type>unsigned long long</type>
        <definition>using ulonglong =  unsigned long long</definition>
        <argsstring></argsstring>
        <name>ulonglong</name>
        <briefdescription>
<para>Alias for <computeroutput>unsigned long long</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="28" column="5" bodyfile="rolly/types/stdint.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacerolly_1_1types_1a69aa29b598b851b0640aa225a9e5d61d" prot="public" static="no">
        <type>unsigned int</type>
        <definition>using uint =  unsigned int</definition>
        <argsstring></argsstring>
        <name>uint</name>
        <briefdescription>
<para>Alias for <computeroutput>unsigned int</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="32" column="5" bodyfile="rolly/types/stdint.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacerolly_1a97300837e35e483d3cf7b20dd724250b" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_any_of_v</definition>
        <argsstring></argsstring>
        <name>is_any_of_v</name>
        <initializer>= <ref refid="structrolly_1_1is__any__of" kindref="compound">is_any_of</ref>&lt;T, U...&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/concepts/any_of.h" line="21" column="25" bodyfile="rolly/concepts/any_of.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1af4c439f294424a3f11f9908de0dca2f6" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1overload__t" kindref="compound">overload_t</ref>&lt; Args... &gt;</type>
        <definition>constexpr overload_t&lt;Args...&gt; overload</definition>
        <argsstring></argsstring>
        <name>overload</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/overload.h" line="50" column="31" bodyfile="rolly/functional/overload.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a85cfe4055bff1f633f6bbedb33f2e93b" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1const__overload__t" kindref="compound">const_overload_t</ref>&lt; Args... &gt;</type>
        <definition>constexpr const_overload_t&lt;Args...&gt; const_overload</definition>
        <argsstring></argsstring>
        <name>const_overload</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/overload.h" line="53" column="37" bodyfile="rolly/functional/overload.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1ae3c7f1453d02210f5dedfa448b6b4697" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structrolly_1_1non__const__overload__t" kindref="compound">non_const_overload_t</ref>&lt; Args... &gt;</type>
        <definition>constexpr non_const_overload_t&lt;Args...&gt; non_const_overload</definition>
        <argsstring></argsstring>
        <name>non_const_overload</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/overload.h" line="56" column="41" bodyfile="rolly/functional/overload.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1aaa49597f11fa34841f1e7c48b7fe1fb8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool with_rtti</definition>
        <argsstring></argsstring>
        <name>with_rtti</name>
        <initializer>=



    false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="106" column="27" bodyfile="rolly/functional/signals.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a666a4e9726827588e42f0857d8a87c68" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_weak_ptr_compatible_v</definition>
        <argsstring></argsstring>
        <name>is_weak_ptr_compatible_v</name>
        <initializer>=
      detail::is_weak_ptr_compatible&lt;std::decay_t&lt;P&gt;&gt;::value</initializer>
        <briefdescription>
<para>determine if a pointer is convertible into a &quot;weak&quot; pointer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="115" column="20" bodyfile="rolly/functional/signals.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a0ce1d8dcc7700b383ed4cab2a35ef160" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_callable_v</definition>
        <argsstring></argsstring>
        <name>is_callable_v</name>
        <initializer>= detail::is_callable&lt;T..., L&gt;::value</initializer>
        <briefdescription>
<para>determine if a type T (Callable or Pmf) is callable with supplied arguments </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="120" column="20" bodyfile="rolly/functional/signals.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1ad73fb921872b6292fd6244b46ea4ebeb" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_weak_ptr_v</definition>
        <argsstring></argsstring>
        <name>is_weak_ptr_v</name>
        <initializer>= detail::is_weak_ptr&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="123" column="20" bodyfile="rolly/functional/signals.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a26520841c8b04240e098d1360c774d08" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool has_call_operator_v</definition>
        <argsstring></argsstring>
        <name>has_call_operator_v</name>
        <initializer>= detail::has_call_operator&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="126" column="20" bodyfile="rolly/functional/signals.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a60d8a43ca3d5d473f1651ef5114c2628" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_pointer_v</definition>
        <argsstring></argsstring>
        <name>is_pointer_v</name>
        <initializer>= <ref refid="cpp/types/is_pointer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_pointer</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="129" column="20" bodyfile="rolly/functional/signals.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a803db4963a7d275f1f2dc56ab3a33e0b" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_func_v</definition>
        <argsstring></argsstring>
        <name>is_func_v</name>
        <initializer>= <ref refid="cpp/types/is_function" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_function</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="132" column="20" bodyfile="rolly/functional/signals.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a2bc53fe616698994943b2b23620e7749" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_pmf_v</definition>
        <argsstring></argsstring>
        <name>is_pmf_v</name>
        <initializer>= <ref refid="cpp/types/is_member_function_pointer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_member_function_pointer</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="135" column="20" bodyfile="rolly/functional/signals.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1aa06dc940ac021f05e56d97c2dac9adeb" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_observer_v</definition>
        <argsstring></argsstring>
        <name>is_observer_v</name>
        <initializer>= <ref refid="cpp/types/is_base_of" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_base_of</ref>&lt;
      ::<ref refid="structrolly_1_1detail_1_1observer__type" kindref="compound">rolly::detail::observer_type</ref>,
      std::remove_pointer_t&lt;std::remove_reference_t&lt;T&gt;&gt;&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="138" column="20" bodyfile="rolly/functional/signals.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a908ba454a2355d53f9831b0570f348e7" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_signal_v</definition>
        <argsstring></argsstring>
        <name>is_signal_v</name>
        <initializer>= detail::is_signal&lt;S&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/signals.h" line="143" column="20" bodyfile="rolly/functional/signals.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a6fc52902ed4e616aadff50883c255f9d" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_qobject_v</definition>
        <argsstring></argsstring>
        <name>is_qobject_v</name>
        <initializer>= <ref refid="structrolly_1_1is__qobject" kindref="compound">is_qobject</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/qt/concepts.h" line="29" column="25" bodyfile="rolly/qt/concepts.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a4a2bc3187d7a879894ffd775ab861ac7" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_qgadget_v</definition>
        <argsstring></argsstring>
        <name>is_qgadget_v</name>
        <initializer>= <ref refid="structrolly_1_1is__qgadget" kindref="compound">is_qgadget</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/qt/concepts.h" line="38" column="25" bodyfile="rolly/qt/concepts.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a3052f5fbb6fc7bc98ecb11360c416a8f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        <definition>constexpr nullopt_t nullopt</definition>
        <argsstring></argsstring>
        <name>nullopt</name>
        <initializer>{<ref refid="structrolly_1_1nullopt__t_1_1do__not__use" kindref="compound">nullopt_t::do_not_use</ref> {}, <ref refid="structrolly_1_1nullopt__t_1_1do__not__use" kindref="compound">nullopt_t::do_not_use</ref> {}}</initializer>
        <briefdescription>
<para>Represents an empty optional. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="665" column="30" bodyfile="rolly/types/optional.h" bodystart="665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1a9365b793fe547271e48fa719a7f4854d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto none</definition>
        <argsstring></argsstring>
        <name>none</name>
        <initializer>= <ref refid="namespacerolly_1a3052f5fbb6fc7bc98ecb11360c416a8f" kindref="member">rolly::nullopt</ref></initializer>
        <briefdescription>
<para>Wrap an empty value in an optional. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a helper for creating an optional from a value. It is mostly useful when working with generic code that needs to work with both expected and optional types.</para>
<para><simplesect kind="see"><para><ref refid="namespacerolly_1_1types_1a80f2e5353f29a764733f510a9a2481c9" kindref="member">ok</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1a4d27def5f33f561207ecbc421b842d55" kindref="member">some</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="2118" column="27" bodyfile="rolly/types/optional.h" bodystart="2118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacerolly_1_1math_1a2264e542a12579ea469c63ecdee1883d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int rolly::math::popcount</definition>
        <argsstring>(T x) noexcept</argsstring>
        <name>popcount</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the number of 1 bits in the value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. Must be an unsigned integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to count the number of 1 bits in. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of 1 bits in the value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="39" column="20" bodyfile="rolly/bit.h" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1ac856a1cb702219f1d1035f0ce0945492" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::math::has_single_bit</definition>
        <argsstring>(T x) noexcept</argsstring>
        <name>has_single_bit</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Checks if the value is an integral power of two. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. Must be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the value is an integral power of two, false otherwise. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1a9f9d00ff5e0c49434b60e113d83be45e" kindref="member">is_pow2</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="55" column="21" bodyfile="rolly/bit.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a9f9d00ff5e0c49434b60e113d83be45e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::math::is_pow2</definition>
        <argsstring>(T x) noexcept</argsstring>
        <name>is_pow2</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Checks if the value is an integral power of two. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an alias for <ref refid="namespacerolly_1_1math_1ac856a1cb702219f1d1035f0ce0945492" kindref="member">has_single_bit</ref> function. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. Must be an integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the value is an integral power of two, false otherwise. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1ac856a1cb702219f1d1035f0ce0945492" kindref="member">has_single_bit</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="72" column="21" bodyfile="rolly/bit.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1af2e45c6029de89f124eb5f3d415b19be" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::bit_ceil</definition>
        <argsstring>(T x) noexcept</argsstring>
        <name>bit_ceil</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the next power of two of the value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. Must be an unsigned integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next power of two of the value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="88" column="18" bodyfile="rolly/bit.h" bodystart="88" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a99bfcde93b3d479813abecbbc877a5c0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class To</type>
          </param>
          <param>
            <type>class From</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>rolly::bit_cast</definition>
        <argsstring>(From const &amp;src) noexcept</argsstring>
        <name>bit_cast</name>
        <param>
          <type>From const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Casts value from one type to another by bit copy. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the backport of <computeroutput>std::bit_cast</computeroutput>.</para>
<para>Obtain a value of type To by reinterpreting the object representation of From. Every bit in the value representation of the returned To object is equal to the corresponding bit in the object representation of from.</para>
<para>The values of padding bits in the returned To object are unspecified.</para>
<para>If there is no value of type To corresponding to the value representation produced, the behavior is undefined. If there are multiple such values, which value is produced is unspecified. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>To</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination type. Must be a trivially copyable type and have the same size as the source type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>From</parametername>
</parameternamelist>
<parameterdescription>
<para>Source type. Must be a trivially copyable type and have the same size as the destination type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Destination value. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://en.cppreference.com/w/cpp/numeric/bit_cast">https://en.cppreference.com/w/cpp/numeric/bit_cast</ulink> </para>
</simplesect>
<simplesect kind="version"><para>2.1.32 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="161" column="5" bodyfile="rolly/bit.h" bodystart="161" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a50b397be3a6964a1f150ceb189afabb5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::num</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::byteswap</definition>
        <argsstring>(T x) noexcept</argsstring>
        <name>byteswap</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Reverses the byte order of the value. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the backport of <computeroutput>std::byteswap</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. Must be a numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value. </para>
</simplesect>
<simplesect kind="version"><para>2.1.32 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="185" column="16" bodyfile="rolly/bit.h" bodystart="185" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a5764cccca8658c6880ab03364b4fcda5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::num</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::to_big_endian</definition>
        <argsstring>(T x) noexcept</argsstring>
        <name>to_big_endian</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Reverses the byte order of the value if the native endianness is little. </para>
        </briefdescription>
        <detaileddescription>
<para>If the native endianness is big, the value is returned unchanged. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. Must be a numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value. </para>
</simplesect>
<simplesect kind="version"><para>2.1.32 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="208" column="16" bodyfile="rolly/bit.h" bodystart="208" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a571786331157b178e73d2ac05d14751b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::num</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::to_little_endian</definition>
        <argsstring>(T x) noexcept</argsstring>
        <name>to_little_endian</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Reverses the byte order of the value if the native endianness is big. </para>
        </briefdescription>
        <detaileddescription>
<para>If the native endianness is little, the value is returned unchanged. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. Must be a numeric type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value. </para>
</simplesect>
<simplesect kind="version"><para>2.1.32 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/bit.h" line="228" column="16" bodyfile="rolly/bit.h" bodystart="228" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a702fe0cca3278589eeca41da81cd2e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rolly::lazy</definition>
        <argsstring>(F &amp;&amp;f)</argsstring>
        <name>lazy</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Constructs a lazy object from a given function object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">f</parametername>
</parameternamelist>
<parameterdescription>
<para>Function object to be evaluated when the value is requested the first time. The function object is moved into the lazy object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/functional/lazy.h" line="78" column="9" bodyfile="rolly/functional/lazy.h" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a373760a3c5836375681456b6c51f1e93" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr char</type>
        <definition>constexpr char rolly::to_lower</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>to_lower</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/char_utils.h" line="8" column="19" bodyfile="rolly/global/char_utils.h" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a6f31057710263260dde372ac14417b07" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::is_digit</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>is_digit</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/char_utils.h" line="12" column="19" bodyfile="rolly/global/char_utils.h" bodystart="12" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a68be1add7d0d715e53b0689ac056f0d2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::is_space</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>is_space</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/char_utils.h" line="14" column="19" bodyfile="rolly/global/char_utils.h" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aa86605562968255acbd911ed427a2e26" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::is_operator</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>is_operator</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/char_utils.h" line="16" column="19" bodyfile="rolly/global/char_utils.h" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a3a9735d38642d18354f18e961f06c9f2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::is_dot</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>is_dot</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/char_utils.h" line="20" column="19" bodyfile="rolly/global/char_utils.h" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a011123e17c8b3dcf68f082eb03f376df" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::is_logical_or</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>is_logical_or</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/char_utils.h" line="22" column="19" bodyfile="rolly/global/char_utils.h" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a7694a2c16fb00e6162dec784e4ab5681" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::is_hyphen</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>is_hyphen</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/char_utils.h" line="24" column="19" bodyfile="rolly/global/char_utils.h" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a95a56ea6e001b20d4537755511f94436" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::is_letter</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>is_letter</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/char_utils.h" line="26" column="19" bodyfile="rolly/global/char_utils.h" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1adaa0a5242a018519c3cba5f3374e6c15" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::is_hex</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>is_hex</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/char_utils.h" line="30" column="19" bodyfile="rolly/global/char_utils.h" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a29d324f3499898f4676605869b55449c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="cpp/types/integer" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::uint16_t</ref></type>
        <definition>constexpr std::uint16_t rolly::to_digit</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>to_digit</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/char_utils.h" line="34" column="28" bodyfile="rolly/global/char_utils.h" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a9cd77251f15016f95592878e29c5a6e7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr unsigned char</type>
        <definition>constexpr unsigned char rolly::hex_to_char</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>hex_to_char</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/char_utils.h" line="38" column="28" bodyfile="rolly/global/char_utils.h" bodystart="38" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1abed9db28b478cd89e3f00adba8f6632a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::basic_string</ref>&lt; C &gt;</type>
        <definition>std::basic_string&lt;C&gt; rolly::to_string</definition>
        <argsstring>(T const &amp;value)=delete</argsstring>
        <name>to_string</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function prototype for converting C++ types to owned strings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Character type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant reference to the type to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Owned string representation of the type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/charconv.h" line="16" column="29" declfile="rolly/global/charconv.h" declline="16" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a0caf7f4c7ee8a9aa65b3dd556e1e656c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::basic_string_view&lt; C &gt;</type>
        <definition>constexpr std::basic_string_view&lt;C&gt; rolly::as_str</definition>
        <argsstring>(T const &amp;type)=delete</argsstring>
        <name>as_str</name>
        <param>
          <type>T const &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Function prototype for converting C++ types to non-owned strings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Character type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant reference to the type to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-owned string representation of the type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/charconv.h" line="26" column="44" declfile="rolly/global/charconv.h" declline="26" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aeb6cbc9c9826b7eef31366ea5d000db2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::from_str</definition>
        <argsstring>(std::basic_string_view&lt; C &gt; const &amp;str)=delete</argsstring>
        <name>from_str</name>
        <param>
          <type>std::basic_string_view&lt; C &gt; const &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Function prototype for converting strings to C++ types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Character type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-owned string representation of the type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of the converted type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/charconv.h" line="36" column="23" declfile="rolly/global/charconv.h" declline="36" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1af5f41175811a2f4a42eca6bc6e6f01d3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="324" column="19" bodyfile="rolly/global/semver.h" bodystart="324" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a6a0829fd71ded700e13174ae89c009e1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="328" column="19" bodyfile="rolly/global/semver.h" bodystart="328" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ad1af20d5b7b707c993d1930a863f7760" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="332" column="19" bodyfile="rolly/global/semver.h" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a8330ddf4c9dcf3b881130a2f07010c66" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="336" column="19" bodyfile="rolly/global/semver.h" bodystart="336" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a909ee63bac59a1e69a6d558596311f43" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="340" column="14" bodyfile="rolly/global/semver.h" bodystart="340" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a1bb0f54264509f56b5481cbd437b05ae" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="344" column="14" bodyfile="rolly/global/semver.h" bodystart="344" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1ae36f4e7b9c0900e1c08d9970b026fbbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ROLLY_SEMVER_CONSTEXPR <ref refid="structrolly_1_1version" kindref="compound">version</ref></type>
        <definition>ROLLY_SEMVER_CONSTEXPR version rolly::literals::operator&quot;&quot;_version</definition>
        <argsstring>(char const *str, std::size_t length)</argsstring>
        <name>operator&quot;&quot;_version</name>
        <param>
          <type>char const *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="cpp/types/size_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::size_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Version literal operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a version from a string literal at compile time.</para>
<para>Example usage: <programlisting filename=".cpp"><codeline><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerolly_1_1literals" kindref="compound">rolly::literals</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>v<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.0.0&quot;</highlight><highlight class="normal">_version;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">static_assert(v<sp/>==<sp/><ref refid="structrolly_1_1version" kindref="compound">rolly::version</ref>(1,<sp/>0,<sp/>0));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="374" column="7" bodyfile="rolly/global/semver.h" bodystart="374" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a176758c28587a73dfa5cf233d853d23d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>ROLLY_SEMVER_CONSTEXPR bool</type>
        <definition>ROLLY_SEMVER_CONSTEXPR bool rolly::valid</definition>
        <argsstring>(std::string_view str) noexcept</argsstring>
        <name>valid</name>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="381" column="32" bodyfile="rolly/global/semver.h" bodystart="381" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a25e9b3ba291a589983345addab86e319" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>ROLLY_SEMVER_CONSTEXPR from_chars_result</type>
        <definition>ROLLY_SEMVER_CONSTEXPR from_chars_result rolly::from_chars</definition>
        <argsstring>(char const *first, char const *last, version &amp;v) noexcept</argsstring>
        <name>from_chars</name>
        <param>
          <type>char const *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="386" column="5" bodyfile="rolly/global/semver.h" bodystart="386" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ad27abc9860dd15c159be04b022aeb5a0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>ROLLY_SEMVER_CONSTEXPR to_chars_result</type>
        <definition>ROLLY_SEMVER_CONSTEXPR to_chars_result rolly::to_chars</definition>
        <argsstring>(char *first, char *last, version const &amp;v) noexcept</argsstring>
        <name>to_chars</name>
        <param>
          <type>char *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="391" column="5" bodyfile="rolly/global/semver.h" bodystart="391" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ad62ddd144b14ae7ce815d7d57c37cf9d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>ROLLY_SEMVER_CONSTEXPR <ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; <ref refid="structrolly_1_1version" kindref="compound">version</ref> &gt;</type>
        <definition>ROLLY_SEMVER_CONSTEXPR optional&lt;version&gt; rolly::from_string_noexcept</definition>
        <argsstring>(std::string_view str) noexcept</argsstring>
        <name>from_string_noexcept</name>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="395" column="36" bodyfile="rolly/global/semver.h" bodystart="395" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a6472f585e4160c186d682782d57ab7ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ROLLY_SEMVER_CONSTEXPR <ref refid="structrolly_1_1version" kindref="compound">version</ref></type>
        <definition>ROLLY_SEMVER_CONSTEXPR version rolly::from_string</definition>
        <argsstring>(std::string_view str)</argsstring>
        <name>from_string</name>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="403" column="35" bodyfile="rolly/global/semver.h" bodystart="403" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ad687023e3333f2a28121709aa2ec8b92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string rolly::to_string</definition>
        <argsstring>(version const &amp;v)</argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="407" column="23" bodyfile="rolly/global/semver.h" bodystart="407" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ae775c2f85b0bbc89c8ea6633708b2b47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::basic_ostream</ref>&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char, Traits&gt;&amp; rolly::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, version const &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::basic_ostream</ref>&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="407" column="23" bodyfile="rolly/global/semver.h" bodystart="411" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a073e020abb8d49be9a4ed3f6e05d31f0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr int</type>
        <definition>constexpr int rolly::comparators::compare</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</argsstring>
        <name>compare</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>comparators_option</type>
          <declname>option</declname>
          <defval>comparators_option::include_prerelease</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="423" column="20" bodyfile="rolly/global/semver.h" bodystart="423" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1add78f2c5593250a4d8635e8ab86231a1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::comparators::equal_to</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</argsstring>
        <name>equal_to</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>comparators_option</type>
          <declname>option</declname>
          <defval>comparators_option::include_prerelease</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="435" column="21" bodyfile="rolly/global/semver.h" bodystart="435" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aac20f4b292436c8f853d8450305a3728" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::comparators::not_equal_to</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</argsstring>
        <name>not_equal_to</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>comparators_option</type>
          <declname>option</declname>
          <defval>comparators_option::include_prerelease</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="443" column="21" bodyfile="rolly/global/semver.h" bodystart="443" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a0ddad7c8ac3da88058d6f7404199b478" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::comparators::greater</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</argsstring>
        <name>greater</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>comparators_option</type>
          <declname>option</declname>
          <defval>comparators_option::include_prerelease</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="451" column="21" bodyfile="rolly/global/semver.h" bodystart="451" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a765c39fb28cd5b799f4cd9fdaded9393" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::comparators::greater_equal</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</argsstring>
        <name>greater_equal</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>comparators_option</type>
          <declname>option</declname>
          <defval>comparators_option::include_prerelease</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="459" column="21" bodyfile="rolly/global/semver.h" bodystart="459" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a8cdeab0eaeaf885f90902d1ac7d5e3e6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::comparators::less</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</argsstring>
        <name>less</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>comparators_option</type>
          <declname>option</declname>
          <defval>comparators_option::include_prerelease</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="467" column="21" bodyfile="rolly/global/semver.h" bodystart="467" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a7d7d7f80bcbd1558d975988d8fefa0d8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::comparators::less_equal</definition>
        <argsstring>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</argsstring>
        <name>less_equal</name>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1version" kindref="compound">version</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>comparators_option</type>
          <declname>option</declname>
          <defval>comparators_option::include_prerelease</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/global/semver.h" line="475" column="21" bodyfile="rolly/global/semver.h" bodystart="475" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1ae71706eff25ec5df1ff62b4ae7be36a5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::floating_point</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::floor</definition>
        <argsstring>(T val)</argsstring>
        <name>floor</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Rounds <computeroutput>val</computeroutput> down to the nearest integer. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a <computeroutput>constexpr</computeroutput> version of <computeroutput><ref refid="cpp/numeric/math/floor" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::floor</ref></computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type. Must be a floating point type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to round. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="24" column="25" bodyfile="rolly/math.h" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a06b1201488c8539a55f0d15c3142c846" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::min</definition>
        <argsstring>(T &amp;&amp;v)</argsstring>
        <name>min</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the minimum of a single value. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload simply returns the given value. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The minimum of a single value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="38" column="17" bodyfile="rolly/math.h" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a3a1a1d027d2cc6931b957029c079ad98" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::min</definition>
        <argsstring>(T const &amp;v1, T const &amp;v2, Args const &amp;... args)</argsstring>
        <name>min</name>
        <param>
          <type>T const &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Returns the minimum value among the provided arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function compares multiple values and returns the smallest one. It uses a recursive approach to handle an arbitrary number of arguments. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the values to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template arguments allowing multiple values of type T. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>First value to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second value to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional values to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The minimum value among the provided arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="54" column="17" bodyfile="rolly/math.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1ab3a14f303ad6df0c90ec3f7d5f57154f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::max</definition>
        <argsstring>(T &amp;&amp;v)</argsstring>
        <name>max</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the maximum of a single value. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload simply returns the given value. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The maximum of a single value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="66" column="18" bodyfile="rolly/math.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a00d802cbcc79c27d8b780034747072fd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::max</definition>
        <argsstring>(T const &amp;v1, T const &amp;v2, Args const &amp;... args)</argsstring>
        <name>max</name>
        <param>
          <type>T const &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Returns the maximum value among the provided arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function compares multiple values and returns the largest one. It uses a recursive approach to handle an arbitrary number of arguments. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the values to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template arguments allowing multiple values of type T. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v1</parametername>
</parameternamelist>
<parameterdescription>
<para>First value to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">v2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second value to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional values to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The maximum value among the provided arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="82" column="17" bodyfile="rolly/math.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1aa3571ee367243a1d142a7dc27a0ffa2d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::abs</definition>
        <argsstring>(T const &amp;v)</argsstring>
        <name>abs</name>
        <param>
          <type>T const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the absolute value of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function simply negates the input if it is negative, and returns the input unchanged if it is non-negative. It is a <computeroutput>constexpr</computeroutput> version of <computeroutput>std::abs</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to take the absolute value of. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The absolute value of v. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="96" column="17" bodyfile="rolly/math.h" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a94cb063ba3f91b4919f5fd80469f9260" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" kindref="member">f32</ref></type>
        <definition>constexpr f32 rolly::math::fmod</definition>
        <argsstring>(f32 const x, f32 const y)</argsstring>
        <name>fmod</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" kindref="member">f32</ref> const</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacerolly_1_1types_1ad34d88453d37b65a09797bad37f2f527" kindref="member">f32</ref> const</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Returns the remainder of the division of x by y. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a <computeroutput>constexpr</computeroutput> version of <computeroutput><ref refid="cpp/numeric/math/fmod" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::fmod</ref></computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>First value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Second value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The remainder of the division of x by y. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="108" column="19" bodyfile="rolly/math.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a8b04e5cf1529e6fad4b713259ce61722" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::num</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::to_radians</definition>
        <argsstring>(T degrees) noexcept</argsstring>
        <name>to_radians</name>
        <param>
          <type>T</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
<para>Converts degrees to radians. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Underlying type. Must be an integral or floating point type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degrees</parametername>
</parameternamelist>
<parameterdescription>
<para>Degree value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Radian value. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1a92152fa5d7fe7579552beee6eb51014e" kindref="member">to_degrees</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="123" column="18" bodyfile="rolly/math.h" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a92152fa5d7fe7579552beee6eb51014e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::num</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::math::to_degrees</definition>
        <argsstring>(T radians) noexcept</argsstring>
        <name>to_degrees</name>
        <param>
          <type>T</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
<para>Converts radians to degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Underlying type. Must be an integral or floating point type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radians</parametername>
</parameternamelist>
<parameterdescription>
<para>Radian value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Degree value. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1a8b04e5cf1529e6fad4b713259ce61722" kindref="member">to_radians</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="140" column="18" bodyfile="rolly/math.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a3ac3258dd6ee92741399970d50868c2e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::math::approx_eq</definition>
        <argsstring>(T a, T b, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</argsstring>
        <name>approx_eq</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T</type>
          <declname>epsilon</declname>
          <defval><ref refid="cpp/types/numeric_limits" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::numeric_limits</ref>&lt; T &gt;::epsilon()</defval>
        </param>
        <briefdescription>
<para>Returns true if numbers are approximately equal within given epsilon. </para>
        </briefdescription>
        <detaileddescription>
<para>Compares floating point values using formula <computeroutput>|a - b| &lt;= epsilon * epsilon_factor</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Epsilon factor for comparison. Default is <computeroutput><ref refid="cpp/types/numeric_limits/epsilon" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::numeric_limits&lt;T&gt;::epsilon()</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if numbers are approximately equal within given epsilon. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1ab3a5a941d1f40a4960f8090e98c680d9" kindref="member">is_null</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="158" column="7" bodyfile="rolly/math.h" bodystart="158" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1ab3a5a941d1f40a4960f8090e98c680d9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::math::is_null</definition>
        <argsstring>(T a, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</argsstring>
        <name>is_null</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>epsilon</declname>
          <defval><ref refid="cpp/types/numeric_limits" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::numeric_limits</ref>&lt; T &gt;::epsilon()</defval>
        </param>
        <briefdescription>
<para>Returns true if number is approximately zero within given epsilon. </para>
        </briefdescription>
        <detaileddescription>
<para>Compares floating point values using formula <computeroutput>|a| &lt;= epsilon * epsilon_factor</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Number type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Epsilon factor for comparison. Default is <computeroutput><ref refid="cpp/types/numeric_limits/epsilon" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::numeric_limits&lt;T&gt;::epsilon()</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if number is zero within given epsilon. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1math_1a3ac3258dd6ee92741399970d50868c2e" kindref="member">approx_eq</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="177" column="21" bodyfile="rolly/math.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a241b7b3a3e1ba6ed1cfe08d1367b77ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::num</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T rolly::math::div_euclid</definition>
        <argsstring>(T a, T b)</argsstring>
        <name>div_euclid</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Calculates Euclidean division, the matching method for <bold>rem_euclid</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Dividend </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="191" column="8" bodyfile="rolly/math.h" bodystart="191" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1math_1a7209b4640ac965aaa277f6d2d2fb017d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>concepts::num</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T rolly::math::rem_euclid</definition>
        <argsstring>(T a, T b)</argsstring>
        <name>rem_euclid</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Calculates the least nonnegative remainder of <computeroutput>self (mod rhs)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Dividend </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/math.h" line="213" column="8" bodyfile="rolly/math.h" bodystart="213" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aabeeaf9aa00d84c95bb09cfd5fd20941" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/memory/observer_ptr.h" line="220" column="18" bodyfile="rolly/memory/observer_ptr.h" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1acd9c29fd1dfc4acb916584a7107c22be" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/memory/observer_ptr.h" line="225" column="18" bodyfile="rolly/memory/observer_ptr.h" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ab1df93f72b112c11789cfac379ddee96" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/memory/observer_ptr.h" line="230" column="13" bodyfile="rolly/memory/observer_ptr.h" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1acee4f46a0677c1eec00cb57737ecb713" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/memory/observer_ptr.h" line="235" column="18" bodyfile="rolly/memory/observer_ptr.h" bodystart="235" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a7a824308dfef800197ebdca72ca577de" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/memory/observer_ptr.h" line="240" column="13" bodyfile="rolly/memory/observer_ptr.h" bodystart="240" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a563f446fdf15d40728b98c5153cb8632" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/memory/observer_ptr.h" line="245" column="18" bodyfile="rolly/memory/observer_ptr.h" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a7c4d06266a7101dad5226fe5f296354b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classrolly_1_1observer__ptr" kindref="compound">observer_ptr</ref>&lt; T &gt;</type>
        <definition>constexpr observer_ptr&lt;T&gt; rolly::make_observer</definition>
        <argsstring>(T *ptr) noexcept</argsstring>
        <name>make_observer</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/memory/observer_ptr.h" line="250" column="27" bodyfile="rolly/memory/observer_ptr.h" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a61af90f5a9761bd2b28c0166c1777ac7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>::QString</type>
        <definition>::QString rolly::qformat</definition>
        <argsstring>(fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args)</argsstring>
        <name>qformat</name>
        <param>
          <type>fmt::format_string&lt; Args... &gt;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/qt/format.h" line="36" column="21" bodyfile="rolly/qt/format.h" bodystart="36" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1a8a8efad40133d1a3b2f4bf784ac9d7a4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>::QString</type>
        <definition>::QString rolly::literals::operator&quot;&quot;_qs</definition>
        <argsstring>(char16_t const *str, std::size_t size) noexcept</argsstring>
        <name>operator&quot;&quot;_qs</name>
        <param>
          <type>char16_t const *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="cpp/types/size_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/qt/literals.h" line="13" column="7" bodyfile="rolly/qt/literals.h" bodystart="13" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1a4f9c6921ea6ed3cf7b672ffc7aae74ac" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>::QUrl</type>
        <definition>::QUrl rolly::literals::operator&quot;&quot;_qurl</definition>
        <argsstring>(char16_t const *str, std::size_t size) noexcept</argsstring>
        <name>operator&quot;&quot;_qurl</name>
        <param>
          <type>char16_t const *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="cpp/types/size_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/qt/literals.h" line="23" column="20" bodyfile="rolly/qt/literals.h" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a862fc8debabdcf89cfbecdeaa41c8798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class E</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::basic_ostream</ref>&lt; E, T &gt; &amp;</type>
        <definition>std::basic_ostream&lt;E, T&gt;&amp; rolly::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; E, T &gt; &amp;os, source_location const &amp;loc)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::basic_ostream</ref>&lt; E, T &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1source__location" kindref="compound">source_location</ref> const &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Stream operator for <ref refid="structrolly_1_1source__location" kindref="compound">source_location</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/source_location.h" line="1" column="0" bodyfile="rolly/source_location.h" bodystart="123" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ac8e7afed7eafff55cdb28549abe23c74" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rolly::operator==</definition>
        <argsstring>(source_location const &amp;lhs, source_location const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structrolly_1_1source__location" kindref="compound">source_location</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1source__location" kindref="compound">source_location</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/source_location.h" line="136" column="15" bodyfile="rolly/source_location.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ae7474ad0df463e7fc1cb98605706c3bb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rolly::operator!=</definition>
        <argsstring>(source_location const &amp;lhs, source_location const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structrolly_1_1source__location" kindref="compound">source_location</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1source__location" kindref="compound">source_location</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/source_location.h" line="141" column="15" bodyfile="rolly/source_location.h" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a9d0a17c2da385b9fdd03560792c0bab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>std::vector&lt;std::string&gt; rolly::split</definition>
        <argsstring>(std::string const &amp;input)</argsstring>
        <name>split</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="8" column="16" declfile="rolly/string_util.h" declline="8" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a4fffede0e041c8ac069640149b823f35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>std::vector&lt;std::string&gt; rolly::split</definition>
        <argsstring>(std::string_view input)</argsstring>
        <name>split</name>
        <param>
          <type>std::string_view</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="9" column="16" declfile="rolly/string_util.h" declline="9" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a3550c846d77c5b1c9a9c85b5b588d890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>std::vector&lt;std::string&gt; rolly::split_by</definition>
        <argsstring>(std::string const &amp;input, char delimiter)</argsstring>
        <name>split_by</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="11" column="16" declfile="rolly/string_util.h" declline="11" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ab2f4183b11c82cc7bad02825b8e74717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>std::vector&lt;std::string&gt; rolly::split_by</definition>
        <argsstring>(std::string_view input, char delimiter)</argsstring>
        <name>split_by</name>
        <param>
          <type>std::string_view</type>
          <declname>input</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="12" column="16" declfile="rolly/string_util.h" declline="12" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a4cee505f1280fd2a0f8354e2efd7fd01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string rolly::to_lower</definition>
        <argsstring>(std::string_view input)</argsstring>
        <name>to_lower</name>
        <param>
          <type>std::string_view</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="14" column="16" declfile="rolly/string_util.h" declline="14" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a92f9cae32654fc69e69e56418a20c551" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::starts_with</definition>
        <argsstring>(std::basic_string&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</argsstring>
        <name>starts_with</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::basic_string</ref>&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::basic_string_view&lt; C &gt;</type>
          <declname>sv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="17" column="8" bodyfile="rolly/string_util.h" bodystart="17" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a7f7b41082b35952624e4871f8ae855ed" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::starts_with</definition>
        <argsstring>(std::basic_string&lt; C &gt; const &amp;input, C c) noexcept</argsstring>
        <name>starts_with</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::basic_string</ref>&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="22" column="8" bodyfile="rolly/string_util.h" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a9adf9e794ef1d06475cdfd66dd6a6b57" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::starts_with</definition>
        <argsstring>(std::basic_string&lt; C &gt; const &amp;input, C const *chp) noexcept</argsstring>
        <name>starts_with</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::basic_string</ref>&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>C const *</type>
          <declname>chp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="27" column="8" bodyfile="rolly/string_util.h" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a52f0f95f66a33f7d0b9198eaa16d5443" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::starts_with</definition>
        <argsstring>(std::basic_string_view&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</argsstring>
        <name>starts_with</name>
        <param>
          <type>std::basic_string_view&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::basic_string_view&lt; C &gt;</type>
          <declname>sv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="32" column="8" bodyfile="rolly/string_util.h" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a14d506298003ef35c958fe68476f4066" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::starts_with</definition>
        <argsstring>(std::basic_string_view&lt; C &gt; const &amp;input, C c) noexcept</argsstring>
        <name>starts_with</name>
        <param>
          <type>std::basic_string_view&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="37" column="8" bodyfile="rolly/string_util.h" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a1ca483b4bf62bac4fa78ebf1c7795c04" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::starts_with</definition>
        <argsstring>(std::basic_string_view&lt; C &gt; const &amp;input, C const *chp) noexcept</argsstring>
        <name>starts_with</name>
        <param>
          <type>std::basic_string_view&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>C const *</type>
          <declname>chp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="42" column="8" bodyfile="rolly/string_util.h" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aea74ed9754268ce0924b9578ff6cd02c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::ends_with</definition>
        <argsstring>(std::basic_string&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</argsstring>
        <name>ends_with</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::basic_string</ref>&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::basic_string_view&lt; C &gt;</type>
          <declname>sv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="47" column="8" bodyfile="rolly/string_util.h" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a0d34216c96023f88cd65d547a38b1616" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::ends_with</definition>
        <argsstring>(std::basic_string&lt; C &gt; const &amp;input, C c) noexcept</argsstring>
        <name>ends_with</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::basic_string</ref>&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="52" column="8" bodyfile="rolly/string_util.h" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1acddd0f67ccfd58a04d5321b3dc5647ee" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::ends_with</definition>
        <argsstring>(std::basic_string&lt; C &gt; const &amp;input, C const *chp) noexcept</argsstring>
        <name>ends_with</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::basic_string</ref>&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>C const *</type>
          <declname>chp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="57" column="8" bodyfile="rolly/string_util.h" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a933cca7a9de88df2acc76cc8a2f3d488" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::ends_with</definition>
        <argsstring>(std::basic_string_view&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</argsstring>
        <name>ends_with</name>
        <param>
          <type>std::basic_string_view&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::basic_string_view&lt; C &gt;</type>
          <declname>sv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="62" column="8" bodyfile="rolly/string_util.h" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a03f2f18b9050b2aa9a69a73fed3806c4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::ends_with</definition>
        <argsstring>(std::basic_string_view&lt; C &gt; const &amp;input, C c) noexcept</argsstring>
        <name>ends_with</name>
        <param>
          <type>std::basic_string_view&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="67" column="8" bodyfile="rolly/string_util.h" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a1c635fda25cb408b341062ad44576c45" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rolly::ends_with</definition>
        <argsstring>(std::basic_string_view&lt; C &gt; const &amp;input, C const *chp) noexcept</argsstring>
        <name>ends_with</name>
        <param>
          <type>std::basic_string_view&lt; C &gt; const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>C const *</type>
          <declname>chp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/string_util.h" line="72" column="8" bodyfile="rolly/string_util.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1adcd4361bfe366803ba692d748c203b47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrolly_1_1types_1_1guid" kindref="compound">types::guid</ref></type>
        <definition>types::guid rolly::literals::operator&quot;&quot;_guid</definition>
        <argsstring>(char const *str, [[maybe_unused]] std::size_t unused)</argsstring>
        <name>operator&quot;&quot;_guid</name>
        <param>
          <type>char const *</type>
          <declname>str</declname>
        </param>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] <ref refid="cpp/types/size_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::size_t</ref></type>
          <declname>unused</declname>
        </param>
        <briefdescription>
<para>Literal operator for <computeroutput>guid</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String representation of the <computeroutput>guid</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>guid</computeroutput> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/guid.h" line="159" column="24" bodyfile="rolly/types/guid.h" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ae42bed75bde5f4d4e4c715b00c5cdec5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compares two optional objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1346" column="25" bodyfile="rolly/types/optional.h" bodystart="1346" bodyend="1348"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aaeabd0a43849c96e6a189456e64a9e80" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1351" column="25" bodyfile="rolly/types/optional.h" bodystart="1351" bodyend="1353"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aa200248ad0ba62c49766a7f23f0ab244" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1356" column="20" bodyfile="rolly/types/optional.h" bodystart="1356" bodyend="1358"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a198e1526e34437f608e39bf6b3b77f28" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1361" column="25" bodyfile="rolly/types/optional.h" bodystart="1361" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aeb7fb289dc87f67607f0f9cd76de2fba" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1366" column="20" bodyfile="rolly/types/optional.h" bodystart="1366" bodyend="1368"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aa469315a3b3d370d5b2e586cb681b11d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1371" column="25" bodyfile="rolly/types/optional.h" bodystart="1371" bodyend="1373"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a43e660efbbd21846c0099fd98d7e7974" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
<para>Compares an optional to a <computeroutput>nullopt</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1377" column="25" bodyfile="rolly/types/optional.h" bodystart="1377" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a65f34be32d65e60a6ae72cb06481d041" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1382" column="25" bodyfile="rolly/types/optional.h" bodystart="1382" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a2835f5e825e9642a4ab30e9b80da8832" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1387" column="25" bodyfile="rolly/types/optional.h" bodystart="1387" bodyend="1389"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a137e7622b0b5826d767aa21b10bf8a4c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1392" column="25" bodyfile="rolly/types/optional.h" bodystart="1392" bodyend="1394"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ac4d264d4fa3093b68a6fbc5d8b864beb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;, nullopt_t) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1397" column="20" bodyfile="rolly/types/optional.h" bodystart="1397" bodyend="1399"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1acb7364ea0a1e0438ae84214ced329b4d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1402" column="20" bodyfile="rolly/types/optional.h" bodystart="1402" bodyend="1404"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a17605135b9c4fbe2d0d006d5cb0cb0df" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1407" column="20" bodyfile="rolly/types/optional.h" bodystart="1407" bodyend="1409"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aeb5122e9a208a1d01d21b87705dd8219" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1412" column="20" bodyfile="rolly/types/optional.h" bodystart="1412" bodyend="1414"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ad9721a2da6cd3210b3d12cfba5a02b9d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1417" column="25" bodyfile="rolly/types/optional.h" bodystart="1417" bodyend="1419"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1aee4d261d62ca7e4c397b061c3345ffc0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1422" column="25" bodyfile="rolly/types/optional.h" bodystart="1422" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ab95b1dc683d04c96118a1b6e13862827" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;, nullopt_t) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1427" column="25" bodyfile="rolly/types/optional.h" bodystart="1427" bodyend="1429"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ac32dbce08b465c015066197343543a66" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structrolly_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1432" column="25" bodyfile="rolly/types/optional.h" bodystart="1432" bodyend="1434"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1acb3873114fe93ce619a39084b59b2a2f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compares the optional with a value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1438" column="25" bodyfile="rolly/types/optional.h" bodystart="1438" bodyend="1440"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1adce9e5a2185ca737f529b12e7b115255" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator==</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1443" column="25" bodyfile="rolly/types/optional.h" bodystart="1443" bodyend="1445"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a443a871c46e6e084799f9c8973d9e51f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1448" column="25" bodyfile="rolly/types/optional.h" bodystart="1448" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a584bd404eee977379de223dc0647e348" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator!=</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1453" column="25" bodyfile="rolly/types/optional.h" bodystart="1453" bodyend="1455"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1acc1d8d195c6b5a3493d65e34a9b82e2d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1458" column="20" bodyfile="rolly/types/optional.h" bodystart="1458" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a640100316b3156a07377038175c5e9e2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1463" column="20" bodyfile="rolly/types/optional.h" bodystart="1463" bodyend="1465"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a2829a36208a02c6a07fbb3bf7ea98cde" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1468" column="20" bodyfile="rolly/types/optional.h" bodystart="1468" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ab70c8e8c4439a8be3e5be7b11a880ddc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&lt;=</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1473" column="20" bodyfile="rolly/types/optional.h" bodystart="1473" bodyend="1475"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a8a7913965e6fbab14332eb19133451f3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1478" column="25" bodyfile="rolly/types/optional.h" bodystart="1478" bodyend="1480"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a436961c16e6e95f486b0ed58d9a221bf" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1483" column="25" bodyfile="rolly/types/optional.h" bodystart="1483" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a1b3470d1556c16994c691b0a7af7ee48" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1488" column="25" bodyfile="rolly/types/optional.h" bodystart="1488" bodyend="1490"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1acbd31892e6da85b55b99c07bf005b112" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool rolly::operator&gt;=</definition>
        <argsstring>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>U const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1493" column="25" bodyfile="rolly/types/optional.h" bodystart="1493" bodyend="1495"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ad0cdea02ac170e2603b7a4491036b298" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="cpp/types/is_move_constructible" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_move_constructible</ref>&lt; T &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_swappable&lt; T &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rolly::swap</definition>
        <argsstring>(optional&lt; T &gt; &amp;lhs, optional&lt; T &gt; &amp;rhs) noexcept(noexcept(lhs.swap(rhs)))</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1501" column="8" bodyfile="rolly/types/optional.h" bodystart="1501" bodyend="1503"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a95d13b9563bf751c816a8ccd194410b8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
            <defval>detail::i_am_secret</defval>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class Ret</type>
            <defval>detail::conditional_t&lt;<ref refid="cpp/types/is_same" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::is_same</ref>&lt;T, detail::i_am_secret&gt;::value, detail::decay_t&lt;U&gt;, T&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; Ret &gt;</type>
        <definition>constexpr optional&lt;Ret&gt; rolly::make_optional</definition>
        <argsstring>(U &amp;&amp;v)</argsstring>
        <name>make_optional</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1516" column="29" bodyfile="rolly/types/optional.h" bodystart="1516" bodyend="1518"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ab0f9d87f10324655edd29d2312df8f90" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt;</type>
        <definition>constexpr optional&lt;T&gt; rolly::make_optional</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>make_optional</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1521" column="29" bodyfile="rolly/types/optional.h" bodystart="1521" bodyend="1523"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a2fc860684dfb51f96cef87b70a678076" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; T &gt;</type>
        <definition>constexpr optional&lt;T&gt; rolly::make_optional</definition>
        <argsstring>(std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</argsstring>
        <name>make_optional</name>
        <param>
          <type><ref refid="cpp/utility/initializer_list" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::initializer_list</ref>&lt; U &gt;</type>
          <declname>il</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="1526" column="29" bodyfile="rolly/types/optional.h" bodystart="1526" bodyend="1528"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a4d27def5f33f561207ecbc421b842d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrolly_1_1optional" kindref="compound">optional</ref>&lt; std::decay_t&lt; T &gt; &gt;</type>
        <definition>optional&lt;std::decay_t&lt;T&gt; &gt; rolly::some</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>some</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Wrap a value in an optional. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a helper for creating an optional from a value. It is mostly useful when working with generic code that needs to work with both expected and optional types.</para>
<para><simplesect kind="see"><para><ref refid="namespacerolly_1_1types_1a80f2e5353f29a764733f510a9a2481c9" kindref="member">ok</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1a9365b793fe547271e48fa719a7f4854d" kindref="member">none</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/optional.h" line="2103" column="15" bodyfile="rolly/types/optional.h" bodystart="2103" bodyend="2105"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1types_1a2c2d7fe1f4fcd1432bb6ee51c059306f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>unexpected&lt; std::decay_t&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &gt;</type>
        <definition>unexpected&lt;std::decay_t&lt;std::string&gt; &gt; rolly::types::error</definition>
        <argsstring>(std::string_view format, Args &amp;&amp;... args)</argsstring>
        <name>error</name>
        <param>
          <type>std::string_view</type>
          <declname>format</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Generates an unexpected error object with a formatted error message. </para>
        </briefdescription>
        <detaileddescription>
<para>This function formats an error message using the provided format string and arguments, and returns it wrapped in an <computeroutput>unexpected</computeroutput> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string used to construct the error message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments to format the error message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>unexpected</computeroutput> object containing the formatted error message. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/result.h" line="2657" column="7" bodyfile="rolly/types/result.h" bodystart="2657" bodyend="2661"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1types_1a80f2e5353f29a764733f510a9a2481c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>expected&lt; std::decay_t&lt; T &gt;, <ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>expected&lt;std::decay_t&lt;T&gt;, std::string&gt; rolly::types::ok</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>ok</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Wrap a value in an expected. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a helper for creating an expected from a value. It is mostly useful when working with generic code that needs to work with both expected and optional types.</para>
<para><simplesect kind="see"><para>result </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1types_1a2c2d7fe1f4fcd1432bb6ee51c059306f" kindref="member">error</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/result.h" line="2675" column="15" bodyfile="rolly/types/result.h" bodystart="2675" bodyend="2677"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1types_1a07a110d824e251b17a6bb94f8e4fed5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>result</type>
        <definition>result rolly::types::ok</definition>
        <argsstring>()</argsstring>
        <name>ok</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/result.h" line="2679" column="14" bodyfile="rolly/types/result.h" bodystart="2679" bodyend="2679"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1acf433e8d6e87da7af978d013539d49a1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1a254d32383658e016368673396e7afc1b" kindref="member">u8</ref></type>
        <definition>constexpr u8 rolly::literals::operator&quot;&quot;_u8</definition>
        <argsstring>(ulonglong value)</argsstring>
        <name>operator&quot;&quot;_u8</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a70c2c38542d55bfe51d75907a6c8125a" kindref="member">ulonglong</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Literal operator for <ref refid="namespacerolly_1_1types_1a254d32383658e016368673396e7afc1b" kindref="member">types::u8</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="42" column="18" bodyfile="rolly/types/stdint.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1aa51af4429132793804e7cbd58cbbb475" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1a917e58b0692c2df778a27350534cbfe7" kindref="member">u16</ref></type>
        <definition>constexpr u16 rolly::literals::operator&quot;&quot;_u16</definition>
        <argsstring>(ulonglong value)</argsstring>
        <name>operator&quot;&quot;_u16</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a70c2c38542d55bfe51d75907a6c8125a" kindref="member">ulonglong</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Literal operator for <ref refid="namespacerolly_1_1types_1a917e58b0692c2df778a27350534cbfe7" kindref="member">types::u16</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="47" column="19" bodyfile="rolly/types/stdint.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1a504d921fb134987c823035c51e67b34e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1a65cf28726f89e62ccf2f1354bc2716df" kindref="member">u32</ref></type>
        <definition>constexpr u32 rolly::literals::operator&quot;&quot;_u32</definition>
        <argsstring>(ulonglong value)</argsstring>
        <name>operator&quot;&quot;_u32</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a70c2c38542d55bfe51d75907a6c8125a" kindref="member">ulonglong</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Literal operator for <ref refid="namespacerolly_1_1types_1a65cf28726f89e62ccf2f1354bc2716df" kindref="member">types::u32</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="52" column="19" bodyfile="rolly/types/stdint.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1aa1cfc025562a8f6fc45ebc2e8b3cea61" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1a66e1d499241ccae9a18a20a1f4f0590d" kindref="member">u64</ref></type>
        <definition>constexpr u64 rolly::literals::operator&quot;&quot;_u64</definition>
        <argsstring>(ulonglong value)</argsstring>
        <name>operator&quot;&quot;_u64</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a70c2c38542d55bfe51d75907a6c8125a" kindref="member">ulonglong</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Literal operator for <ref refid="namespacerolly_1_1types_1a66e1d499241ccae9a18a20a1f4f0590d" kindref="member">types::u64</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="57" column="19" bodyfile="rolly/types/stdint.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1af611e64610df729a9e1872568d1099d6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1a090e14ab721404d80f4404634d5c79cc" kindref="member">i8</ref></type>
        <definition>constexpr i8 rolly::literals::operator&quot;&quot;_i8</definition>
        <argsstring>(ulonglong value)</argsstring>
        <name>operator&quot;&quot;_i8</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a70c2c38542d55bfe51d75907a6c8125a" kindref="member">ulonglong</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Literal operator for <ref refid="namespacerolly_1_1types_1a090e14ab721404d80f4404634d5c79cc" kindref="member">types::i8</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="62" column="18" bodyfile="rolly/types/stdint.h" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1a438692acf067c10b44fdbf9eed97622c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1aa9061c03e78b5c69a2e90542f956b1b9" kindref="member">i16</ref></type>
        <definition>constexpr i16 rolly::literals::operator&quot;&quot;_i16</definition>
        <argsstring>(ulonglong value)</argsstring>
        <name>operator&quot;&quot;_i16</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a70c2c38542d55bfe51d75907a6c8125a" kindref="member">ulonglong</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Literal operator for <ref refid="namespacerolly_1_1types_1aa9061c03e78b5c69a2e90542f956b1b9" kindref="member">types::i16</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="67" column="19" bodyfile="rolly/types/stdint.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1a61c21310574460f54b6148ff6c42fe51" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1aec4a1429cc91fb7ff41599b263c348cc" kindref="member">i32</ref></type>
        <definition>constexpr i32 rolly::literals::operator&quot;&quot;_i32</definition>
        <argsstring>(ulonglong value)</argsstring>
        <name>operator&quot;&quot;_i32</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a70c2c38542d55bfe51d75907a6c8125a" kindref="member">ulonglong</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Literal operator for <ref refid="namespacerolly_1_1types_1aec4a1429cc91fb7ff41599b263c348cc" kindref="member">types::i32</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="72" column="19" bodyfile="rolly/types/stdint.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1a1bcd1df8f709d31ff1cc06e3d2929517" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacerolly_1_1types_1ae72e52134285dbd83ca4227ec77394a2" kindref="member">i64</ref></type>
        <definition>constexpr i64 rolly::literals::operator&quot;&quot;_i64</definition>
        <argsstring>(ulonglong value)</argsstring>
        <name>operator&quot;&quot;_i64</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a70c2c38542d55bfe51d75907a6c8125a" kindref="member">ulonglong</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Literal operator for <ref refid="namespacerolly_1_1types_1ae72e52134285dbd83ca4227ec77394a2" kindref="member">types::i64</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="77" column="19" bodyfile="rolly/types/stdint.h" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1ab825871c5237ddc75b7179443db597cd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="cpp/types/ptrdiff_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::ptrdiff_t</ref></type>
        <definition>constexpr std::ptrdiff_t rolly::literals::operator&quot;&quot;_ptrdiff</definition>
        <argsstring>(ulonglong value)</argsstring>
        <name>operator&quot;&quot;_ptrdiff</name>
        <param>
          <type><ref refid="namespacerolly_1_1types_1a70c2c38542d55bfe51d75907a6c8125a" kindref="member">ulonglong</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Literal operator for <computeroutput><ref refid="cpp/types/ptrdiff_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::ptrdiff_t</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="82" column="30" bodyfile="rolly/types/stdint.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1literals_1aa48d1bac5b89868b7197a9c87a1c3ce2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* rolly::literals::operator&quot;&quot;_pvoid</definition>
        <argsstring>(unsigned long long value)</argsstring>
        <name>operator&quot;&quot;_pvoid</name>
        <param>
          <type>unsigned long long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Literal operator for <computeroutput>void*</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This operator is not constexpr. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/types/stdint.h" line="92" column="17" bodyfile="rolly/types/stdint.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a50d147e6e631344b3cde7c0675356297" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::unreachable</definition>
        <argsstring>()</argsstring>
        <name>unreachable</name>
        <briefdescription>
<para>Informs the compiler that the current location is unreachable. </para>
        </briefdescription>
        <detaileddescription>
<para>If the compiler can prove that the current location is unreachable, it is free to optimize the program as if the current location did not exist. This is a very powerful optimization hint.</para>
<para>This function is very useful when you write code that should never be executed (for example, in a switch-case statement where you have already handled all possible values), as it allows the compiler to optimize away the unreachable code.</para>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Color<sp/>{<sp/>Red,<sp/>Green,<sp/>Blue<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacerolly_1abed9db28b478cd89e3f00adba8f6632a" kindref="member">to_string</ref>(Color<sp/>c)<sp/>-&gt;<sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Red:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Green:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Blue:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><ref refid="namespacerolly_1a50d147e6e631344b3cde7c0675356297" kindref="member">rolly::unreachable</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="warning"><para>Be sure to use this with care, as it can lead to undefined behavior. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://en.cppreference.com/w/cpp/utility/unreachable">https://en.cppreference.com/w/cpp/utility/unreachable</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="34" column="16" bodyfile="rolly/utility.h" bodystart="34" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1affa14ea3afee7f187363d2bb66d8c619" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(concepts::enum_) T ___sfinae_requirement___(std::is_enum_v&lt; T &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto rolly::to_underlying</definition>
        <argsstring>(T t) noexcept</argsstring>
        <name>to_underlying</name>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Converts an enumeration value to its underlying type. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience function for converting an enumeration value to its underlying type. It is a generic version of the C++23 std::to_underlying function. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The enumeration type. Must be an enumeration type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The enumeration value to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The underlying value of the enumeration. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://en.cppreference.com/w/cpp/utility/to_underlying">https://en.cppreference.com/w/cpp/utility/to_underlying</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="52" column="18" bodyfile="rolly/utility.h" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1abf3ef4a99974a2fcedfe0ac54b5ce08b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::operator|</definition>
        <argsstring>(T const lhs, T const rhs) noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>T const</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Generic bitwise <bold>or</bold> operator for enum types. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires opt-ins <computeroutput>enable_bitwise_or</computeroutput> or <computeroutput>enum_flag</computeroutput> to be defined for the enum type.</para>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Example<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A<sp/>=<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>B<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C<sp/>=<sp/>4</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>opt-in<sp/>bitwise<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enable_bitwise_or(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternatively,<sp/>opt-in<sp/>all<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enum_flag(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>Example::A<sp/>|<sp/>Example::B;</highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Left operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Right operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of bitwise or operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="89" column="15" bodyfile="rolly/utility.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a465d8eeb6dc8eb48d3dbcc894577fc01" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::operator&amp;</definition>
        <argsstring>(T const lhs, T const rhs) noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>T const</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Generic bitwise <bold>and</bold> operator for enum types. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires opt-ins <computeroutput>enable_bitwise_and</computeroutput> or <computeroutput>enum_flag</computeroutput> to be defined for the enum type.</para>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Example<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A<sp/>=<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>B<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C<sp/>=<sp/>4</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>opt-in<sp/>bitwise<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enable_bitwise_and(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternatively,<sp/>opt-in<sp/>all<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enum_flag(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>Example::A<sp/>&amp;<sp/>Example::B;</highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Left operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Right operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of bitwise and operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="126" column="15" bodyfile="rolly/utility.h" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a93cbb2ec6fa2e2831cc8f031e5e2643b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::operator^</definition>
        <argsstring>(T const lhs, T const rhs) noexcept</argsstring>
        <name>operator^</name>
        <param>
          <type>T const</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Generic bitwise <bold>xor</bold> operator for enum types. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires opt-ins <computeroutput>enable_bitwise_xor</computeroutput> or <computeroutput>enum_flag</computeroutput> to be defined for the enum type.</para>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Example<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A<sp/>=<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>B<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C<sp/>=<sp/>4</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>opt-in<sp/>bitwise<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enable_bitwise_xor(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternatively,<sp/>opt-in<sp/>all<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enum_flag(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>Example::A<sp/>^<sp/>Example::B;</highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Left operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Right operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of bitwise xor operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="163" column="15" bodyfile="rolly/utility.h" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a73fb6abc29e2a6fc0e6a4f71f4500a79" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T rolly::operator~</definition>
        <argsstring>(T const value) noexcept</argsstring>
        <name>operator~</name>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Generic bitwise <bold>not</bold> operator for enum types. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires opt-ins <computeroutput>enable_bitwise_not</computeroutput> or <computeroutput>enum_flag</computeroutput> to be defined for the enum type.</para>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Example<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A<sp/>=<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>B<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C<sp/>=<sp/>4</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>opt-in<sp/>bitwise<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enable_bitwise_not(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternatively,<sp/>opt-in<sp/>all<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enum_flag(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>~Example::A;</highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Left operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Right operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of bitwise not operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="200" column="15" bodyfile="rolly/utility.h" bodystart="200" bodyend="202"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Main namespace for the <bold>rolly</bold> library. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="rolly/bit.h" line="26" column="15"/>
  </compounddef>
</doxygen>
