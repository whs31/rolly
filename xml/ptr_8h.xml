<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ptr_8h" kind="file" language="C++">
    <compoundname>ptr.h</compoundname>
    <includes local="no">type_traits</includes>
    <includes refid="definitions_8h" local="yes">../global/definitions.h</includes>
    <includedby refid="concepts_8h" local="yes">concepts.h</includedby>
    <includedby refid="box_8h" local="yes">box.h</includedby>
    <includedby refid="owner_8h" local="yes">owner.h</includedby>
    <includedby refid="propagate__const_8h" local="yes">propagate_const.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>export.h</label>
        <link refid="export_8h_source"/>
      </node>
      <node id="5">
        <label>platform_definitions.h</label>
        <link refid="platform__definitions_8h_source"/>
      </node>
      <node id="3">
        <label>../global/definitions.h</label>
        <link refid="definitions_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ptr.h</label>
        <link refid="ptr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="9">
        <label>owner.h</label>
        <link refid="owner_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>traits.h</label>
        <link refid="traits_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pimpl.h</label>
        <link refid="pimpl_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>propagate_const.h</label>
        <link refid="propagate__const_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>memory.h</label>
        <link refid="memory_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>box.h</label>
        <link refid="box_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ptr.h</label>
        <link refid="ptr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>observer_ptr.h</label>
        <link refid="observer__ptr_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>concepts.h</label>
        <link refid="concepts_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>rolly.h</label>
        <link refid="rolly_8h_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacerolly">rolly</innernamespace>
    <innernamespace refid="namespacerolly_1_1concepts">rolly::concepts</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacerolly_1_1concepts_1ab11672aee126fbc1d72aa1d291083b25" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <initializer>= std::is_pointer_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Pointer concept. </para>
        </briefdescription>
        <detaileddescription>
<para>Will yield <computeroutput>true</computeroutput> for any type that is a pointer or reference.</para>
<para>Note that this concept will be evaluated to <computeroutput>false</computeroutput> for function pointers, <computeroutput><ref refid="cpp/types/nullptr_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::nullptr_t</ref></computeroutput> and smart pointers. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Available only in C++20 mode. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1concepts_1a24803776179d4c83561a9694a844d2c6" kindref="member">c_ptr</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1concepts_1abed47d96e090d873adc3791a1733dd43" kindref="member">smart_ptr</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1concepts_1a70606b9cb7fe0186e2e3c0fe8e05d9f6" kindref="member">ptr_like</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/concepts/ptr.h" line="25" column="11" bodyfile="rolly/concepts/ptr.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1_1concepts_1a24803776179d4c83561a9694a844d2c6" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept c_ptr</definition>
        <argsstring></argsstring>
        <name>c_ptr</name>
        <initializer>= std::is_pointer_v&lt;T&gt; and not std::is_reference_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Raw pointer concept. </para>
        </briefdescription>
        <detaileddescription>
<para>Will yield <computeroutput>true</computeroutput> for any type that is a raw pointer <bold>and not a reference</bold>.</para>
<para>Note that this concept will be evaluated to <computeroutput>false</computeroutput> for function pointers, <computeroutput><ref refid="cpp/types/nullptr_t" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::nullptr_t</ref></computeroutput>, <bold>references</bold> and smart pointers. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Available only in C++20 mode. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1concepts_1ab11672aee126fbc1d72aa1d291083b25" kindref="member">ptr</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1concepts_1abed47d96e090d873adc3791a1733dd43" kindref="member">smart_ptr</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1concepts_1a70606b9cb7fe0186e2e3c0fe8e05d9f6" kindref="member">ptr_like</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/concepts/ptr.h" line="41" column="11" bodyfile="rolly/concepts/ptr.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1_1concepts_1abed47d96e090d873adc3791a1733dd43" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept smart_ptr</definition>
        <argsstring></argsstring>
        <name>smart_ptr</name>
        <initializer>= requires(T t) {
    { *t };
    { static_cast&lt;bool&gt;(t) };
    { t.operator-&gt;() } -&gt; std::convertible_to&lt;decltype(&amp;*t)&gt;;
    { t.get() } -&gt; std::convertible_to&lt;decltype(&amp;*t)&gt;;
  }</initializer>
        <briefdescription>
<para>Smart pointer concept. </para>
        </briefdescription>
        <detaileddescription>
<para>Will yield <computeroutput>true</computeroutput> for any type that is a smart pointer.</para>
<para>Requirements: <itemizedlist>
<listitem>
<para>Can be dereferenced </para>
</listitem>
<listitem>
<para>Can be converted to <computeroutput>bool</computeroutput> </para>
</listitem>
<listitem>
<para>Operator <computeroutput>operator-&gt;</computeroutput> must return a pointer of the same type as the dereferenced pointer </para>
</listitem>
<listitem>
<para>Method <computeroutput>get</computeroutput> must return the same type as the dereferenced pointer </para>
</listitem>
</itemizedlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Available only in C++20 mode. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1concepts_1ab11672aee126fbc1d72aa1d291083b25" kindref="member">ptr</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1concepts_1a70606b9cb7fe0186e2e3c0fe8e05d9f6" kindref="member">ptr_like</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/concepts/ptr.h" line="61" column="11" bodyfile="rolly/concepts/ptr.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerolly_1_1concepts_1a70606b9cb7fe0186e2e3c0fe8e05d9f6" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept ptr_like</definition>
        <argsstring></argsstring>
        <name>ptr_like</name>
        <initializer>= ptr&lt;T&gt; or smart_ptr&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that is true if T is a pointer or smart pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Available only in C++20 mode. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1concepts_1ab11672aee126fbc1d72aa1d291083b25" kindref="member">ptr</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1concepts_1abed47d96e090d873adc3791a1733dd43" kindref="member">smart_ptr</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/concepts/ptr.h" line="76" column="11" bodyfile="rolly/concepts/ptr.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="rolly/concepts/ptr.h"/>
  </compounddef>
</doxygen>
