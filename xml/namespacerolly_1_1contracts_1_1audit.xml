<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacerolly_1_1contracts_1_1audit" kind="namespace" language="C++">
    <compoundname>rolly::contracts::audit</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a7e49ec735d033ca6f6da7652f78c4a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::invariant</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Invariant violated&quot;,)</argsstring>
        <name>invariant</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Invariant violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>invariant</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <simplesect kind="note"><para>The expression is only evaluated in debug mode. In release mode this function is a no-op. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Invariant expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Invariant violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a90bd93c4cbe4a541b3398ee95ed17505" kindref="member">broken_invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a6c79fd5607d45e582936442da6e322f4" kindref="member">precondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a9cf84ba57be583af6f5a3972047d8416" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="356" column="7" bodyfile="include/rolly/contracts.h" bodystart="356" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a6c79fd5607d45e582936442da6e322f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::precondition</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Precondition violated&quot;,)</argsstring>
        <name>precondition</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Precondition violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>precondition</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <simplesect kind="note"><para>The expression is only evaluated in debug mode. In release mode this function is a no-op. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Precondition expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Precondition violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation location in source code. Defaults to current location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a5bf2bc45f46e47e578f2defd5d87b52a" kindref="member">broken_precondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a7e49ec735d033ca6f6da7652f78c4a30" kindref="member">invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a9cf84ba57be583af6f5a3972047d8416" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="387" column="7" bodyfile="include/rolly/contracts.h" bodystart="387" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a9cf84ba57be583af6f5a3972047d8416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::postcondition</definition>
        <argsstring>(bool expression, std::string_view message=&quot;Postcondition violated&quot;,)</argsstring>
        <name>postcondition</name>
        <param>
          <type>bool</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Postcondition violated&quot;</defval>
        </param>
        <briefdescription>
<para>Checks if a given <emphasis>postcondition</emphasis> expression is true and throws a contract violation if it is not. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <simplesect kind="note"><para>The expression is only evaluated in debug mode. In release mode this function is a no-op. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para>Postcondition expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Postcondition violated&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a040c855daee4842d4c0caefd701b6607" kindref="member">broken_postcondition</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a7e49ec735d033ca6f6da7652f78c4a30" kindref="member">invariant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a6c79fd5607d45e582936442da6e322f4" kindref="member">precondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="417" column="7" bodyfile="include/rolly/contracts.h" bodystart="417" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a90bd93c4cbe4a541b3398ee95ed17505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::broken_invariant</definition>
        <argsstring>(std::string_view message=&quot;Broken invariant&quot;,)</argsstring>
        <name>broken_invariant</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken <ref refid="namespacerolly_1_1contracts_1_1audit_1a7e49ec735d033ca6f6da7652f78c4a30" kindref="member">invariant</ref>&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken invariant violation. </para>
        </briefdescription>
        <detaileddescription>
<para>If the expression is false, the contract violation is thrown with the given message and location. <simplesect kind="note"><para>The expression is only evaluated in debug mode. In release mode this function is a no-op. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken invariant&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a7e49ec735d033ca6f6da7652f78c4a30" kindref="member">invariant</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="444" column="12" bodyfile="include/rolly/contracts.h" bodystart="444" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a5bf2bc45f46e47e578f2defd5d87b52a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::broken_precondition</definition>
        <argsstring>(std::string_view message=&quot;Broken precondition&quot;,)</argsstring>
        <name>broken_precondition</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken <ref refid="namespacerolly_1_1contracts_1_1audit_1a6c79fd5607d45e582936442da6e322f4" kindref="member">precondition</ref>&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken precondition violation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken precondition&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a6c79fd5607d45e582936442da6e322f4" kindref="member">precondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="466" column="12" bodyfile="include/rolly/contracts.h" bodystart="466" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a040c855daee4842d4c0caefd701b6607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::broken_postcondition</definition>
        <argsstring>(std::string_view message=&quot;Broken postcondition&quot;,)</argsstring>
        <name>broken_postcondition</name>
        <param>
          <type>std::string_view</type>
          <declname>message</declname>
          <defval>&quot;Broken <ref refid="namespacerolly_1_1contracts_1_1audit_1a9cf84ba57be583af6f5a3972047d8416" kindref="member">postcondition</ref>&quot;</defval>
        </param>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken postcondition violation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Violation message. Defaults to <computeroutput>&quot;Broken postcondition&quot;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a9cf84ba57be583af6f5a3972047d8416" kindref="member">postcondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="488" column="12" bodyfile="include/rolly/contracts.h" bodystart="488" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1_1contracts_1_1audit_1a123d98f0454da1fde978fa21ec6dd5e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::contracts::audit::not_implemented</definition>
        <argsstring>()</argsstring>
        <name>not_implemented</name>
        <briefdescription>
<para>Invokes the global contract violation handler (see <ref refid="namespacerolly_1_1contracts_1aecea849c17224c0824619ce3e30c5f8b" kindref="member">violation_handler</ref>) with a broken invariant violation. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for marking a function as <emphasis>unimplemented</emphasis>. <simplesect kind="note"><para>The expression is only evaluated in debug mode. In release mode this function is a no-op. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacerolly_1_1contracts_1_1audit_1a7e49ec735d033ca6f6da7652f78c4a30" kindref="member">invariant</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rolly/contracts.h" line="511" column="12" bodyfile="include/rolly/contracts.h" bodystart="511" bodyend="517"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contracts that will be only executed in debug mode. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/rolly/contracts.h" line="341" column="17"/>
  </compounddef>
</doxygen>
