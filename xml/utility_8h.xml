<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="utility_8h" kind="file" language="C++">
    <compoundname>utility.h</compoundname>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes refid="enum_8h" local="yes">concepts/enum.h</includes>
    <includedby refid="prelude_8h" local="yes">prelude.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>export.h</label>
        <link refid="export_8h"/>
      </node>
      <node id="1">
        <label>utility.h</label>
        <link refid="utility_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>platform_definitions.h</label>
        <link refid="platform__definitions_8h_source"/>
      </node>
      <node id="5">
        <label>../global/definitions.h</label>
        <link refid="definitions_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>utility</label>
      </node>
      <node id="4">
        <label>concepts/enum.h</label>
        <link refid="enum_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>../type_traits.h</label>
        <link refid="type__traits_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>utility.h</label>
        <link refid="utility_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>prelude.h</label>
        <link refid="prelude_8h_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacerolly">rolly</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacerolly_1ab57bc985e0598a50255c0a376299d7b4" prot="public" static="no" mutable="no">
        <type>const T rhs</type>
        <definition>const T rhs noexcept</definition>
        <argsstring></argsstring>
        <name>noexcept</name>
        <initializer>{
    return static_cast&lt;T&gt;(to_underlying(lhs) | to_underlying(rhs))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="89" column="30" bodyfile="rolly/utility.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacerolly_1a50d147e6e631344b3cde7c0675356297" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rolly::unreachable</definition>
        <argsstring>()</argsstring>
        <name>unreachable</name>
        <briefdescription>
<para>Informs the compiler that the current location is unreachable. </para>
        </briefdescription>
        <detaileddescription>
<para>If the compiler can prove that the current location is unreachable, it is free to optimize the program as if the current location did not exist. This is a very powerful optimization hint.</para>
<para>This function is very useful when you write code that should never be executed (for example, in a switch-case statement where you have already handled all possible values), as it allows the compiler to optimize away the unreachable code.</para>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Color<sp/>{<sp/>Red,<sp/>Green,<sp/>Blue<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacerolly_1abed9db28b478cd89e3f00adba8f6632a" kindref="member">to_string</ref>(Color<sp/>c)<sp/>-&gt;<sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/home/runner/work/rolly/rolly/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Red:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Green:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Blue:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><ref refid="namespacerolly_1a50d147e6e631344b3cde7c0675356297" kindref="member">rolly::unreachable</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="warning"><para>Be sure to use this with care, as it can lead to undefined behavior. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://en.cppreference.com/w/cpp/utility/unreachable">https://en.cppreference.com/w/cpp/utility/unreachable</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="34" column="16" bodyfile="rolly/utility.h" bodystart="34" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1affa14ea3afee7f187363d2bb66d8c619" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>___concept___(concepts::enum_) T ___sfinae_requirement___(std::is_enum_v&lt; T &gt;)</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto rolly::to_underlying</definition>
        <argsstring>(T t) noexcept</argsstring>
        <name>to_underlying</name>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Converts an enumeration value to its underlying type. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience function for converting an enumeration value to its underlying type. It is a generic version of the C++23 std::to_underlying function. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The enumeration type. Must be an enumeration type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The enumeration value to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The underlying value of the enumeration. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://en.cppreference.com/w/cpp/utility/to_underlying">https://en.cppreference.com/w/cpp/utility/to_underlying</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="52" column="18" bodyfile="rolly/utility.h" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a6d52381572c2e07d26fe0f098e415fe5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>rolly::requires</definition>
        <argsstring>(std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_or(e);} or requires(T e) { enum_flag(e);}) const expr T operator|(T const lhs</argsstring>
        <name>requires</name>
        <param>
          <type>std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_or(e);} or requires(T e) { enum_flag(e);}</type>
        </param>
        <briefdescription>
<para>Generic bitwise <bold>or</bold> operator for enum types. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires opt-ins <computeroutput>enable_bitwise_or</computeroutput> or <computeroutput>enum_flag</computeroutput> to be defined for the enum type.</para>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Example<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A<sp/>=<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>B<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C<sp/>=<sp/>4</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>opt-in<sp/>bitwise<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enable_bitwise_or(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternatively,<sp/>opt-in<sp/>all<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enum_flag(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>Example::A<sp/>|<sp/>Example::B;</highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Left operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Right operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of bitwise or operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="84" column="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a20e28b3aab12b53a988da11bc35d96d9" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>rolly::requires</definition>
        <argsstring>(std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_and(e);} or requires(T e) { enum_flag(e);}) const expr T operator&amp;(T const lhs</argsstring>
        <name>requires</name>
        <param>
          <type>std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_and(e);} or requires(T e) { enum_flag(e);}</type>
        </param>
        <briefdescription>
<para>Generic bitwise <bold>and</bold> operator for enum types. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires opt-ins <computeroutput>enable_bitwise_and</computeroutput> or <computeroutput>enum_flag</computeroutput> to be defined for the enum type.</para>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Example<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A<sp/>=<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>B<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C<sp/>=<sp/>4</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>opt-in<sp/>bitwise<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enable_bitwise_and(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternatively,<sp/>opt-in<sp/>all<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enum_flag(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>Example::A<sp/>&amp;<sp/>Example::B;</highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Left operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Right operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of bitwise and operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="121" column="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1a3e3a83dfbd448a580a08b4857294dee3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>rolly::requires</definition>
        <argsstring>(std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_xor(e);} or requires(T e) { enum_flag(e);}) const expr T operator^(T const lhs</argsstring>
        <name>requires</name>
        <param>
          <type>std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_xor(e);} or requires(T e) { enum_flag(e);}</type>
        </param>
        <briefdescription>
<para>Generic bitwise <bold>xor</bold> operator for enum types. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires opt-ins <computeroutput>enable_bitwise_xor</computeroutput> or <computeroutput>enum_flag</computeroutput> to be defined for the enum type.</para>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Example<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A<sp/>=<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>B<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C<sp/>=<sp/>4</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>opt-in<sp/>bitwise<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enable_bitwise_xor(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternatively,<sp/>opt-in<sp/>all<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enum_flag(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>Example::A<sp/>^<sp/>Example::B;</highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Left operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Right operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of bitwise xor operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="158" column="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacerolly_1ab240fea9981964f1f2100d4a7787ca13" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>rolly::requires</definition>
        <argsstring>(std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_not(e);} or requires(T e) { enum_flag(e);}) const expr T operator~(T const value) noexcept</argsstring>
        <name>requires</name>
        <param>
          <type>std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_not(e);} or requires(T e) { enum_flag(e);}</type>
        </param>
        <briefdescription>
<para>Generic bitwise <bold>not</bold> operator for enum types. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires opt-ins <computeroutput>enable_bitwise_not</computeroutput> or <computeroutput>enum_flag</computeroutput> to be defined for the enum type.</para>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Example<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A<sp/>=<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>B<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C<sp/>=<sp/>4</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>opt-in<sp/>bitwise<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enable_bitwise_not(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternatively,<sp/>opt-in<sp/>all<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>consteval<sp/>enum_flag(Example);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>~Example::A;</highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Left operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Right operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of bitwise not operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rolly/utility.h" line="195" column="5" bodyfile="rolly/utility.h" bodystart="195" bodyend="202"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="rolly/utility.h"/>
  </compounddef>
</doxygen>
