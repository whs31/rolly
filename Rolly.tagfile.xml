<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.8">
  <compound kind="file">
    <name>all.h</name>
    <filename>all_8h.html</filename>
    <includes id="bit_8h" name="bit.h" local="no" import="no" module="no" objc="no">rll/bit.h</includes>
    <includes id="concepts_8h" name="concepts.h" local="no" import="no" module="no" objc="no">rll/concepts.h</includes>
    <includes id="contracts_8h" name="contracts.h" local="no" import="no" module="no" objc="no">rll/contracts.h</includes>
    <includes id="crypto_8h" name="crypto.h" local="no" import="no" module="no" objc="no">rll/crypto.h</includes>
    <includes id="directories_8h" name="directories.h" local="no" import="no" module="no" objc="no">rll/directories.h</includes>
    <includes id="fixed__string_8h" name="fixed_string.h" local="no" import="no" module="no" objc="no">rll/fixed_string.h</includes>
    <includes id="functional_8h" name="functional.h" local="no" import="no" module="no" objc="no">rll/functional.h</includes>
    <includes id="global_8h" name="global.h" local="no" import="no" module="no" objc="no">rll/global.h</includes>
    <includes id="library_8h" name="library.h" local="no" import="no" module="no" objc="no">rll/library.h</includes>
    <includes id="math_8h" name="math.h" local="no" import="no" module="no" objc="no">rll/math.h</includes>
    <includes id="memory_8h" name="memory.h" local="no" import="no" module="no" objc="no">rll/memory.h</includes>
    <includes id="net_8h" name="net.h" local="no" import="no" module="no" objc="no">rll/net.h</includes>
    <includes id="numbers_8h" name="numbers.h" local="no" import="no" module="no" objc="no">rll/numbers.h</includes>
    <includes id="optional_8h" name="optional.h" local="no" import="no" module="no" objc="no">rll/optional.h</includes>
    <includes id="result_8h" name="result.h" local="no" import="no" module="no" objc="no">rll/result.h</includes>
    <includes id="rtti_8h" name="rtti.h" local="no" import="no" module="no" objc="no">rll/rtti.h</includes>
    <includes id="savefile_8h" name="savefile.h" local="no" import="no" module="no" objc="no">rll/savefile.h</includes>
    <includes id="serialization_8h" name="serialization.h" local="no" import="no" module="no" objc="no">rll/serialization.h</includes>
    <includes id="source__location_8h" name="source_location.h" local="no" import="no" module="no" objc="no">rll/source_location.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <includes id="string__util_8h" name="string_util.h" local="no" import="no" module="no" objc="no">rll/string_util.h</includes>
    <includes id="traits_8h" name="traits.h" local="no" import="no" module="no" objc="no">rll/traits.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="no" import="no" module="no" objc="no">rll/type_traits.h</includes>
    <includes id="euclid_8h" name="euclid.h" local="no" import="no" module="no" objc="no">rll/euclid.h</includes>
    <includes id="u128_8h" name="u128.h" local="no" import="no" module="no" objc="no">rll/u128.h</includes>
    <includes id="utility_8h" name="utility.h" local="no" import="no" module="no" objc="no">rll/utility.h</includes>
    <includes id="uuid_8h" name="uuid.h" local="no" import="no" module="no" objc="no">rll/uuid.h</includes>
  </compound>
  <compound kind="file">
    <name>bit.h</name>
    <filename>bit_8h.html</filename>
    <includes id="global_8h" name="global.h" local="no" import="no" module="no" objc="no">rll/global.h</includes>
    <includes id="num_8h" name="num.h" local="no" import="no" module="no" objc="no">rll/concepts/num.h</includes>
    <namespace>rll</namespace>
    <member kind="define">
      <type>#define</type>
      <name>___rolly_byteswap16</name>
      <anchorfile>bit_8h.html</anchorfile>
      <anchor>a73644f3cbdf00887a94b718f6ef0054a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___rolly_byteswap32</name>
      <anchorfile>bit_8h.html</anchorfile>
      <anchor>a9b6038988dad05d084ae36c96fcf0f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___rolly_byteswap64</name>
      <anchorfile>bit_8h.html</anchorfile>
      <anchor>aa23cf7e17f975f07efb2fd4bf3c20092</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_LITTLE_ENDIAN</name>
      <anchorfile>bit_8h.html</anchorfile>
      <anchor>a555e8de1342ff872fe8aef85d1866af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_BIG_ENDIAN</name>
      <anchorfile>bit_8h.html</anchorfile>
      <anchor>a746ee531a76a1601b271611b83cadf83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>concepts.h</name>
    <filename>concepts_8h.html</filename>
    <includes id="enum_8h" name="enum.h" local="no" import="no" module="no" objc="no">rll/concepts/enum.h</includes>
    <includes id="num_8h" name="num.h" local="no" import="no" module="no" objc="no">rll/concepts/num.h</includes>
    <includes id="ptr_8h" name="ptr.h" local="no" import="no" module="no" objc="no">rll/concepts/ptr.h</includes>
    <includes id="standard__copyable__and__movable_8h" name="standard_copyable_and_movable.h" local="no" import="no" module="no" objc="no">rll/concepts/standard_copyable_and_movable.h</includes>
    <includes id="threading_8h" name="threading.h" local="no" import="no" module="no" objc="no">rll/concepts/threading.h</includes>
    <includes id="any__of_8h" name="any_of.h" local="no" import="no" module="no" objc="no">rll/concepts/any_of.h</includes>
  </compound>
  <compound kind="file">
    <name>concepts.h</name>
    <filename>qt_2concepts_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
  </compound>
  <compound kind="file">
    <name>any_of.h</name>
    <filename>any__of_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="no" import="no" module="no" objc="no">rll/type_traits.h</includes>
    <class kind="struct">rll::is_any_of</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>enum.h</name>
    <filename>enum_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="no" import="no" module="no" objc="no">rll/type_traits.h</includes>
    <namespace>rll</namespace>
    <concept>rll::enum_</concept>
  </compound>
  <compound kind="file">
    <name>num.h</name>
    <filename>num_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="no" import="no" module="no" objc="no">rll/type_traits.h</includes>
    <class kind="struct">rll::is_num</class>
    <namespace>rll</namespace>
    <concept>rll::num</concept>
  </compound>
  <compound kind="file">
    <name>ptr.h</name>
    <filename>ptr_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <namespace>rll</namespace>
    <concept>rll::ptr</concept>
    <concept>rll::c_ptr</concept>
    <concept>rll::smart_ptr</concept>
    <concept>rll::ptr_like</concept>
  </compound>
  <compound kind="file">
    <name>standard_copyable_and_movable.h</name>
    <filename>standard__copyable__and__movable_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <namespace>rll</namespace>
    <concept>rll::standard_copyable_and_movable</concept>
  </compound>
  <compound kind="file">
    <name>threading.h</name>
    <filename>threading_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <namespace>rll</namespace>
    <concept>rll::basic_lockable</concept>
    <concept>rll::lockable</concept>
    <concept>rll::timed_lockable</concept>
    <concept>rll::shared_lockable</concept>
    <concept>rll::shared_timed_lockable</concept>
    <concept>rll::mutex</concept>
    <concept>rll::timed_mutex</concept>
    <concept>rll::shared_mutex</concept>
    <concept>rll::shared_timed_mutex</concept>
  </compound>
  <compound kind="file">
    <name>config.h</name>
    <filename>config_8h.html</filename>
    <includes id="serialization_8h" name="serialization.h" local="no" import="no" module="no" objc="no">rll/serialization.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <includes id="filedevice_8h" name="filedevice.h" local="no" import="no" module="no" objc="no">rll/io/filedevice.h</includes>
    <class kind="class">rll::configuration_file</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>contracts.h</name>
    <filename>contracts_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <includes id="export_8h" name="export.h" local="no" import="no" module="no" objc="no">rll/global/export.h</includes>
    <includes id="source__location_8h" name="source_location.h" local="no" import="no" module="no" objc="no">rll/source_location.h</includes>
    <class kind="struct">rll::contract_violation</class>
    <namespace>rll</namespace>
    <namespace>rll::detail</namespace>
    <member kind="define">
      <type>#define</type>
      <name>assert_invariant</name>
      <anchorfile>contracts_8h.html</anchorfile>
      <anchor>a9cbb2f1eebbe45103362957088f15c5a</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>assert_precondition</name>
      <anchorfile>contracts_8h.html</anchorfile>
      <anchor>a269cead70f13e4ed003b315f857cfbdc</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>assert_postcondition</name>
      <anchorfile>contracts_8h.html</anchorfile>
      <anchor>adcfc2e0c1622d3069d05e95bcf09d9d0</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>assert_broken_invariant</name>
      <anchorfile>contracts_8h.html</anchorfile>
      <anchor>aa9bcba8574af5560711e5ecabe7b6700</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>assert_broken_precondition</name>
      <anchorfile>contracts_8h.html</anchorfile>
      <anchor>a6ab677a87bb77dd1a05d46565ee66801</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>assert_not_implemented</name>
      <anchorfile>contracts_8h.html</anchorfile>
      <anchor>a671b3a7464abd32cfa86e0ee43c87cfa</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>crypto.h</name>
    <filename>crypto_8h.html</filename>
    <includes id="basic__hasher_8h" name="basic_hasher.h" local="no" import="no" module="no" objc="no">rll/crypto/basic_hasher.h</includes>
    <includes id="md5_8h" name="md5.h" local="no" import="no" module="no" objc="no">rll/crypto/md5.h</includes>
  </compound>
  <compound kind="file">
    <name>basic_hasher.h</name>
    <filename>basic__hasher_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <class kind="class">rll::crypto::basic_hasher</class>
    <namespace>rll</namespace>
    <namespace>rll::crypto</namespace>
  </compound>
  <compound kind="file">
    <name>md5.h</name>
    <filename>md5_8h.html</filename>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <includes id="uuid_8h" name="uuid.h" local="no" import="no" module="no" objc="no">rll/uuid.h</includes>
    <includes id="pimpl_8h" name="pimpl.h" local="no" import="no" module="no" objc="no">rll/traits/pimpl.h</includes>
    <includes id="basic__hasher_8h" name="basic_hasher.h" local="no" import="no" module="no" objc="no">rll/crypto/basic_hasher.h</includes>
    <class kind="class">rll::crypto::md5</class>
    <namespace>rll</namespace>
    <namespace>rll::crypto</namespace>
  </compound>
  <compound kind="file">
    <name>directories.h</name>
    <filename>directories_8h.html</filename>
    <includes id="export_8h" name="export.h" local="no" import="no" module="no" objc="no">rll/global/export.h</includes>
    <includes id="version_8h" name="version.h" local="no" import="no" module="no" objc="no">rll/global/version.h</includes>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <includes id="optional_8h" name="optional.h" local="no" import="no" module="no" objc="no">rll/optional.h</includes>
    <class kind="class">rll::dirs</class>
    <class kind="class">rll::application_dirs</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>euclid.h</name>
    <path>rll/</path>
    <filename>euclid_8h.html</filename>
    <includes id="angle_8h" name="angle.h" local="no" import="no" module="no" objc="no">rll/euclid/angle.h</includes>
    <includes id="point2d_8h" name="point2d.h" local="no" import="no" module="no" objc="no">rll/euclid/point2d.h</includes>
    <includes id="size2d_8h" name="size2d.h" local="no" import="no" module="no" objc="no">rll/euclid/size2d.h</includes>
    <includes id="vector2d_8h" name="vector2d.h" local="no" import="no" module="no" objc="no">rll/euclid/vector2d.h</includes>
    <includes id="velocity_8h" name="velocity.h" local="no" import="no" module="no" objc="no">rll/euclid/velocity.h</includes>
  </compound>
  <compound kind="file">
    <name>angle.h</name>
    <path>rll/euclid/</path>
    <filename>angle_8h.html</filename>
    <includes id="math_8h" name="math.h" local="no" import="no" module="no" objc="no">rll/math.h</includes>
    <includes id="contracts_8h" name="contracts.h" local="no" import="no" module="no" objc="no">rll/contracts.h</includes>
    <includes id="num_8h" name="num.h" local="no" import="no" module="no" objc="no">rll/concepts/num.h</includes>
    <class kind="struct">rll::angle</class>
    <class kind="struct">fmt::formatter&lt; rll::angle&lt; T &gt; &gt;</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>point2d.h</name>
    <path>rll/euclid/</path>
    <filename>point2d_8h.html</filename>
    <includes id="math_8h" name="math.h" local="no" import="no" module="no" objc="no">rll/math.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <includes id="num_8h" name="num.h" local="no" import="no" module="no" objc="no">rll/concepts/num.h</includes>
    <includes id="any__of_8h" name="any_of.h" local="no" import="no" module="no" objc="no">rll/concepts/any_of.h</includes>
    <includes id="size2d_8h" name="size2d.h" local="no" import="no" module="no" objc="no">rll/euclid/size2d.h</includes>
    <includes id="vector2d_8h" name="vector2d.h" local="no" import="no" module="no" objc="no">rll/euclid/vector2d.h</includes>
    <class kind="class">rll::point2d</class>
    <class kind="struct">fmt::formatter&lt; rll::point2d&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; rll::point2d&lt; T &gt; &gt;</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>size2d.h</name>
    <path>rll/euclid/</path>
    <filename>size2d_8h.html</filename>
    <includes id="num_8h" name="num.h" local="no" import="no" module="no" objc="no">rll/concepts/num.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <class kind="struct">rll::size2d</class>
    <class kind="struct">fmt::formatter&lt; rll::size2d&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; rll::size2d&lt; T &gt; &gt;</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>vector2d.h</name>
    <path>rll/euclid/</path>
    <filename>vector2d_8h.html</filename>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <includes id="num_8h" name="num.h" local="no" import="no" module="no" objc="no">rll/concepts/num.h</includes>
    <includes id="any__of_8h" name="any_of.h" local="no" import="no" module="no" objc="no">rll/concepts/any_of.h</includes>
    <includes id="size2d_8h" name="size2d.h" local="no" import="no" module="no" objc="no">rll/euclid/size2d.h</includes>
    <includes id="angle_8h" name="angle.h" local="no" import="no" module="no" objc="no">rll/euclid/angle.h</includes>
    <class kind="struct">rll::vector2d</class>
    <class kind="struct">fmt::formatter&lt; rll::vector2d&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; rll::vector2d&lt; T &gt; &gt;</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>velocity.h</name>
    <path>rll/euclid/</path>
    <filename>velocity_8h.html</filename>
    <includes id="math_8h" name="math.h" local="no" import="no" module="no" objc="no">rll/math.h</includes>
    <includes id="contracts_8h" name="contracts.h" local="no" import="no" module="no" objc="no">rll/contracts.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <includes id="num_8h" name="num.h" local="no" import="no" module="no" objc="no">rll/concepts/num.h</includes>
    <class kind="struct">rll::velocity</class>
    <class kind="struct">fmt::formatter&lt; rll::velocity&lt; T &gt; &gt;</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>fixed_string.h</name>
    <path>rll/</path>
    <filename>fixed__string_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <includes id="char__reader_8h" name="char_reader.h" local="no" import="no" module="no" objc="no">rll/impl/char_reader.h</includes>
    <class kind="struct">rll::fixed_string</class>
    <class kind="struct">rll::fixed_string&lt; 0 &gt;</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>functional.h</name>
    <path>rll/</path>
    <filename>functional_8h.html</filename>
    <includes id="lazy_8h" name="lazy.h" local="no" import="no" module="no" objc="no">rll/functional/lazy.h</includes>
    <includes id="overload_8h" name="overload.h" local="no" import="no" module="no" objc="no">rll/functional/overload.h</includes>
    <includes id="scope__guard_8h" name="scope_guard.h" local="no" import="no" module="no" objc="no">rll/functional/scope_guard.h</includes>
  </compound>
  <compound kind="file">
    <name>lazy.h</name>
    <path>rll/functional/</path>
    <filename>lazy_8h.html</filename>
    <includes id="optional_8h" name="optional.h" local="no" import="no" module="no" objc="no">rll/optional.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="no" import="no" module="no" objc="no">rll/type_traits.h</includes>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>overload.h</name>
    <path>rll/functional/</path>
    <filename>overload_8h.html</filename>
    <class kind="struct">rll::non_const_overload_t</class>
    <class kind="struct">rll::const_overload_t</class>
    <class kind="struct">rll::overload_t</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>scope_guard.h</name>
    <path>rll/functional/</path>
    <filename>scope__guard_8h.html</filename>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>global.h</name>
    <path>rll/</path>
    <filename>global_8h.html</filename>
    <includes id="export_8h" name="export.h" local="yes" import="no" module="no" objc="no">global/export.h</includes>
    <includes id="version_8h" name="version.h" local="yes" import="no" module="no" objc="no">global/version.h</includes>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">global/definitions.h</includes>
  </compound>
  <compound kind="file">
    <name>char_utils.h</name>
    <path>rll/global/</path>
    <filename>char__utils_8h.html</filename>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>definitions.h</name>
    <path>rll/global/</path>
    <filename>definitions_8h.html</filename>
    <includes id="export_8h" name="export.h" local="no" import="no" module="no" objc="no">rll/global/export.h</includes>
    <includes id="platform__definitions_8h" name="platform_definitions.h" local="no" import="no" module="no" objc="no">rll/global/platform_definitions.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RLL_DOC</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga2ead78024387c6bb4b855669c8ff29de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___constexpr___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga0c9fde80eb6d7ab75a391dc178ef18b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_QT_CORE</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga6c4db82ea1bcad14033c5a27ee416607</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_QT_GUI</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>gacb133e37e7787d05baa82a25c970a4f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_DEBUG</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga4be4154a097b6e8f1ba12097c708ff86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_NO_DEBUG</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga1bda7c0d1bfca193457f9c1d24d97f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___noinline___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga145bb0d26bb2157f4dc7874127366986</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___inline___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga791216d5be3d4ee7f5b5b04f597a7fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_RTTI</name>
      <anchorfile>definitions_8h.html</anchorfile>
      <anchor>a8a5985a98e4bc4a45bec523c803c091b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>export.h</name>
    <path>rll/global/</path>
    <filename>export_8h.html</filename>
    <namespace>rll</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RLL_API</name>
      <anchorfile>export_8h.html</anchorfile>
      <anchor>a3b3cecf779d0708368562e5d85c9b1dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>groups.dox</name>
    <path>rll/global/</path>
    <filename>groups_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>mainpage.dox</name>
    <path>rll/global/</path>
    <filename>mainpage_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>platform_definitions.h</name>
    <path>rll/global/</path>
    <filename>platform__definitions_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_WINDOWS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga1ba5279bc6c0baa3ee7ae98a95fb6e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_LINUX</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gafa2394deb8155785a6c7c5db668fd623</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_DARWIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga018aad7ab2bda51c19047dad10980ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_ANDROID</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga053f2973928fa55ed58eca19cbc486ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_IOS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaeee59866d9f0af231de0ff8926f39d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_CYGWIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gac22d3b1b2b685346e73e63dbbb15b5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_FREEBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga2e9baf2fa0875318c1017f923d83f27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_DRAGONFLY</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaf885a266bb9e45d7c3fea18394c0530f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_NETBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gabebd3e06cbac83f44e83d7c00376fd2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLLOPPY_OS_OPENBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga1d327ce62f081fe24967a2e08f74ee25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gabcf410c69a77977a2052845c022edec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_X86_32</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga076c7d57ff6b3527ea01ca5ddf00786e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_X86_64</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga10ade98b3c5c718e2c124c6fd42f88f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_ALPHA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gae54ae66007179b512eb2e91613a906da</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_ARM</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gacf98770d834e5692caa9d02b4da94dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_BFIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga90d9673291e7d19d8f292b7b188d6c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_CONVEX</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga8137dc5b3cfd87f74cca6aeef451eaae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_E2K</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga78bf7789114c539f770ecfe8d6c5b25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_IA64</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga4f48350c5075b67ac0071679f14b201e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_LOONGARCH</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga8a06ccd57cb5d5213179fbca58739c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_M68K</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gade806c628966581ce537a6072c8c6bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_MIPS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga47e04dac58fb5b3df4bc2547a0b1a093</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_HPPA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga32617aeae628226f8227db4c7f3253a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_POWERPC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga5623ca341385be52db9cc25ce66ad250</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_CUDA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaef493399e7cdc7886c166664d63d8588</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_PYRAMID</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga6ae673c8b4135b5d202a82522cc8ec5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_RISCV</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga17aa3376cb1d3792f6ccfa45b829d764</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_RS6000</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gacc23cd23d64093f04a6651f5efe2a34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_SPARC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaad05de2370e92d27f17d415866bebdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_SUPERH</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga556c746bf4dd457962a863af5f5b237d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga1863cafb46fe173aa7f5b1d10110396a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_CLANG</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gada7447d6c6a54182cc3b4d32d4f62567</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_GNU</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gae2ca49015641c119b554f478f7e6de0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_INTEL</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gac4a050d47c3a06c942bdf715483e8dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_NVIDIA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga5d3f29af09ff0c90d567e5a9dcac33ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_MSVC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga598fe34bb0eebfb022d512a7f9937103</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gabc5195a3328c09dc522a657cf0959d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ENDIAN_BIG</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga26ace2e7bf69a6d02940c7040dfdc214</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ENDIAN_LITTLE</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga745cdfdc5a0e775e2d04f45f5a85e5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ENDIAN_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga7e1638732a4642956e03c27a2c947f52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>semver.h</name>
    <path>rll/global/</path>
    <filename>semver_8h.html</filename>
    <includes id="char__utils_8h" name="char_utils.h" local="no" import="no" module="no" objc="no">rll/global/char_utils.h</includes>
    <includes id="version__definitions_8h" name="version_definitions.h" local="no" import="no" module="no" objc="no">rll/global/version_definitions.h</includes>
    <includes id="optional_8h" name="optional.h" local="no" import="no" module="no" objc="no">rll/optional.h</includes>
    <class kind="struct">rll::version</class>
    <class kind="struct">fmt::formatter&lt; rll::version &gt;</class>
    <namespace>rll</namespace>
    <namespace>rll::literals</namespace>
    <namespace>rll::comparators</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RLL_SEMVER_CONSTEXPR</name>
      <anchorfile>semver_8h.html</anchorfile>
      <anchor>a10ca3319a729ed2103a6f030a5de2d93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>version.h</name>
    <path>rll/global/</path>
    <filename>version_8h.html</filename>
    <includes id="version__definitions_8h" name="version_definitions.h" local="yes" import="no" module="no" objc="no">version_definitions.h</includes>
    <includes id="semver_8h" name="semver.h" local="yes" import="no" module="no" objc="no">semver.h</includes>
    <class kind="class">rll::meta::project_meta</class>
    <namespace>rll</namespace>
    <namespace>rll::meta</namespace>
  </compound>
  <compound kind="file">
    <name>version_definitions.h</name>
    <path>rll/global/</path>
    <filename>version__definitions_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>RLL_VERSION_MAJOR</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae4c933ea69724c0db284d67b6aae924b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_VERSION_MINOR</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7bc19100e1baacd2ace277c9dd887e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_VERSION_PATCH</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga342cb729fd7b0d2ef0426d67279ec2ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_VERSION_STRING</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga97bb07d0d43dd11931df039a8c99f905</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>char_reader.h</name>
    <path>rll/impl/</path>
    <filename>char__reader_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <class kind="struct">rll::detail::char_or_throw</class>
    <class kind="struct">rll::detail::symbol</class>
    <class kind="struct">rll::detail::utf8_reader</class>
    <class kind="struct">rll::detail::utf16_reader</class>
    <class kind="struct">rll::detail::utf32_reader</class>
    <class kind="struct">rll::detail::char_reader&lt; char &gt;</class>
    <class kind="struct">rll::detail::char_reader&lt; wchar_t &gt;</class>
    <class kind="struct">rll::detail::char_reader&lt; char8_t &gt;</class>
    <class kind="struct">rll::detail::char_reader&lt; char16_t &gt;</class>
    <class kind="struct">rll::detail::char_reader&lt; char32_t &gt;</class>
    <namespace>rll</namespace>
    <namespace>rll::detail</namespace>
  </compound>
  <compound kind="file">
    <name>filedevice.h</name>
    <path>rll/io/</path>
    <filename>filedevice_8h.html</filename>
    <includes id="result_8h" name="result.h" local="no" import="no" module="no" objc="no">rll/result.h</includes>
    <class kind="class">rll::io::filedevice</class>
    <namespace>rll</namespace>
    <namespace>rll::io</namespace>
  </compound>
  <compound kind="file">
    <name>library.h</name>
    <path>rll/</path>
    <filename>library_8h.html</filename>
    <includes id="export_8h" name="export.h" local="no" import="no" module="no" objc="no">rll/global/export.h</includes>
    <includes id="pimpl_8h" name="pimpl.h" local="no" import="no" module="no" objc="no">rll/traits/pimpl.h</includes>
    <includes id="result_8h" name="result.h" local="no" import="no" module="no" objc="no">rll/result.h</includes>
    <includes id="utility_8h" name="utility.h" local="no" import="no" module="no" objc="no">rll/utility.h</includes>
    <class kind="class">rll::library</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>log.h</name>
    <path>rll/</path>
    <filename>log_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>math.h</name>
    <path>rll/</path>
    <filename>math_8h.html</filename>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <includes id="numbers_8h" name="numbers.h" local="no" import="no" module="no" objc="no">rll/numbers.h</includes>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>memory.h</name>
    <path>rll/</path>
    <filename>memory_8h.html</filename>
    <includes id="deleter_8h" name="deleter.h" local="no" import="no" module="no" objc="no">rll/memory/deleter.h</includes>
    <includes id="observer__ptr_8h" name="observer_ptr.h" local="no" import="no" module="no" objc="no">rll/memory/observer_ptr.h</includes>
    <includes id="owner_8h" name="owner.h" local="no" import="no" module="no" objc="no">rll/memory/owner.h</includes>
    <includes id="propagate__const_8h" name="propagate_const.h" local="no" import="no" module="no" objc="no">rll/memory/propagate_const.h</includes>
  </compound>
  <compound kind="file">
    <name>deleter.h</name>
    <path>rll/memory/</path>
    <filename>deleter_8h.html</filename>
    <class kind="struct">rll::deleter</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>observer_ptr.h</name>
    <path>rll/memory/</path>
    <filename>observer__ptr_8h.html</filename>
    <includes id="contracts_8h" name="contracts.h" local="no" import="no" module="no" objc="no">rll/contracts.h</includes>
    <class kind="class">rll::observer_ptr</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>owner.h</name>
    <path>rll/memory/</path>
    <filename>owner_8h.html</filename>
    <includes id="ptr_8h" name="ptr.h" local="yes" import="no" module="no" objc="no">../concepts/ptr.h</includes>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>propagate_const.h</name>
    <path>rll/memory/</path>
    <filename>propagate__const_8h.html</filename>
    <includes id="ptr_8h" name="ptr.h" local="no" import="no" module="no" objc="no">rll/concepts/ptr.h</includes>
    <class kind="class">rll::propagate_const</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>net.h</name>
    <path>rll/</path>
    <filename>net_8h.html</filename>
    <includes id="ip__address_8h" name="ip_address.h" local="no" import="no" module="no" objc="no">rll/net/ip_address.h</includes>
  </compound>
  <compound kind="file">
    <name>ip_address.h</name>
    <path>rll/net/</path>
    <filename>ip__address_8h.html</filename>
    <namespace>rll</namespace>
    <namespace>rll::net</namespace>
    <namespace>rll::literals</namespace>
  </compound>
  <compound kind="file">
    <name>numbers.h</name>
    <path>rll/</path>
    <filename>numbers_8h.html</filename>
    <includes id="global_8h" name="global.h" local="no" import="no" module="no" objc="no">rll/global.h</includes>
    <includes id="num_8h" name="num.h" local="no" import="no" module="no" objc="no">rll/concepts/num.h</includes>
    <namespace>rll</namespace>
    <namespace>rll::numbers</namespace>
  </compound>
  <compound kind="file">
    <name>optional.h</name>
    <path>rll/</path>
    <filename>optional_8h.html</filename>
    <class kind="struct">rll::nullopt_t</class>
    <class kind="struct">rll::nullopt_t::do_not_use</class>
    <class kind="class">rll::bad_optional_access</class>
    <class kind="class">rll::optional</class>
    <class kind="class">rll::optional&lt; T &amp; &gt;</class>
    <namespace>rll</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_IS_TRIVIALLY_COPY_CONSTRUCTIBLE</name>
      <anchorfile>optional_8h.html</anchorfile>
      <anchor>aaa63d17874c7d1b6b715183d21c2be35</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_IS_TRIVIALLY_COPY_ASSIGNABLE</name>
      <anchorfile>optional_8h.html</anchorfile>
      <anchor>a7f33879e981f40bb99f40d8d41701aab</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_IS_TRIVIALLY_DESTRUCTIBLE</name>
      <anchorfile>optional_8h.html</anchorfile>
      <anchor>a09d77a005b8205210f42a7889f854520</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_CXX14</name>
      <anchorfile>optional_8h.html</anchorfile>
      <anchor>aa6df093fd65e6233d8251464e0ed86d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_11_CONSTEXPR</name>
      <anchorfile>optional_8h.html</anchorfile>
      <anchor>a871c57934f04050d51dc9f568870b63f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>qt.h</name>
    <path>rll/</path>
    <filename>qt_8h.html</filename>
    <includes id="format_8h" name="format.h" local="yes" import="no" module="no" objc="no">qt/format.h</includes>
    <includes id="formatters_8h" name="formatters.h" local="yes" import="no" module="no" objc="no">qt/formatters.h</includes>
    <includes id="literals_8h" name="literals.h" local="yes" import="no" module="no" objc="no">qt/literals.h</includes>
    <includes id="qml_8h" name="qml.h" local="yes" import="no" module="no" objc="no">qt/qml.h</includes>
  </compound>
  <compound kind="file">
    <name>format.h</name>
    <path>rll/qt/</path>
    <filename>format_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
  </compound>
  <compound kind="file">
    <name>formatters.h</name>
    <path>rll/qt/</path>
    <filename>formatters_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
  </compound>
  <compound kind="file">
    <name>literals.h</name>
    <path>rll/qt/</path>
    <filename>literals_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
  </compound>
  <compound kind="file">
    <name>qml.h</name>
    <path>rll/qt/</path>
    <filename>qml_8h.html</filename>
    <includes id="formatters_8h" name="formatters.h" local="no" import="no" module="no" objc="no">rll/qt/formatters.h</includes>
    <includes id="literals_8h" name="literals.h" local="no" import="no" module="no" objc="no">rll/qt/literals.h</includes>
    <includes id="optional_8h" name="optional.h" local="no" import="no" module="no" objc="no">rll/optional.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
  </compound>
  <compound kind="file">
    <name>result.h</name>
    <path>rll/</path>
    <filename>result_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <includes id="contracts_8h" name="contracts.h" local="no" import="no" module="no" objc="no">rll/contracts.h</includes>
    <includes id="optional_8h" name="optional.h" local="no" import="no" module="no" objc="no">rll/optional.h</includes>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>rtti.h</name>
    <path>rll/</path>
    <filename>rtti_8h.html</filename>
    <includes id="export_8h" name="export.h" local="no" import="no" module="no" objc="no">rll/global/export.h</includes>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <namespace>rll</namespace>
    <namespace>rll::rtti</namespace>
  </compound>
  <compound kind="file">
    <name>savefile.h</name>
    <path>rll/</path>
    <filename>savefile_8h.html</filename>
    <includes id="serialization_8h" name="serialization.h" local="no" import="no" module="no" objc="no">rll/serialization.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <includes id="filedevice_8h" name="filedevice.h" local="no" import="no" module="no" objc="no">rll/io/filedevice.h</includes>
    <class kind="class">rll::savefile</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>serialization.h</name>
    <path>rll/</path>
    <filename>serialization_8h.html</filename>
    <includes id="global_8h" name="global.h" local="no" import="no" module="no" objc="no">rll/global.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="no" import="no" module="no" objc="no">rll/type_traits.h</includes>
    <includes id="result_8h" name="result.h" local="no" import="no" module="no" objc="no">rll/result.h</includes>
    <includes id="tags_8h" name="tags.h" local="no" import="no" module="no" objc="no">rll/serialization/tags.h</includes>
    <class kind="struct">rll::serializer</class>
    <class kind="struct">rll::partial_serializer</class>
    <class kind="struct">rll::is_serializable</class>
    <class kind="struct">rll::is_partially_serializable</class>
    <class kind="struct">rll::is_serializable&lt; T, F, std::void_t&lt; decltype(serializer&lt; T, F &gt;::serialize), decltype(serializer&lt; T, F &gt;::deserialize)&gt; &gt;</class>
    <class kind="struct">rll::is_partially_serializable&lt; T, F, R, std::void_t&lt; decltype(partial_serializer&lt; T, F, R &gt;::serialize), decltype(partial_serializer&lt; T, F, R &gt;::deserialize)&gt; &gt;</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>tags.h</name>
    <path>rll/serialization/</path>
    <filename>tags_8h.html</filename>
    <class kind="struct">rll::serialization::format::json</class>
    <class kind="struct">rll::serialization::format::bson</class>
    <class kind="struct">rll::serialization::format::xml</class>
    <class kind="struct">rll::serialization::format::cbor</class>
    <class kind="struct">rll::serialization::format::flexbuffer</class>
    <class kind="struct">rll::serialization::format::msgpack</class>
    <class kind="struct">rll::serialization::format::toml</class>
    <class kind="struct">rll::serialization::format::yaml</class>
    <class kind="struct">rll::serialization::format::generic</class>
    <namespace>rll</namespace>
    <namespace>rll::serialization</namespace>
    <namespace>rll::serialization::format</namespace>
  </compound>
  <compound kind="file">
    <name>source_location.h</name>
    <path>rll/</path>
    <filename>source__location_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <class kind="struct">rll::source_location</class>
    <class kind="struct">fmt::formatter&lt; rll::source_location &gt;</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>stdint.h</name>
    <path>rll/</path>
    <filename>stdint_8h.html</filename>
    <namespace>rll</namespace>
    <namespace>rll::literals</namespace>
  </compound>
  <compound kind="file">
    <name>string_util.h</name>
    <path>rll/</path>
    <filename>string__util_8h.html</filename>
    <includes id="export_8h" name="export.h" local="no" import="no" module="no" objc="no">rll/global/export.h</includes>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>traits.h</name>
    <path>rll/</path>
    <filename>traits_8h.html</filename>
    <includes id="noncopyable_8h" name="noncopyable.h" local="no" import="no" module="no" objc="no">rll/traits/noncopyable.h</includes>
    <includes id="nonmovable_8h" name="nonmovable.h" local="no" import="no" module="no" objc="no">rll/traits/nonmovable.h</includes>
    <includes id="pimpl_8h" name="pimpl.h" local="no" import="no" module="no" objc="no">rll/traits/pimpl.h</includes>
    <includes id="pin_8h" name="pin.h" local="no" import="no" module="no" objc="no">rll/traits/pin.h</includes>
    <includes id="singleton_8h" name="singleton.h" local="no" import="no" module="no" objc="no">rll/traits/singleton.h</includes>
  </compound>
  <compound kind="file">
    <name>noncopyable.h</name>
    <path>rll/traits/</path>
    <filename>noncopyable_8h.html</filename>
    <class kind="struct">rll::noncopyable</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>nonmovable.h</name>
    <path>rll/traits/</path>
    <filename>nonmovable_8h.html</filename>
    <class kind="struct">rll::nonmovable</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>pimpl.h</name>
    <path>rll/traits/</path>
    <filename>pimpl_8h.html</filename>
    <includes id="propagate__const_8h" name="propagate_const.h" local="no" import="no" module="no" objc="no">rll/memory/propagate_const.h</includes>
    <namespace>rll</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_PRIVATE</name>
      <anchorfile>pimpl_8h.html</anchorfile>
      <anchor>a9c6048a4c390e63349e43ea83ed07c12</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_PRIVATE_AS</name>
      <anchorfile>pimpl_8h.html</anchorfile>
      <anchor>a296a83a502b0aa9b389cdd3f0c3974c9</anchor>
      <arglist>(alias)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_PRIVATE_SHARED</name>
      <anchorfile>pimpl_8h.html</anchorfile>
      <anchor>abd00b55c9b0f221b8224344400a68355</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_PRIVATE_SHARED_AS</name>
      <anchorfile>pimpl_8h.html</anchorfile>
      <anchor>ae4fda04d021c9d96ee6a6cf029f35dbd</anchor>
      <arglist>(alias)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pin.h</name>
    <path>rll/traits/</path>
    <filename>pin_8h.html</filename>
    <includes id="noncopyable_8h" name="noncopyable.h" local="no" import="no" module="no" objc="no">rll/traits/noncopyable.h</includes>
    <includes id="nonmovable_8h" name="nonmovable.h" local="no" import="no" module="no" objc="no">rll/traits/nonmovable.h</includes>
    <class kind="struct">rll::pin</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>singleton.h</name>
    <path>rll/traits/</path>
    <filename>singleton_8h.html</filename>
    <includes id="pin_8h" name="pin.h" local="no" import="no" module="no" objc="no">rll/traits/pin.h</includes>
    <class kind="struct">rll::singleton</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>type_traits.h</name>
    <path>rll/</path>
    <filename>type__traits_8h.html</filename>
    <class kind="struct">rll::remove_cvref</class>
    <class kind="struct">rll::plain_type</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>u128.h</name>
    <path>rll/</path>
    <filename>u128_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <includes id="bit_8h" name="bit.h" local="no" import="no" module="no" objc="no">rll/bit.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <includes id="optional_8h" name="optional.h" local="no" import="no" module="no" objc="no">rll/optional.h</includes>
    <includes id="char__reader_8h" name="char_reader.h" local="no" import="no" module="no" objc="no">rll/impl/char_reader.h</includes>
    <class kind="class">rll::u128</class>
    <class kind="struct">std::hash&lt; rll::u128 &gt;</class>
    <class kind="struct">fmt::formatter&lt; rll::u128 &gt;</class>
    <namespace>rll</namespace>
  </compound>
  <compound kind="file">
    <name>utility.h</name>
    <path>rll/</path>
    <filename>utility_8h.html</filename>
    <includes id="enum_8h" name="enum.h" local="no" import="no" module="no" objc="no">rll/concepts/enum.h</includes>
    <namespace>rll</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_ENUM_FLAG</name>
      <anchorfile>utility_8h.html</anchorfile>
      <anchor>af4570514ccc442468408666c070ab793</anchor>
      <arglist>(E)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uuid.h</name>
    <path>rll/</path>
    <filename>uuid_8h.html</filename>
    <includes id="global_8h" name="global.h" local="no" import="no" module="no" objc="no">rll/global.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="no" import="no" module="no" objc="no">rll/stdint.h</includes>
    <class kind="class">rll::uuid</class>
    <class kind="struct">fmt::formatter&lt; rll::uuid &gt;</class>
    <namespace>rll</namespace>
    <namespace>rll::literals</namespace>
  </compound>
  <compound kind="file">
    <name>guid.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/android/</path>
    <filename>guid_8h.html</filename>
    <includes id="platform__definitions_8h" name="platform_definitions.h" local="no" import="no" module="no" objc="no">rll/global/platform_definitions.h</includes>
    <class kind="struct">rll::oslayer::android::guid_info</class>
    <namespace>rll</namespace>
    <namespace>rll::oslayer</namespace>
    <namespace>rll::oslayer::android</namespace>
  </compound>
  <compound kind="file">
    <name>base.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/</path>
    <filename>base_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rll/global/definitions.h</includes>
    <includes id="platform__definitions_8h" name="platform_definitions.h" local="no" import="no" module="no" objc="no">rll/global/platform_definitions.h</includes>
    <namespace>rll</namespace>
    <namespace>rll::oslayer</namespace>
    <member kind="define">
      <type>#define</type>
      <name>___os___</name>
      <anchorfile>base_8h.html</anchorfile>
      <anchor>a092e42f33c0bac70710d0faae1e2af8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dlfcn.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/</path>
    <filename>dlfcn_8h.html</filename>
    <includes id="platform__definitions_8h" name="platform_definitions.h" local="no" import="no" module="no" objc="no">rll/global/platform_definitions.h</includes>
    <includes id="dlfcn_8h" name="dlfcn.h" local="no" import="no" module="no" objc="no">dlfcn.h</includes>
  </compound>
  <compound kind="file">
    <name>dirs.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/linux/</path>
    <filename>dirs_8h.html</filename>
    <includes id="base_8h" name="base.h" local="yes" import="no" module="no" objc="no">../base.h</includes>
    <namespace>rll</namespace>
    <namespace>rll::oslayer</namespace>
    <namespace>rll::oslayer::linux</namespace>
  </compound>
  <compound kind="file">
    <name>dlfcn_win32.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/win/</path>
    <filename>dlfcn__win32_8h.html</filename>
    <class kind="struct">dl_info</class>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_NOW</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a98a6517467cf7d1dd27d6c6dce78a6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_LAZY</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a5c83709ee3bd7d316f8f47e122f3be20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_GLOBAL</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>ace65454279c135fe5e6168d456c31263</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_LOCAL</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a233010260f7e61c5dab09e2bca10a590</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_DEFAULT</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a58d13c5dcabbb85848fa97b446086247</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_NEXT</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a51d4212b17b1edeb2fc5a48c7c497267</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct dl_info</type>
      <name>Dl_info</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a4c034644624b5d5d171e7cf51ec256cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>dlopen</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a005293776e928f3fc39d132d28f97c74</anchor>
      <arglist>(char const *file, int mode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dlclose</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>af483b6c4400965aa885f9f1a144138a5</anchor>
      <arglist>(void *handle)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>dlsym</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a4d5ab576e4cc592e636fb5416eeda016</anchor>
      <arglist>(void *handle, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>dlerror</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a2bbbe680edd6e3918311f5dbf33b3996</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dladdr</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a5a8079fe575d5a5bc52fa631b26faeca</anchor>
      <arglist>(void const *addr, Dl_info *info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>known_folder.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/win/</path>
    <filename>known__folder_8h.html</filename>
    <includes id="base_8h" name="base.h" local="yes" import="no" module="no" objc="no">../base.h</includes>
    <namespace>rll</namespace>
    <namespace>rll::oslayer</namespace>
    <namespace>rll::oslayer::win</namespace>
  </compound>
  <compound kind="struct">
    <name>rll::angle</name>
    <filename>structrll_1_1angle.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a88d0e6eedee4ee74281814bd8405d140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a692d6be8d8273704539aa146e7f24b81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>ad2eb8abbf72dab9e8f14b6fa471ffda4</anchor>
      <arglist>(number_type const value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~angle</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a4eda5860e72164f7c8a8ae6b1d6b0bd4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>af2ca2f05e300053bb3e0d5de19ff6cb2</anchor>
      <arglist>(angle const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a24ca682ad4e83d4f3192b7b54fe00e70</anchor>
      <arglist>(angle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a7942b604dae8e69f21cbb205fdfab25f</anchor>
      <arglist>(angle const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>adc195566fa5c3cc94c4b9606d2681d54</anchor>
      <arglist>(angle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a16812f2b3e6eceaae426fceee5887c73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>in</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a2725a0ca19de7a33d8c380b0a4a77ae2</anchor>
      <arglist>(angle_unit u) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>radians</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a9429e10ca537e0c9505dffec7466b351</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>degrees</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>aa866df920baeacb7b1c3abb3a25d6d8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>positive</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>ab46b04d5fbb9ecdb41150e5fadce13d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>signed_</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a6bc53c5b8c037508d4867e5b0f1703e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>angle_to</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a4eb5c71c8ed8e41ae24da05d1a397245</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>angle</type>
      <name>lerp</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>ae8b4517f338e4c6eb10724920716f4d0</anchor>
      <arglist>(angle const &amp;other, T t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; T, T &gt;</type>
      <name>sin_cos</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a8433fea8635d9a44ce23c9893b9429c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle&lt; U &gt;</type>
      <name>cast</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a107c556bc4d05e656cfdc42e2f3e9210</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>value</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a0b996b416b8fef6a81df3909ce72bf68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr U</type>
      <name>as</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>aae6fc2db8b3ac1620428790fb6c22ac5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f32</type>
      <name>as_f32</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>aff13de5561cc5f1e63b1cb2f741be2a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f64</type>
      <name>as_f64</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a1d8e434aefecf46df52157b12c5c59bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>af786fca353c529da9f99fe74661d7db2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>sin</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a8f5fca051fa31fd445e1dcb13ac9cbc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>cos</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a5fe775e86a1c9f31685cf9581652acec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>tan</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a0fb0bed5af849c3718de7f5eb6531d41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>asin</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>aa7c936f71fbc06f75ed38aaf70c0e5f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>acos</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>abec4ae00f71a1ae314cb2fde2240d1ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>atan</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a64f8e50f8662ee9364357c9a8fd80c58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a79b1d3c2ff44dccff48008ed280b8b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>ada69207d3e044ee29bb9e07738a3427d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a9487a822df26dab2ff530065d5528b8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a836a3f76195d66e9c96b163f97ecd157</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a173df2fcc4c6a0015ccd8b1442851400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator number_type</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>ab903d43606f9e517b5573dfd7e24469d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a6751f04b23a2203ce673dfac3de43a9c</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>ae99aefd65f45b5243292b1ad44b18ef3</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>aecef2953af83b92f0fed538be6f02004</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>ae0b3f5efc9d23fbf045f072af524fd07</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a53deeeb15bb64cc78a9855fbdadcabb2</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>ad456d0bf6a9a4836636178a6d7cf4c63</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>operator*</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a3cb1768e03f9715221966ece6981b5e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator+</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a8e5409214326def5665fbed4df92c0ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator-</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>aa51209ed9b73973ee75b0289979b4a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator+</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>aeeb2deba0c93c6f168c8d27307d45420</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator-</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>aadc770a00ab523e5773438f94bb1a6b5</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator*</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>aa1069d7b687246fe93819421b2245a4f</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator/</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a561458c9049cfa14f864aaba0b068cb4</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a75eb73eded71229c0775024f8fe81bc6</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>ab348190ee582edd5f1182306f61c2cf8</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a088f46bdc1b32bb3f3fa1ef41cf89cae</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a8794657c7ed7005133afb76b151488c9</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator*</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a6479ab408116c0dcd7ee3fb869ac374c</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator/</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a78ef86c9dccd731df84d876c2eb713b1</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator+</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a0e2503a068cb98fc9c3ee91eaeff08d7</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator-</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a9ef50f343ce56d423efb54a9430f613c</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a273b54adbd68088924a18ede1f417760</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a7493b509682cdd6344b160d7ab3bee48</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a181f53660ff8517c6d8a248dfad4e0cb</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a6950d40f3a2ba4c25a6817ebc628548e</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>from_radians</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a5aed73ad5c0b4dfd8cc021c5a4ec64bc</anchor>
      <arglist>(number_type radians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>from_degrees</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a1cd006137f56ea6e65cc08a6bb1653bb</anchor>
      <arglist>(number_type degrees)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>from</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a045caf0f3c591a3cf7632f967024eabb</anchor>
      <arglist>(number_type value, angle_unit u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>zero</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>afbbce246542cf3928005ee9ac74e3df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>pi</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a4052f271854ffd59e3a1717cc4ef7f8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>two_pi</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>ad925f6d87d49f800bce8ceac7fb425da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>half_pi</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a1c3aaebedb70392486711209cdebf8ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>third_pi</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>ad0a379c11600d5625c2b9590914fc96a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>quarter_pi</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a56a9bc85b4ce627b56197891545b32ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structrll_1_1angle.html</anchorfile>
      <anchor>a478b39b84b04ee9c7dd3e21edce24c27</anchor>
      <arglist>(std::ostream &amp;os, angle const &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::application_dirs</name>
    <filename>classrll_1_1application__dirs.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>dir</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>a0ed382c2dc2fea0488a93a132081cd59</anchor>
      <arglist></arglist>
      <enumvalue file="classrll_1_1application__dirs.html" anchor="a0ed382c2dc2fea0488a93a132081cd59a0fea6a13c52b4d4725368f24b045ca84">cache</enumvalue>
      <enumvalue file="classrll_1_1application__dirs.html" anchor="a0ed382c2dc2fea0488a93a132081cd59a2245023265ae4cf87d02c8b6ba991139">config</enumvalue>
      <enumvalue file="classrll_1_1application__dirs.html" anchor="a0ed382c2dc2fea0488a93a132081cd59a63e5ccc32239b155c8691da2de09d8f1">config_local</enumvalue>
      <enumvalue file="classrll_1_1application__dirs.html" anchor="a0ed382c2dc2fea0488a93a132081cd59a8d777f385d3dfec8815d20f7496026dc">data</enumvalue>
      <enumvalue file="classrll_1_1application__dirs.html" anchor="a0ed382c2dc2fea0488a93a132081cd59a109d0fabf7fadeb851631940a8ce6e34">data_local</enumvalue>
      <enumvalue file="classrll_1_1application__dirs.html" anchor="a0ed382c2dc2fea0488a93a132081cd59a1ce027fe3518cc64ef3570b50a9a7c10">preferences</enumvalue>
      <enumvalue file="classrll_1_1application__dirs.html" anchor="a0ed382c2dc2fea0488a93a132081cd59ab4a619251c5c397f26d05c9b0e7bf97a">runtime</enumvalue>
      <enumvalue file="classrll_1_1application__dirs.html" anchor="a0ed382c2dc2fea0488a93a132081cd59a9ed39e2ea931586b6a985a6942ef573e">state</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>application_dirs</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>ade85aa4c699b8f65864cd879bf7e93bc</anchor>
      <arglist>(std::string_view qualifier, std::string_view vendor, std::string_view app)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>application_dirs</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>a687f8cffc7e9382a9b5e434352409669</anchor>
      <arglist>(meta::project_meta const &amp;meta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>ac301198937b9cfdd763df1188509b04d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>a43ec2d6d34884c34f684545431d17fcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>get</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>ac914dc8388e2962c6cd7617cbebd3727</anchor>
      <arglist>(dir d) const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>operator[]</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>a41c6ec8eb282d21466247465ddd5c5cf</anchor>
      <arglist>(dir d) const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>project_path</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>a4322f9e15b7655d14424ff5748d5fc10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>cache_dir</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>a3956e3a14fb113b6a3253dfb90ad3167</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>config_dir</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>a3a29a70ff24ac537431b1bf1885e7a7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>config_local_dir</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>aa5a740d76734c8fb02fb7164146ca0e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>data_dir</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>acaaa38c08f3503b316761758d3a1010b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>data_local_dir</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>ade81bf77528aafbfc4a7c4953d6fb1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>preference_dir</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>a2af234452d9b33092f94be24454a0366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::filesystem::path &gt; const &amp;</type>
      <name>runtime_dir</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>a49b23d2b10e58ab9b0b0c47453acfaa4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::filesystem::path &gt; const &amp;</type>
      <name>state_dir</name>
      <anchorfile>classrll_1_1application__dirs.html</anchorfile>
      <anchor>a32b673bfa8d67b3937532cd0f5121725</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::bad_optional_access</name>
    <filename>classrll_1_1bad__optional__access.html</filename>
    <base>std::exception</base>
    <member kind="function">
      <type></type>
      <name>bad_optional_access</name>
      <anchorfile>classrll_1_1bad__optional__access.html</anchorfile>
      <anchor>afac16467b29cb6f5f4bf5cf2e13742d8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>what</name>
      <anchorfile>classrll_1_1bad__optional__access.html</anchorfile>
      <anchor>a4bbc75a6d7dcec42ce652fb105e726a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::crypto::basic_hasher</name>
    <filename>classrll_1_1crypto_1_1basic__hasher.html</filename>
    <member kind="function">
      <type></type>
      <name>basic_hasher</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>a1e025106fc1bae5660f592774d79e1e0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basic_hasher</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>a7527f4bcbb143cad52fb379f0160c696</anchor>
      <arglist>(basic_hasher const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basic_hasher</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>aa71592bf54e1c4a47b42b3d7c4d06c2e</anchor>
      <arglist>(basic_hasher &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>a203caa839e41009eb7c4450c858555ab</anchor>
      <arglist>(basic_hasher const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>a50ed324cc02e2da1c45b675002035c3a</anchor>
      <arglist>(basic_hasher &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~basic_hasher</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>a3b583d666d57ba30e9750da269c5513d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual basic_hasher &amp;</type>
      <name>append</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>a564ba9415c8c462fe13763c42fef21ff</anchor>
      <arglist>(std::string const &amp;str)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual basic_hasher &amp;</type>
      <name>append</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>a809868a2ca364822b11ffdf6625add53</anchor>
      <arglist>(std::string_view str)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual basic_hasher &amp;</type>
      <name>append</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>ab012e273d8e9ec30bfffded14cf70447</anchor>
      <arglist>(void const *str, std::size_t len)=0</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>append_raw</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>ad95e7fe2739524691bf70b20a4ede29b</anchor>
      <arglist>(T const &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>a07f0b51d1fa45c117f6b88bd79d104e9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>hash_string</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>aa87476ad6e4259a28ec9f9d06045fecd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>ac7bb904aec05e77ba563c29da3e9a8d1</anchor>
      <arglist>(std::string const &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>ae13326a3a175936d1daeca667e8b1905</anchor>
      <arglist>(std::string_view const str)</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>aff495e6f53994fd10b324edff94660f4</anchor>
      <arglist>(T const &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::serialization::format::bson</name>
    <filename>structrll_1_1serialization_1_1format_1_1bson.html</filename>
  </compound>
  <compound kind="struct">
    <name>rll::serialization::format::cbor</name>
    <filename>structrll_1_1serialization_1_1format_1_1cbor.html</filename>
  </compound>
  <compound kind="struct">
    <name>rll::detail::char_or_throw</name>
    <filename>structrll_1_1detail_1_1char__or__throw.html</filename>
    <templarg>typename T</templarg>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a5101c85f3ea5fc735e6b58eecdd82b20</anchor>
      <arglist>(T const *&amp;it, T const *begin, T const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a1d55e5d5fca1500f08e3ee7d1885ad80</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::detail::char_reader</name>
    <filename>structrll_1_1detail_1_1char__reader.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>rll::detail::char_reader&lt; char &gt;</name>
    <filename>structrll_1_1detail_1_1char__reader_3_01char_01_4.html</filename>
    <base>utf8_reader&lt; char &gt;</base>
    <base>char_or_throw&lt; char &gt;</base>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1char__reader_3_01char_01_4.html</anchorfile>
      <anchor>a97b6201f8c200b69ad6635de0c41937b</anchor>
      <arglist>(char const *&amp;it, char const *end, bool &amp;error, u32 &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf8_next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>acd9e74a16774ead07d7c96eaf2703f74</anchor>
      <arglist>(char const *&amp;it, char const *end, bool &amp;error, u32 &amp;error_symbol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf8_code_point</name>
      <anchorfile>structrll_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>a572039ce88636d4c364dc01938e3a472</anchor>
      <arglist>(uint8_t byte, bool &amp;correct) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr u32</type>
      <name>trailing_utf8_code_point</name>
      <anchorfile>structrll_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>a5caef6f52ef5949ea26e745b2df2a0a9</anchor>
      <arglist>(char const *&amp;it, char const *end, bool &amp;correct) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a5101c85f3ea5fc735e6b58eecdd82b20</anchor>
      <arglist>(char const *&amp;it, char const *begin, char const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a1d55e5d5fca1500f08e3ee7d1885ad80</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::detail::char_reader&lt; char16_t &gt;</name>
    <filename>structrll_1_1detail_1_1char__reader_3_01char16__t_01_4.html</filename>
    <base>utf16_reader&lt; char16_t &gt;</base>
    <base>char_or_throw&lt; char16_t &gt;</base>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1char__reader_3_01char16__t_01_4.html</anchorfile>
      <anchor>ac95426c557a6942ef76eae195453ddca</anchor>
      <arglist>(char16_t const *&amp;it, char16_t const *end, bool &amp;error, u32 &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf16_next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>a797b8f1e7ae6bd52425e3654396c5125</anchor>
      <arglist>(char16_t const *&amp;it, char16_t const *end, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf16_code_point</name>
      <anchorfile>structrll_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>a1016e1cc58541cfef96b045f02ca3c15</anchor>
      <arglist>(uint16_t value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a5101c85f3ea5fc735e6b58eecdd82b20</anchor>
      <arglist>(char16_t const *&amp;it, char16_t const *begin, char16_t const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a1d55e5d5fca1500f08e3ee7d1885ad80</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::detail::char_reader&lt; char32_t &gt;</name>
    <filename>structrll_1_1detail_1_1char__reader_3_01char32__t_01_4.html</filename>
    <base>utf32_reader&lt; char32_t &gt;</base>
    <base>char_or_throw&lt; char32_t &gt;</base>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1char__reader_3_01char32__t_01_4.html</anchorfile>
      <anchor>a0a0f0194a21059fabb3bd38c0b74c828</anchor>
      <arglist>(char32_t const *&amp;it, char32_t const *end, bool &amp;error, u32 &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf32_next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1utf32__reader.html</anchorfile>
      <anchor>a963bbcd17bd31b2e44f22d5b81bca844</anchor>
      <arglist>(char32_t const *&amp;it, char32_t const *, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a5101c85f3ea5fc735e6b58eecdd82b20</anchor>
      <arglist>(char32_t const *&amp;it, char32_t const *begin, char32_t const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a1d55e5d5fca1500f08e3ee7d1885ad80</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::detail::char_reader&lt; char8_t &gt;</name>
    <filename>structrll_1_1detail_1_1char__reader_3_01char8__t_01_4.html</filename>
    <base>utf8_reader&lt; char8_t &gt;</base>
    <base>char_or_throw&lt; char8_t &gt;</base>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1char__reader_3_01char8__t_01_4.html</anchorfile>
      <anchor>aab513d74b883e7959b954abe74adf0e1</anchor>
      <arglist>(char8_t const *&amp;it, char8_t const *end, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf8_next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>acd9e74a16774ead07d7c96eaf2703f74</anchor>
      <arglist>(char8_t const *&amp;it, char8_t const *end, bool &amp;error, u32 &amp;error_symbol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf8_code_point</name>
      <anchorfile>structrll_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>a572039ce88636d4c364dc01938e3a472</anchor>
      <arglist>(uint8_t byte, bool &amp;correct) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr u32</type>
      <name>trailing_utf8_code_point</name>
      <anchorfile>structrll_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>a5caef6f52ef5949ea26e745b2df2a0a9</anchor>
      <arglist>(char8_t const *&amp;it, char8_t const *end, bool &amp;correct) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a5101c85f3ea5fc735e6b58eecdd82b20</anchor>
      <arglist>(char8_t const *&amp;it, char8_t const *begin, char8_t const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a1d55e5d5fca1500f08e3ee7d1885ad80</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::detail::char_reader&lt; wchar_t &gt;</name>
    <filename>structrll_1_1detail_1_1char__reader_3_01wchar__t_01_4.html</filename>
    <base>utf16_reader&lt; wchar_t &gt;</base>
    <base>utf32_reader&lt; wchar_t &gt;</base>
    <base>char_or_throw&lt; wchar_t &gt;</base>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1char__reader_3_01wchar__t_01_4.html</anchorfile>
      <anchor>ab467931a832f08c18fffde21facdbca7</anchor>
      <arglist>(wchar_t const *&amp;it, wchar_t const *end, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf16_next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>a797b8f1e7ae6bd52425e3654396c5125</anchor>
      <arglist>(wchar_t const *&amp;it, wchar_t const *end, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf16_code_point</name>
      <anchorfile>structrll_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>a1016e1cc58541cfef96b045f02ca3c15</anchor>
      <arglist>(uint16_t value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf32_next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1utf32__reader.html</anchorfile>
      <anchor>a963bbcd17bd31b2e44f22d5b81bca844</anchor>
      <arglist>(wchar_t const *&amp;it, wchar_t const *, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a5101c85f3ea5fc735e6b58eecdd82b20</anchor>
      <arglist>(wchar_t const *&amp;it, wchar_t const *begin, wchar_t const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrll_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a1d55e5d5fca1500f08e3ee7d1885ad80</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::configuration_file</name>
    <filename>classrll_1_1configuration__file.html</filename>
    <templarg>typename F</templarg>
    <templarg>typename T</templarg>
    <templarg>typename</templarg>
    <base>rll::io::filedevice</base>
    <member kind="function">
      <type></type>
      <name>configuration_file</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>aaea80546553197b92d528c6cbf889f5b</anchor>
      <arglist>(std::filesystem::path path, saving_policy policy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>configuration_file</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>a2cbf42a254baac3199d31383cdd9dbd8</anchor>
      <arglist>(std::string_view const filename, std::filesystem::path const &amp;folder, saving_policy policy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>configuration_file</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>af3a28ccb29c8f3c9b343f4ba03f930ea</anchor>
      <arglist>(configuration_file const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>configuration_file</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>ab773adf3f10e038f08c4add3ccd318b9</anchor>
      <arglist>(configuration_file &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~configuration_file</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>a5966bc8fdc7e4988bf1dda36a2d5d57d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>ac4925a932d566338b24083fc90d1663c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>enum saving_policy</type>
      <name>saving_policy</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>a4143f0da4e0a16e96ce35fc88919a58a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>values</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>abb88f239ac64af80264006f350346145</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>values_mut</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>a18b23cfa62160ce39d8ee90ca9873062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>default_values</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>a2072cf0c9c978da94cc846c0918e302a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>default_values_mut</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>a8581fce30e861d2dd9fe4a3ae24592dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>load</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>aa938536b89bd302cf8c722ec8e3a845d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>save</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>a4c91ab07d0b349c87b666914fdd170d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>revert_to_default</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>a01e40a998e63b1a0d3cf48c00951dc2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>ac7ce1e4527435abb3d0e351560c8ff28</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>operator()</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>af86cf8f8d43f86996b55aad08f98856d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>a68bd57dfac056f8e790acbae8335a66d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>configuration_file &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>a6d1adc499c0dc8b7642db33b5a273b61</anchor>
      <arglist>(configuration_file const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>configuration_file &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1configuration__file.html</anchorfile>
      <anchor>ac785a7654f79803f3ddf8aa63a6689cc</anchor>
      <arglist>(configuration_file &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>path</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>af11442a65ead0dd9e826bde916b132f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>suffixed_path</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a65c9cdc0c78811436a8f042ec0f95c5c</anchor>
      <arglist>(std::string_view const suffix) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a7011f8cd512d96566291d255bd0675c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_regular_file</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a35d137f5cc9bffeedd11360095872a9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a6191895aa7c0514bbdedc22663955929</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result&lt; std::string &gt;</type>
      <name>try_read</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a736cd984d5c093dab8c309b7e22d78ad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ae1c065119e5d236784a84cccd17b8bdb</anchor>
      <arglist>(std::string_view content) const noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>try_write</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a11d7c381e63746198b6c861950ae4c75</anchor>
      <arglist>(std::string_view content) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>read_from</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a4ef1516ee5fa402697077febc254461e</anchor>
      <arglist>(std::filesystem::path const &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result&lt; std::string &gt;</type>
      <name>try_read_from</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a1b06730a3c17168958c4281627cf928f</anchor>
      <arglist>(std::filesystem::path const &amp;path) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write_to</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ab12e4daaa3e42ea772957d75b0c83205</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept(false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result</type>
      <name>try_write_to</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a9eda7ac0c34ec83953f51c16d16af8e0</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>write_permissions</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a33d0a980918c24622ccfeda453f91c10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::const_overload_t</name>
    <filename>structrll_1_1const__overload__t.html</filename>
    <templarg>typename... Args</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structrll_1_1const__overload__t.html</anchorfile>
      <anchor>ae3da5b38f3b18f4f5505797db9fdc982</anchor>
      <arglist>(R(T::*ptr)(Args...) const) const noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>of</name>
      <anchorfile>structrll_1_1const__overload__t.html</anchorfile>
      <anchor>a6072868ec3f7e7cd93c3d8ee56e72467</anchor>
      <arglist>(R(T::*ptr)(Args...) const) noexcept -&gt; decltype(ptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::contract_violation</name>
    <filename>structrll_1_1contract__violation.html</filename>
    <member kind="variable">
      <type>contract_type</type>
      <name>type</name>
      <anchorfile>structrll_1_1contract__violation.html</anchorfile>
      <anchor>a320e9e52ded5d55e7422db287c2b5723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>message</name>
      <anchorfile>structrll_1_1contract__violation.html</anchorfile>
      <anchor>a499f0f9998ccef9aa9acdcf4b612a498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_location</type>
      <name>location</name>
      <anchorfile>structrll_1_1contract__violation.html</anchorfile>
      <anchor>a165c9a3a603bfc1027bed6bfee62650a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::deleter</name>
    <filename>structrll_1_1deleter.html</filename>
    <templarg>typename R</templarg>
    <templarg>typename T</templarg>
    <templarg>R(*)(T) F</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structrll_1_1deleter.html</anchorfile>
      <anchor>a541a2fa3f87cce3e65ca32c252ac9a78</anchor>
      <arglist>(U &amp;ref) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::dirs</name>
    <filename>classrll_1_1dirs.html</filename>
    <member kind="function">
      <type></type>
      <name>dirs</name>
      <anchorfile>classrll_1_1dirs.html</anchorfile>
      <anchor>a148ffd49aae5dce25fa1e05da9ca0c0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~dirs</name>
      <anchorfile>classrll_1_1dirs.html</anchorfile>
      <anchor>a5a2916755f1655d908e61df388961e15</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dirs</name>
      <anchorfile>classrll_1_1dirs.html</anchorfile>
      <anchor>ad27ced85e408a578f587474c2cbf2b03</anchor>
      <arglist>(dirs const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dirs</name>
      <anchorfile>classrll_1_1dirs.html</anchorfile>
      <anchor>a54d4b001b7d82f9819dd7102a227dd16</anchor>
      <arglist>(dirs &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>dirs &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1dirs.html</anchorfile>
      <anchor>a7532a516dc7d6f5e7f29c5fa189ffe5f</anchor>
      <arglist>(dirs const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>dirs &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1dirs.html</anchorfile>
      <anchor>a9b64fa2bb97c4c73bcb47917a7ea25e1</anchor>
      <arglist>(dirs &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>user_home</name>
      <anchorfile>classrll_1_1dirs.html</anchorfile>
      <anchor>a99c17aba430885f8647961b9a080990e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dl_info</name>
    <filename>structdl__info.html</filename>
    <member kind="variable">
      <type>char const  *</type>
      <name>dli_fname</name>
      <anchorfile>structdl__info.html</anchorfile>
      <anchor>a6aa5214c9408aa874e86148a1483eb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>dli_fbase</name>
      <anchorfile>structdl__info.html</anchorfile>
      <anchor>aaa4f56a92441a0e19e051d2d19c59c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const  *</type>
      <name>dli_sname</name>
      <anchorfile>structdl__info.html</anchorfile>
      <anchor>a5a72088007a155d3e8061d7830f6baae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>dli_saddr</name>
      <anchorfile>structdl__info.html</anchorfile>
      <anchor>a3f8467e8bb3dadfbfe220de88769f07f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::nullopt_t::do_not_use</name>
    <filename>structrll_1_1nullopt__t_1_1do__not__use.html</filename>
  </compound>
  <compound kind="class">
    <name>rll::io::filedevice</name>
    <filename>classrll_1_1io_1_1filedevice.html</filename>
    <member kind="function">
      <type></type>
      <name>filedevice</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ac34233253ad8f6033e08a9b09395ea73</anchor>
      <arglist>(std::filesystem::path path)</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>path</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>af11442a65ead0dd9e826bde916b132f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>suffixed_path</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a65c9cdc0c78811436a8f042ec0f95c5c</anchor>
      <arglist>(std::string_view const suffix) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a7011f8cd512d96566291d255bd0675c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_regular_file</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a35d137f5cc9bffeedd11360095872a9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a6191895aa7c0514bbdedc22663955929</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result&lt; std::string &gt;</type>
      <name>try_read</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a736cd984d5c093dab8c309b7e22d78ad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ae1c065119e5d236784a84cccd17b8bdb</anchor>
      <arglist>(std::string_view content) const noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>try_write</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a11d7c381e63746198b6c861950ae4c75</anchor>
      <arglist>(std::string_view content) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>read_from</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a4ef1516ee5fa402697077febc254461e</anchor>
      <arglist>(std::filesystem::path const &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result&lt; std::string &gt;</type>
      <name>try_read_from</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a1b06730a3c17168958c4281627cf928f</anchor>
      <arglist>(std::filesystem::path const &amp;path) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write_to</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ab12e4daaa3e42ea772957d75b0c83205</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept(false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result</type>
      <name>try_write_to</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a9eda7ac0c34ec83953f51c16d16af8e0</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>write_permissions</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a33d0a980918c24622ccfeda453f91c10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::fixed_string</name>
    <filename>structrll_1_1fixed__string.html</filename>
    <templarg>std::size_t N</templarg>
    <member kind="typedef">
      <type>char</type>
      <name>value_type</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>acac7bad52de00665c0d7906d13f04133</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  *</type>
      <name>const_pointer</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>aa38c2161a07b91988ba31fcbd5c6b631</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a48b4a5cb4f9dcfdcbdfe4ac4a1dbd603</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_pointer</type>
      <name>const_iterator</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>aed82b23f46453f9ad4542dad5d9bd490</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>ab011acd543666c9fa4738d234ed15099</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a6d6a61e850856452280ff43fcffcc714</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>af648e97927a902c80b32bcd6aecc8b92</anchor>
      <arglist>(T const (&amp;data)[N+1]) noexcept(noexcept(detail::char_reader&lt; T &gt;::has_throw()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>aa3da40c1dff6ed19bd38d976cc7d478a</anchor>
      <arglist>(T const (&amp;data)[N+1], bool &amp;error) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a3df157d1c17b46d0db1a83a40b66dbbf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>affd5be284ccb85aadf13e10b14660b78</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a2f10b25e80bc5b57c80067f6a5fed699</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a000fdb69f20ff6064ca2b482fe747aa8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>ae23f764e1b5ecd8978db0303107cea51</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a691430effbaa17716de09f81ac490657</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>ac122101b11df1413ca1395700f04a1f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>adaf88274c3d9186a159c9efe996d8bbc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a73907b83b9ddca240e1ad505fd020f3d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>size</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>adffd2f701db2a74642e57bc003de3f14</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>capacity</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>af8ae500ecb4639cdf0ae735773c5df14</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>ae87b2da4485a355cc9fd2f567d910a6c</anchor>
      <arglist>(std::size_t const n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>ad8c2caa8ee0eb4abe8c738652720f550</anchor>
      <arglist>(std::size_t n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>front</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>af11ae1a149167b7dc93128aff51f6e2d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>back</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>af62adc996544bc969be694811bc951e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a3d9ec7f980e1c16dcade2d18cff2326e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>aea200f5e10c40ee723c564c126998ff2</anchor>
      <arglist>(fixed_string&lt; N2 &gt; const &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>hash</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a5b942395fa76eb374d15864ae02ffc56</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a4be610048fd6f52e8aa3cf3f2b7d0553</anchor>
      <arglist>(fixed_string &amp;other) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>adfac867dc5f9951ceb9a0a689ffc6500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>_data</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a8bf449dc2a64f2659d4e845cc9b71c60</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>max_length</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>ac6883f271b8027cd42e746676620075b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>ae28feab2b8b12f399fde8628fc2ab9ee</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a0a9bb85d084159cacc0d21731ec91368</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>aa7dd93bcdcaf4e5a0c5e8c4b26587002</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a724539a6b81f3604e7444672bc4c6958</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a1f87e55119aabe4d4d98130e06871bf3</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a43a4d621e2b8ef18c1fb1c8a6672276f</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr fixed_string&lt; N - 1 &gt;</type>
      <name>make_fixed_string</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a0c2415eac14858f828fed325da7a75ac</anchor>
      <arglist>(T const(&amp;data)[N]) noexcept(noexcept(fixed_string&lt; N - 1 &gt;(data)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr fixed_string&lt; N - 1 &gt;</type>
      <name>make_fixed_string</name>
      <anchorfile>structrll_1_1fixed__string.html</anchorfile>
      <anchor>a4e68bfdf194edf83a741545e433f76e3</anchor>
      <arglist>(T const(&amp;data)[N], bool &amp;code) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::fixed_string&lt; 0 &gt;</name>
    <filename>structrll_1_1fixed__string_3_010_01_4.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>value_type</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a6bcc20b5c42e31b290654d023c74811f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  *</type>
      <name>const_pointer</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a6e79eb044016d1df9d58078f850c59c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a655db255f4565afb7627e37dff3c03d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_pointer</type>
      <name>const_iterator</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a51de8fe03c4119727f62c6004d539c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a53b21940e9b156069891f2a5a291bdd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a4123e043540d7a07255de481dad67c38</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a45b2c4bf93ea5c6268145a3c32f67b65</anchor>
      <arglist>(char const *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ab903e0569719af2f2870985e320f43a7</anchor>
      <arglist>(wchar_t const *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a151e86b7100ec69dc29d8c4d9e12f14e</anchor>
      <arglist>(char16_t const *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ad10bb6033a89b9e52b31af6714e4c772</anchor>
      <arglist>(char32_t const *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a54ff86b32d9687f4a9fe735e50fd7c25</anchor>
      <arglist>(char const *, bool &amp;code) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ad269f72c1caa546e392168f5b333dfdc</anchor>
      <arglist>(wchar_t const *, bool &amp;code) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ae5dea2e5bb249bfc44147126686dc5d7</anchor>
      <arglist>(char16_t const *, bool &amp;code) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a768f002d3ccdd4da42edbd310398a8b0</anchor>
      <arglist>(char32_t const *, bool &amp;code) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>adea16067325a48f2dfa7362320345a57</anchor>
      <arglist>(const char8_t *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a9dada187e947836b86ee3f8e3a0caafb</anchor>
      <arglist>(char8_t const *, bool &amp;code) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a580cf974181e75f8d7f9543e5769b769</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>abc869fd62d350d93742cd7004941fbb3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a78415f00cf24acf2a6f3003fe1a54cba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a4cd75f238f2943a63e12ea046b6bd7f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>aee9ba9e575b5f6418b8a57cef4068212</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a896ce59eb07e1cd80764b582fac88a38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a21dc9a0794dd835c753a3f1cc71df027</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a070e26ad613fa47629908695df3621d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ae25bbb2e2823f4f7a4e50544e0eabd76</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>size</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a4d967b13ed6c5206fd9af0b2781b7f89</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>capacity</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a6833b844da927159e4ddf5ff8f25a1f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a7acb64f3f49e9d796c2ab1727d59dad5</anchor>
      <arglist>(std::size_t n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>aa6fb2b4b8f7c6210f2f4b17cee0d3df3</anchor>
      <arglist>(std::size_t) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>front</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>afec418c9be0cb66408693753f7ea9dbe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>back</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a35d66f3a03c64d5e8355fa23cbb65ecb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a73c3f3192793a86824cf6a1ac7fbd14f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ae20eb590a08b0171351c1fe803cff786</anchor>
      <arglist>(fixed_string&lt; N2 &gt; const &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>hash</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>afe5fc0e4036e21f9f16950f6e50247ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a6e99fcd86e14e36ef6ea1d096a930aa2</anchor>
      <arglist>(fixed_string &amp;other) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_length</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a6107bb831a370361dbb981a85c3fc1fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>length</name>
      <anchorfile>structrll_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a02114dfff0d863110564fe5c75e3f73a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::serialization::format::flexbuffer</name>
    <filename>structrll_1_1serialization_1_1format_1_1flexbuffer.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rll::angle&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rll_1_1angle_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01rll_1_1angle_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>ad40c9ba8799ddb6e10079a161b3110d2</anchor>
      <arglist>(format_parse_context &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rll_1_1angle_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>aa4adee91121d2d162b8026b7176bf093</anchor>
      <arglist>(rll::angle&lt; T &gt; const &amp;val, format_context &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rll::point2d&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rll_1_1point2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01rll_1_1point2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a8223726b2d7915ac8cd9af2434aad232</anchor>
      <arglist>(format_parse_context &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rll_1_1point2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a3140923ae589b572447256898d7308ef</anchor>
      <arglist>(rll::point2d&lt; T &gt; const &amp;val, format_context &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rll::size2d&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rll_1_1size2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01rll_1_1size2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a55f36b7dcf4d3ea70ff88fe498e66fe2</anchor>
      <arglist>(format_parse_context &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rll_1_1size2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>abdaee2d7a26b86e80d550c04afb24fb0</anchor>
      <arglist>(rll::size2d&lt; T &gt; const &amp;val, format_context &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rll::source_location &gt;</name>
    <filename>structfmt_1_1formatter_3_01rll_1_1source__location_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rll::u128 &gt;</name>
    <filename>structfmt_1_1formatter_3_01rll_1_1u128_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rll::uuid &gt;</name>
    <filename>structfmt_1_1formatter_3_01rll_1_1uuid_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rll::vector2d&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rll_1_1vector2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01rll_1_1vector2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a80a36a7a68a2a73494f0e04213c9bc2d</anchor>
      <arglist>(format_parse_context &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rll_1_1vector2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a1327fdbc582d25d455db94cd6a100891</anchor>
      <arglist>(rll::vector2d&lt; T &gt; const &amp;val, format_context &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rll::velocity&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rll_1_1velocity_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01rll_1_1velocity_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a3f13a0d54215f5cd7aa94b02d8fcb74f</anchor>
      <arglist>(format_parse_context &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rll_1_1velocity_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a01d1d78628464d6a6ce9b88f60f2fbda</anchor>
      <arglist>(rll::velocity&lt; T &gt; const &amp;val, format_context &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rll::version &gt;</name>
    <filename>structfmt_1_1formatter_3_01rll_1_1version_01_4.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rll_1_1version_01_4.html</anchorfile>
      <anchor>a15b7c6bea311d76b5f186d09a3adcfee</anchor>
      <arglist>(rll::version const &amp;v, FormatContext &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::serialization::format::generic</name>
    <filename>structrll_1_1serialization_1_1format_1_1generic.html</filename>
  </compound>
  <compound kind="struct">
    <name>rll::oslayer::android::guid_info</name>
    <filename>structrll_1_1oslayer_1_1android_1_1guid__info.html</filename>
    <member kind="function">
      <type>guid_info</type>
      <name>from_env</name>
      <anchorfile>structrll_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>a383c95b9f4bef8529dc92aa857e651ea</anchor>
      <arglist>(JNIEnv *env) const</arglist>
    </member>
    <member kind="variable">
      <type>JNIEnv *</type>
      <name>env</name>
      <anchorfile>structrll_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>a3fb6bdde8e15337bc890cddd9e3a7973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass</type>
      <name>uuid_class</name>
      <anchorfile>structrll_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>a989990d714a52dac088619185e4bbe21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID</type>
      <name>new_guid_method</name>
      <anchorfile>structrll_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>ac72638d6ec4dbe718abd184e87fbfdc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID</type>
      <name>most_significant_bits_method</name>
      <anchorfile>structrll_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>a5a2ce6f06e32360d5cf72cbefa12360e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID</type>
      <name>least_significant_bits_method</name>
      <anchorfile>structrll_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>a74d1f3b17050664d7eb55fa32be9c2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::thread::id</type>
      <name>init_thread_id</name>
      <anchorfile>structrll_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>a43aefeed4b33bc24071375eafc9d10d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rll::point2d&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rll_1_1point2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01rll_1_1point2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a8e252ca61666a225a4db9f5abf55512c</anchor>
      <arglist>(rll::point2d&lt; T &gt; const &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rll::size2d&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rll_1_1size2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01rll_1_1size2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a60b01ce9f3ae46cea5bd64bd44b332c7</anchor>
      <arglist>(rll::size2d&lt; T &gt; const &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rll::u128 &gt;</name>
    <filename>structstd_1_1hash_3_01rll_1_1u128_01_4.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01rll_1_1u128_01_4.html</anchorfile>
      <anchor>aa7280f9ca6f584726b7f45b69bd5abdc</anchor>
      <arglist>(rll::u128 const &amp;value) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rll::vector2d&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rll_1_1vector2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01rll_1_1vector2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>af917ca0c70aa137eec792d846f9695a2</anchor>
      <arglist>(rll::vector2d&lt; T &gt; const &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::is_any_of</name>
    <filename>structrll_1_1is__any__of.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename... U</templarg>
    <base>disjunction&lt; std::is_same&lt; T, U &gt;... &gt;</base>
  </compound>
  <compound kind="struct">
    <name>rll::is_num</name>
    <filename>structrll_1_1is__num.html</filename>
    <templarg>typename T</templarg>
    <base>integral_constant&lt; bool, std::is_integral_v&lt; plain_type_t&lt; T &gt; &gt; or std::is_floating_point_v&lt; plain_type_t&lt; T &gt; &gt; &gt;</base>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_num_v</name>
      <anchorfile>structrll_1_1is__num.html</anchorfile>
      <anchor>a23272b2567f5687eaec97876db4f96c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::is_partially_serializable</name>
    <filename>structrll_1_1is__partially__serializable.html</filename>
    <templarg>typename</templarg>
    <templarg>typename</templarg>
    <templarg>typename</templarg>
    <templarg>typename</templarg>
    <base>std::false_type</base>
  </compound>
  <compound kind="struct">
    <name>rll::is_partially_serializable&lt; T, F, R, std::void_t&lt; decltype(partial_serializer&lt; T, F, R &gt;::serialize), decltype(partial_serializer&lt; T, F, R &gt;::deserialize)&gt; &gt;</name>
    <filename>structrll_1_1is__partially__serializable_3_01_t_00_01_f_00_01_r_00_01std_1_1void__t_3_01decltypec6429267b4f91198b8eee42d84ad8bb2.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename F</templarg>
    <templarg>typename R</templarg>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>rll::is_serializable</name>
    <filename>structrll_1_1is__serializable.html</filename>
    <templarg>typename</templarg>
    <templarg>typename</templarg>
    <templarg>typename</templarg>
    <base>std::false_type</base>
  </compound>
  <compound kind="struct">
    <name>rll::is_serializable&lt; T, F, std::void_t&lt; decltype(serializer&lt; T, F &gt;::serialize), decltype(serializer&lt; T, F &gt;::deserialize)&gt; &gt;</name>
    <filename>structrll_1_1is__serializable_3_01_t_00_01_f_00_01std_1_1void__t_3_01decltype_07serializer_3_01_09b274941dde756e7684b74d76e188f0.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename F</templarg>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>rll::serialization::format::json</name>
    <filename>structrll_1_1serialization_1_1format_1_1json.html</filename>
  </compound>
  <compound kind="class">
    <name>rll::library</name>
    <filename>classrll_1_1library.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>load_hint</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a2224e7efe8bd878d98ab0ff679bc201a</anchor>
      <arglist></arglist>
      <enumvalue file="classrll_1_1library.html" anchor="a2224e7efe8bd878d98ab0ff679bc201aa334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="classrll_1_1library.html" anchor="a2224e7efe8bd878d98ab0ff679bc201aa876bbde99776dafa22e5dd531aeeb3ca">resolve_all_symbols</enumvalue>
      <enumvalue file="classrll_1_1library.html" anchor="a2224e7efe8bd878d98ab0ff679bc201aa32b835e2209e19d28680b9e4042c69ce">export_external_symbols</enumvalue>
      <enumvalue file="classrll_1_1library.html" anchor="a2224e7efe8bd878d98ab0ff679bc201aa39e4a9c1579d162561eb7ece8a3c04b5">load_archive_member</enumvalue>
      <enumvalue file="classrll_1_1library.html" anchor="a2224e7efe8bd878d98ab0ff679bc201aa1d0f630f209180de7902a58f075f00c2">prevent_unload</enumvalue>
      <enumvalue file="classrll_1_1library.html" anchor="a2224e7efe8bd878d98ab0ff679bc201aad8fd587ca0ea9894c84dc614e0e2aa0e">deep_bind</enumvalue>
    </member>
    <member kind="typedef">
      <type>void(*)()</type>
      <name>function_pointer_type</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a92ef36db3fe70a0276b2b37d3c7d9b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>library</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a995b0b9e45ebe7f68fb43f170777c720</anchor>
      <arglist>(std::filesystem::path path, library::load_hint hints=library::load_hint::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>library</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a04d182eaba09221a83afa3add3659e98</anchor>
      <arglist>(library const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>library &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a84cab970c555c8b34cbf38b0d09149d7</anchor>
      <arglist>(library const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>library</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a7b951c99aba8311b0bb23ba4abbeacfa</anchor>
      <arglist>(library &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>library &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>ac7a95fe02b17f00f912e51d72a05dc5a</anchor>
      <arglist>(library &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~library</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>ae841300a6fa4edac973ae83eab0f780e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>path</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a7437a75e767549047892c7755aff9c25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a51f8aad590aaa4bb0f3a7bfbe5095168</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>load_hint</type>
      <name>load_hints</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>aaa45a0a3d9e498cef4a8a335ec59a264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loaded</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>acad6735518f92ec8a309de915a7e52a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a7ef74848abf97d05fdeee12c959bc629</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>load</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a7bc2c03aaa463af9882dc338c653c48d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>unload</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a3177a9cbdcd8972d9cf9a79829506804</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>result&lt; library::function_pointer_type &gt;</type>
      <name>resolve</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>adeed0bf9b05599c592ea2e1ec617b3f1</anchor>
      <arglist>(std::string_view symbol) noexcept</arglist>
    </member>
    <member kind="function">
      <type>result&lt; library::function_pointer_type &gt;</type>
      <name>operator[]</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a558c836fba5bb3b2ff5b4717a2c6c107</anchor>
      <arglist>(std::string_view const symbol) noexcept</arglist>
    </member>
    <member kind="function">
      <type>result&lt; F &gt;</type>
      <name>resolve_cast</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>ac3f3373307913a61b09379b7e4f03529</anchor>
      <arglist>(std::string_view const symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_library</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a9e5c0185dd49f79e74234ea956cc4567</anchor>
      <arglist>(std::filesystem::path const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>constexpr rll::library::load_hint</type>
      <name>operator|</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a497b3e4ce2698f596d9c743ff5b97287</anchor>
      <arglist>(rll::library::load_hint const lhs, rll::library::load_hint const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rll::library::load_hint</type>
      <name>operator&amp;</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>aeef77ca9fbbb0060eb80f376d0ca447e</anchor>
      <arglist>(rll::library::load_hint const lhs, rll::library::load_hint const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rll::library::load_hint</type>
      <name>operator^</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a8c2141bf714bf050113b1675031a0b40</anchor>
      <arglist>(rll::library::load_hint const lhs, rll::library::load_hint const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rll::library::load_hint</type>
      <name>operator~</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a61643a6808f6d794b94646bcc49feecc</anchor>
      <arglist>(rll::library::load_hint const value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rll::library::load_hint &amp;</type>
      <name>operator|=</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>aa4d4d44821ae828baf44a1d6180581de</anchor>
      <arglist>(rll::library::load_hint &amp;lhs, rll::library::load_hint const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rll::library::load_hint &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>aef0624518052b8664b38203ca32c5def</anchor>
      <arglist>(rll::library::load_hint &amp;lhs, rll::library::load_hint const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rll::library::load_hint &amp;</type>
      <name>operator^=</name>
      <anchorfile>classrll_1_1library.html</anchorfile>
      <anchor>a994e9d86b0c49db7a41af892975e0234</anchor>
      <arglist>(rll::library::load_hint &amp;lhs, rll::library::load_hint const rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::crypto::md5</name>
    <filename>classrll_1_1crypto_1_1md5.html</filename>
    <base>rll::crypto::basic_hasher</base>
    <member kind="typedef">
      <type>std::array&lt; u8, 16 &gt;</type>
      <name>digest_type</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>ab518c665dfbfd783f6705d8bd932154f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>md5</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>a320ddb1c0c1baf6317bf0b30eb9c4da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>md5</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>a3614ba1464b70da5690009f68f1611e2</anchor>
      <arglist>(md5 const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>md5</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>ad3755aca562ede1ea249a34b7df71745</anchor>
      <arglist>(md5 &amp;&amp;) noexcept=delete</arglist>
    </member>
    <member kind="function">
      <type>md5 &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>a6074fab850955725ea5fabedb5cded1d</anchor>
      <arglist>(md5 const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>md5 &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>ac06879c104e28cfbc076e13d550f7eff</anchor>
      <arglist>(md5 &amp;&amp;) noexcept=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~md5</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>abd85d2e8a647adff419b394f8f2f6226</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>append</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>aa92bf2722e9aa9a3cef7f2d206f30d5f</anchor>
      <arglist>(std::string const &amp;str) override</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>append</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>a702e2bd76e4d8f6c6a66d237e6b510a9</anchor>
      <arglist>(std::string_view str) override</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>append</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>a768c1286f9eaed6a5422ac5739f1bad3</anchor>
      <arglist>(void const *str, std::size_t len) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>a1c52784af08915f5d53e2e5be7699fc3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>hash_string</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>a10024c8b6e3b1478874516ecad57811d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>digest_type</type>
      <name>hash</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>ae2cc1c68b7254aad520f023f3429c025</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uuid</type>
      <name>hash_uuid</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>a2ad7fbf6466c5d1db8b9b02f729bdc3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>append_raw</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>ad95e7fe2739524691bf70b20a4ede29b</anchor>
      <arglist>(T const &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>ac7bb904aec05e77ba563c29da3e9a8d1</anchor>
      <arglist>(std::string const &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>ae13326a3a175936d1daeca667e8b1905</anchor>
      <arglist>(std::string_view const str)</arglist>
    </member>
    <member kind="function">
      <type>basic_hasher &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrll_1_1crypto_1_1basic__hasher.html</anchorfile>
      <anchor>aff495e6f53994fd10b324edff94660f4</anchor>
      <arglist>(T const &amp;value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>block_size</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>ac2f1ed351747883df5570d7a30b74df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>digest_size</name>
      <anchorfile>classrll_1_1crypto_1_1md5.html</anchorfile>
      <anchor>af076fbdfb837196a3995c7362d7e2a55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::serialization::format::msgpack</name>
    <filename>structrll_1_1serialization_1_1format_1_1msgpack.html</filename>
  </compound>
  <compound kind="struct">
    <name>rll::non_const_overload_t</name>
    <filename>structrll_1_1non__const__overload__t.html</filename>
    <templarg>typename... Args</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structrll_1_1non__const__overload__t.html</anchorfile>
      <anchor>a9a8d316e71031d03d2f0d5c0aec43142</anchor>
      <arglist>(R(T::*ptr)(Args...)) const noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>of</name>
      <anchorfile>structrll_1_1non__const__overload__t.html</anchorfile>
      <anchor>a6bd425178f8445b78e92e3301bb4e3bc</anchor>
      <arglist>(R(T::*ptr)(Args...)) noexcept -&gt; decltype(ptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::noncopyable</name>
    <filename>structrll_1_1noncopyable.html</filename>
    <member kind="function">
      <type></type>
      <name>noncopyable</name>
      <anchorfile>structrll_1_1noncopyable.html</anchorfile>
      <anchor>a6505d137d48b32d859343ef52bc3c9f2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~noncopyable</name>
      <anchorfile>structrll_1_1noncopyable.html</anchorfile>
      <anchor>a725bd517c2a2d683902ddf1ee096a5d3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noncopyable</name>
      <anchorfile>structrll_1_1noncopyable.html</anchorfile>
      <anchor>a8e31b5eacd763899e84ae8dfc87ca0f8</anchor>
      <arglist>(noncopyable const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>noncopyable &amp;</type>
      <name>operator=</name>
      <anchorfile>structrll_1_1noncopyable.html</anchorfile>
      <anchor>a45f96e60cdafbbcce20365903333da47</anchor>
      <arglist>(noncopyable const &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::nonmovable</name>
    <filename>structrll_1_1nonmovable.html</filename>
    <member kind="function">
      <type></type>
      <name>nonmovable</name>
      <anchorfile>structrll_1_1nonmovable.html</anchorfile>
      <anchor>a85539d9d73714a0a22852635e4b0de3f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~nonmovable</name>
      <anchorfile>structrll_1_1nonmovable.html</anchorfile>
      <anchor>ad78639a54aa9b5def335a83e0a1ece6a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nonmovable</name>
      <anchorfile>structrll_1_1nonmovable.html</anchorfile>
      <anchor>a4fad7436cd13c9b793ecbe3f28c29bc1</anchor>
      <arglist>(nonmovable &amp;&amp;) noexcept=delete</arglist>
    </member>
    <member kind="function">
      <type>nonmovable &amp;</type>
      <name>operator=</name>
      <anchorfile>structrll_1_1nonmovable.html</anchorfile>
      <anchor>a3b964cc01bb96f7ef397aa9ab5cef987</anchor>
      <arglist>(nonmovable &amp;&amp;) noexcept=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::nullopt_t</name>
    <filename>structrll_1_1nullopt__t.html</filename>
    <class kind="struct">rll::nullopt_t::do_not_use</class>
    <member kind="function">
      <type>constexpr</type>
      <name>nullopt_t</name>
      <anchorfile>structrll_1_1nullopt__t.html</anchorfile>
      <anchor>a6d7d24e603aef034bdcbfcddca479333</anchor>
      <arglist>(do_not_use, do_not_use) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::observer_ptr</name>
    <filename>classrll_1_1observer__ptr.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>ae716b76007cb948192f1fa07676d1749</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>aa21ba12a49e874159bc40d996d99440e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const  *</type>
      <name>const_pointer</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a8b526d69dded8426be4c459dc3321289</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a9f0ee73ac41e5eb39d3dd696aa1b3570</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a1d07774324a7a3173f476509ecee56c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a7b9ecd2de01907f92ad393cd802840a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>ab01b36f0cf560ba99d8bf83b7c369d33</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>aee97d8dc60a882dfa4ca1360f601fce1</anchor>
      <arglist>(std::nullptr_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a2b602cdd305e951370e1132842741946</anchor>
      <arglist>(pointer ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a2426acafecf348ea4cd6e7a642ba081a</anchor>
      <arglist>(observer_ptr&lt; U &gt; const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>ae78d8e58e8ae6982e87ec96bc51b3e9d</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>get</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a24c1ab395067a057c5ab806dad4b0b1c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>ref</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a23c30144c077cbbf811516c273e93b4d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>ref</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a2d2ba3412f1e3d4c3b088d40b3ff6091</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator*</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a11be9ade2869780b2285cac5ab492ae6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a7267e447773a64bf36807e4bd8d3f122</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a5ac790338584d8bdbd4e6a04d36967aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator pointer</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a665968f8ea9a2dcb556c391a7419f303</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>release</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>ab09515b257a97ec8b64cef4e10d77ad1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>reset</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a98fbac24a4b0605650792cbd56e9276f</anchor>
      <arglist>(pointer ptr=nullptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classrll_1_1observer__ptr.html</anchorfile>
      <anchor>a3018b2330a1fbacea5b9d15337dacbcb</anchor>
      <arglist>(observer_ptr &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::optional</name>
    <filename>classrll_1_1optional.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>af00295ccd9f71388861b1f1b275d2bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>and_then</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a0841fea59693f1df982ffbe582a9f356</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>and_then</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>abcd42142d23026d70a72df85e152c3ea</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>and_then</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a9e1fd5a8b849c7b181e6919ea32486a5</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>and_then</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>ae782247053893767cc69d687adc378ae</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>map</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a415c89a0476c71a72a8c73e0b73179b5</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>map</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a67722db533ac5c2efa0085634e612155</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>acd8d8aaa67ee287f35b4b1a2eaebbd48</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>ae1f9c2182633eb89d8096ac9d94f062c</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transform</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>ae1e137a802ef126e6c472b4cf43290b4</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transform</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>af6d505c81f51c40245d2f5b513828d7e</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>transform</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a9590a44d8e5734d509bdd734e0db5acc</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>transform</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>afabd797761709648850465b6e637f2ec</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a1497da2eb20287a7f5ce490eced827f8</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a1497da2eb20287a7f5ce490eced827f8</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a44015fbb568bb822ac293e499a92e8c8</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a44015fbb568bb822ac293e499a92e8c8</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>ae86c6c127f416720515131100f9f4a46</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>ae86c6c127f416720515131100f9f4a46</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>afced3b906ed0ceee5896e41cc6f17168</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>afced3b906ed0ceee5896e41cc6f17168</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>ad05db436777ef5a1016846f580169686</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a6b07e3b2b4181d575d6cc7a95ff61366</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a2d31f0ef496e891f0ee3b35655236a74</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>aea54a43e86661903bb42c925cfc922ee</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a524224396385a2d17e1d37c769420336</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a362b4804ec0a6d17287cbeadd5d8dfea</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a2e6802c65a8281522226148b69ff6fb8</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a3a9e7a2fd7dec9aba8ad67e2d980e35c</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; typename std::decay&lt; U &gt;::type &gt;</type>
      <name>conjunction</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a8b32287335da653c8c2b12c02036ef2b</anchor>
      <arglist>(U &amp;&amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a8a7c9acbbd267607f925c9fa375d502d</anchor>
      <arglist>(optional const &amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a4303a8fab0dd3706ff14b7605701f0d7</anchor>
      <arglist>(optional const &amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>aa5e802763fe40a0e244debf6a52881a6</anchor>
      <arglist>(optional const &amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>ad962908297e7956d7a1cdeaae64b3ae6</anchor>
      <arglist>(optional const &amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a3dc116467e6f51f5941cfa29dd5816c9</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>ab6a313035d839627973a79345f5d6f14</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a562fe028bb56d96d942b88b359658c60</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>afdaf5d65118c8a55e9b499fbe2d14bc2</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>take</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>aa99d7e8229cb51d030c1b7e5e7b24dd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a8dbfa23f9acc0e8e285d6aafdfd69838</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a41dab68a5545f24f0ec6546c2b79a458</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>af084be78bc6f91f120de85efcbdb54a2</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a844d3cd7f68cfe940d2547af3469d047</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a35ea51d2ad92660b26f5ddad2c62e7a9</anchor>
      <arglist>(detail::enable_if_t&lt; std::is_constructible&lt; T, Args... &gt;::value, std::in_place_t &gt;, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>affb32b3b5ee05959929f7d3a244d4796</anchor>
      <arglist>(detail::enable_if_t&lt; std::is_constructible&lt; T, std::initializer_list&lt; U &gt; &amp;, Args &amp;&amp;... &gt;::value, std::in_place_t &gt;, std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a4b70624dac42d74b21f677e4f8105dd0</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a4b70624dac42d74b21f677e4f8105dd0</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a8b4b7f284630d194f84bd9b27e3b70df</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a8b4b7f284630d194f84bd9b27e3b70df</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a095fc2e33e717f45ba6ebb50bbad1003</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a095fc2e33e717f45ba6ebb50bbad1003</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a57a0a2732970bf48f3d65d2386a6a266</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a53ecbecf68990a26164dc7271e1930d8</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a6936b271ae4f22d82f1081baaeff05be</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>adc4b844688dd14b44e76f60d9cff9039</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>ae87d56468197c36468b2900569dd23d7</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a73ece890446bb84c070a38a73f08fe98</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a8840d799f23f685398d79c8a2148d93f</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>emplace</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a948a3b5c9c6b67d29d35ffba27977e7e</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>detail::enable_if_t&lt; std::is_constructible&lt; T, std::initializer_list&lt; U &gt; &amp;, Args &amp;&amp;... &gt;::value, T &amp; &gt;</type>
      <name>emplace</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a554ed00423a11abb79f64ffec08746d7</anchor>
      <arglist>(std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>abcdd408993cbdbb67983ab33c45508cd</anchor>
      <arglist>(optional &amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value &amp;&amp;detail::is_nothrow_swappable&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a24582713bb54ec77d3bb3e6c08a6ac92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a0b650fc62fc50b7d66105c473bf23d6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a99960fa0395371d3ed83e0b9a65f2f1e</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const &amp;</type>
      <name>operator*</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a5c9ae806dc31751b25cbf979b2c00631</anchor>
      <arglist>() const &amp;</arglist>
    </member>
    <member kind="function">
      <type>T &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a5d2d9d73844fae7f36d715553118e2a6</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>adf4859a49a0e7a4efa67470b8e245441</anchor>
      <arglist>() const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_value</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>adfc6665f97ab31d3d0de03097bd02620</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a9e9b3ff9cbcac2f860ec54a18f043f4f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>value</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a263c92a7535f9f0de9a72cd89dcadb01</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>aa9853b263572f8c66890742756cfd17e</anchor>
      <arglist>() const &amp;</arglist>
    </member>
    <member kind="function">
      <type>T &amp;&amp;</type>
      <name>value</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>a9b42d232e49ee1d9cf28d6e063c2de40</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;&amp;</type>
      <name>value</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>ae58612fd1f0742815b96895eef6c35a5</anchor>
      <arglist>() const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>abbcd51c030bf8fbc88698a9e2e10bb36</anchor>
      <arglist>(U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_or</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>adc50bd4eaaea5b52c695cea76a91bf1a</anchor>
      <arglist>(U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classrll_1_1optional.html</anchorfile>
      <anchor>ac37489c0e11e992ef24d5706f54f11e1</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::optional&lt; T &amp; &gt;</name>
    <filename>classrll_1_1optional_3_01_t_01_6_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>value_type</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ae32c32eac0a53a2ed47f58e24817e0ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>and_then</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ad256dec0ca157f66d7e56ee6a0a60138</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>and_then</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a7acea33d0da2bc421a375e8c3719a709</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>and_then</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a7554e79c54901c49c765126c8d604016</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>and_then</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a1dceef70f58a6e9851fe3572907b992d</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>map</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab6e74ae7eed26cccc248c0edd4d7a6a3</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>map</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a75d13aabc0809886ec448a5de013ae95</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a55009df85a838503ea16238eacb9875f</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a56af686b2bab7f732da8c64896e31c11</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transform</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab3c2ed41ff925e855bbaa52b998f0848</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transform</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a826de387ba03fa869f7dddb9dffe55a2</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>transform</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab035365f09f09a69f4becd654e2f61cd</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>transform</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>aa4e3aeac37aabd43873b1949ef7f6ccb</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a441c8a19b72b66b9de1ba7f1a2fc76f5</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a441c8a19b72b66b9de1ba7f1a2fc76f5</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ac2cc0d96e17ff92ec83a6261a6c01bd5</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ac2cc0d96e17ff92ec83a6261a6c01bd5</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a5debf11dbc80653352f59438221cd61e</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a5debf11dbc80653352f59438221cd61e</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ac4f786facef467c8c5a1a8582aea57b6</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ac4f786facef467c8c5a1a8582aea57b6</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a83eaacd443fbe827350c99f375f2849c</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab5f27d32919e7afb24afb923607fe9d5</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a2bbbb22b5cd727e7c349e360583ee4eb</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ad10680fe28dbfc509de75978e7827f7e</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a2b1bc76b6666182422d2478c921c2fa4</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a80acbc53976cb975998277ccbaf7fcce</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a15b2be3979bb030848c7f675f00cd910</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>aec361cbdb344a86ff53d7c19def1b7a9</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; typename std::decay&lt; U &gt;::type &gt;</type>
      <name>conjunction</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a67e95f06e17d4a5e9b5cc2dd853e4c8f</anchor>
      <arglist>(U &amp;&amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ad03bff29263211e962d9db6774c66634</anchor>
      <arglist>(optional const &amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a9fae6ad917a22ee763d9905a0cea4913</anchor>
      <arglist>(optional const &amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ae17362448076d3618af0c8653cf7f94e</anchor>
      <arglist>(optional const &amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab09c132f1dc0c266295d15995128ad41</anchor>
      <arglist>(optional const &amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a7fa3a0c0184f405214c9a60e22f1a574</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a5234a6503b5586ec10e70732001428f7</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a5bd027b1c5b05c6572ab916ba2133f54</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a0412367fd1a3b3be6c17c4847025bb85</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>take</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a36e40b7618c07b099c8f2a181d1d8925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a99c184e3ba0f35f60faba039d298466f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab066f55862387bf46ef0e34d3b981287</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a053b041ea270495ea6779430f7c885ed</anchor>
      <arglist>(optional const &amp;rhs) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab66336fd8ca49d11d001755ba5875dde</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a355722709bfb669c63f1b3749b58c4c3</anchor>
      <arglist>(U &amp;&amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab9aa8fba9d07e2f5fdbb42c29b8c0a6b</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a3e243efe09420bd31c2686cfdd07c53c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a9943486371259c513b4d85a9e5218678</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a4608aaca8d8e21d4a7e3f03f322183ac</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>afee6714aa5a9bfb896abd2b0cf404cf4</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a8834d6c254dfa8dde19323d63da8b870</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>emplace</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ad7270bf08207b58480a72e8a253b20da</anchor>
      <arglist>(U &amp;&amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a6ca32eb5cef17d34e108b7f92aaad406</anchor>
      <arglist>(optional &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a189e5b684f77cf300eea7ca55615bf81</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a02d11408a22e33050d81b9c4d8ff7029</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>af418c75b1147ee036661b867f480c56e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const &amp;</type>
      <name>operator*</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab42526fc820d5b120614edd8afeb273c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_value</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a77f31fcef279cddc71da4bd7ce9af3bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>aea525432454cbca16684b8c0e82cc3e4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>value</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>abc179d235aab066360f65fbf473a1d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a9f7e7d1ccd95a3cf6a26181aabb4ec7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>af3aec5092e3d90f854eb205d0af57521</anchor>
      <arglist>(U &amp;&amp;u) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_or</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a214a83b949f684d01a040febfa05e109</anchor>
      <arglist>(U &amp;&amp;u) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classrll_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a2f4bcad9dd77b912315fbbd68c6d6324</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::overload_t</name>
    <filename>structrll_1_1overload__t.html</filename>
    <templarg>typename... Args</templarg>
    <base>const_overload_t&lt; Args... &gt;</base>
    <base>non_const_overload_t&lt; Args... &gt;</base>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structrll_1_1overload__t.html</anchorfile>
      <anchor>a8eb1906647f4544714a7d4f042ee3d88</anchor>
      <arglist>(R(*ptr)(Args...)) const noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structrll_1_1const__overload__t.html</anchorfile>
      <anchor>ae3da5b38f3b18f4f5505797db9fdc982</anchor>
      <arglist>(R(T::*ptr)(Args...) const) const noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structrll_1_1non__const__overload__t.html</anchorfile>
      <anchor>a9a8d316e71031d03d2f0d5c0aec43142</anchor>
      <arglist>(R(T::*ptr)(Args...)) const noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>of</name>
      <anchorfile>structrll_1_1overload__t.html</anchorfile>
      <anchor>a7e9d72e1dc75e6140a6865356e861f4d</anchor>
      <arglist>(R(*ptr)(Args...)) noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>of</name>
      <anchorfile>structrll_1_1const__overload__t.html</anchorfile>
      <anchor>a6072868ec3f7e7cd93c3d8ee56e72467</anchor>
      <arglist>(R(T::*ptr)(Args...) const) noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>of</name>
      <anchorfile>structrll_1_1non__const__overload__t.html</anchorfile>
      <anchor>a6bd425178f8445b78e92e3301bb4e3bc</anchor>
      <arglist>(R(T::*ptr)(Args...)) noexcept -&gt; decltype(ptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::partial_serializer</name>
    <filename>structrll_1_1partial__serializer.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename F</templarg>
    <templarg>typename R</templarg>
    <templarg>typename C</templarg>
    <templarg>typename</templarg>
    <member kind="function" static="yes">
      <type>static result&lt; R &gt;</type>
      <name>serialize</name>
      <anchorfile>structrll_1_1partial__serializer.html</anchorfile>
      <anchor>ac8bb2d656a82cec34f9290d3c998b3ef</anchor>
      <arglist>(T const &amp;value)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result&lt; T &gt;</type>
      <name>deserialize</name>
      <anchorfile>structrll_1_1partial__serializer.html</anchorfile>
      <anchor>af668b0c9a8321640942c044fa8cc0097</anchor>
      <arglist>(R const &amp;value)=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::pin</name>
    <filename>structrll_1_1pin.html</filename>
    <base>rll::noncopyable</base>
    <base>rll::nonmovable</base>
  </compound>
  <compound kind="struct">
    <name>rll::plain_type</name>
    <filename>structrll_1_1plain__type.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>remove_cvref_t&lt; std::remove_pointer_t&lt; T &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structrll_1_1plain__type.html</anchorfile>
      <anchor>af09a2ccc95b97c2f4138796bac32a87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_const_t&lt; type &gt;</type>
      <name>const_type</name>
      <anchorfile>structrll_1_1plain__type.html</anchorfile>
      <anchor>af1675b217d03383642807a43fad5ac2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::point2d</name>
    <filename>structrll_1_1point2d.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ac84719e6c2ef20068a5f1db3aba7dd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size2d&lt; number_type &gt;</type>
      <name>size2d_type</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>acc8141e999998510d303f9f72d2c80a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector2d&lt; number_type &gt;</type>
      <name>vector2d_type</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ad5dd4b4ac217b1887e61643f1bd7bfb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>afd4b640a9debe9dbac786dca1bfa40c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a2a281654abca9df7c9e7488e35fcafc5</anchor>
      <arglist>(number_type x, number_type y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>aa6ff95f8b96914f15cfe985dd9eb5815</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>aa8bb0896f615efccb4681d137fa4febe</anchor>
      <arglist>(size2d_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a03236b135844eb659db3f36456b7b371</anchor>
      <arglist>(vector2d&lt; number_type &gt; const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a73d9d3a3b24265b1abe5269f9f562e71</anchor>
      <arglist>(F &amp;&amp;fn) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>zip</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a088f0cbe633acb22168a54d8e29500bf</anchor>
      <arglist>(point2d const &amp;other, F &amp;&amp;fn) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d_type</type>
      <name>to_size2d</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a39a4f46fb1cc8c4cd8d77c2a32297843</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; number_type &gt;</type>
      <name>to_vector2d</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ac2da76ade5821fe9b2eab4b269b55417</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>to_f32</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a03d10466776b3151c6e192437598bccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; f64 &gt;</type>
      <name>to_f64</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ac43b8565b20b1818856d7fa49f1ea4b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; u32 &gt;</type>
      <name>to_u32</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ac8a94829d2221520cf4ce8ca80fd49b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; u64 &gt;</type>
      <name>to_u64</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>aa2f7085e6b2d87780f92cdcf4d662827</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; usize &gt;</type>
      <name>to_usize</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a901dfbe94ff84e7463af5835f9396545</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; i32 &gt;</type>
      <name>to_i32</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>aa8107d65d8d4e46a4ae060dd073a9f8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; i64 &gt;</type>
      <name>to_i64</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a0665db459743717b327b6e09b1e731a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; isize &gt;</type>
      <name>to_isize</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a5ba8fb9a9aeea58261209e7442827f98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>div_euclid</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>add66c271e22982e157ef2ed8ff3df0e7</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>rem_euclid</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a2a1a0b464960dbfc8173e2ff185f34be</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator+</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>aa0d48a652c427e81c133e10bd4501ea0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator-</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a6f67c6c6ab97d0c1ad18d0ceacbafa95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a4ac3e244cb6bd9f12124af2f0115859d</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a8dad9a218fc735c909814b80ca622c82</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator+</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a9dd2bdfa5bdd1859bcbd85670fb91c6b</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator-</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>aa71894bd9d59824776ea97cec78aca45</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator*</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a0023463c0989f3622c8e557a2139c8d3</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator/</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ae1c198fbb4ee56445e68916aadb4ff20</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>x</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a4ebc1ced6909e6232f45a8acccb627d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>y</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ab866ef4c678723ab836ceb20358f906f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>x_mut</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>af6bff3d0bc5496c8cd0295e53ae577d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>y_mut</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ab6e18266d348d22d84530057c950c216</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>inverted</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a3a9c0a2d3b7b5491f6b3779d5d56a17f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ae34f0af07e025f7e50d513d38cfb1ff4</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a9369a49b0fc63c281ea843f640b1994b</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a9b07e5cd861f46d46d952fb18b659ea7</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a72607489437f3a882718b385767c2606</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ab4f9c6e967807ff957d0fa50d2829bbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; number_type, 2 &gt;</type>
      <name>to_array</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ae84cb5112016cba04cdd4c96fae5d4eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::tuple&lt; number_type, number_type &gt;</type>
      <name>to_tuple</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>acf3bb78ff32cc826590d932ab84e70ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; number_type, number_type &gt;</type>
      <name>to_pair</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a61fdaa5c6b32018ae927f0eb0d60bdc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>round</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ac9422e5f43f4d160452fb56c8008de00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>ceil</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a68ea1ed96ce57f2cb6e32cd3210a7df0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>floor</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a54af782b776ae384ab19f601d6816164</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>lerp</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a6adaf3e9521d7fbabe52e3326a1eeaaa</anchor>
      <arglist>(point2d const &amp;other, f32 t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>max</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a05c2865c2f60ce4f099a07d0f249602f</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>min</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>aba7fb630875b7619a4c693a514ee412c</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>clamp</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ad837fe317f345c8b21f51ac8f04d6045</anchor>
      <arglist>(point2d const &amp;start, point2d const &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>abs</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a68b554de7549a803492e88c48a970b45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>dot</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a9752b6158d4e6ccb756548f297b236c4</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a1c28137ddf71022227b7e85ba8b0802f</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_finite</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a7cbcd5b56bde6c8a456efde18d9be4c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_positive</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a88ee416867dc09f4870343ceed722428</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a35ebb724b47407e7b46caa6e515a0272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>ac75d50d29e5f37122a8557de3d2a49a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>origin</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a60cabc7d747afaf997dba8a952846e08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_size2d</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a06c95a361f951e03e749dd880265590c</anchor>
      <arglist>(size2d_type const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>zero</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>aa0a59995f4178606157d87f8d819d345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>splat</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a3733f743c55a5c88992f5c9b57adbe73</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_tuple</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>a9d3aedde6967b7e2ec3a02144931d1b4</anchor>
      <arglist>(std::tuple&lt; Args... &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_array</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>aeb8ff2adfe11d63e2254456f2a12c4d7</anchor>
      <arglist>(std::array&lt; number_type, N2 &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_pair</name>
      <anchorfile>structrll_1_1point2d.html</anchorfile>
      <anchor>acc7119108cd946b97237b16aae8331f1</anchor>
      <arglist>(std::pair&lt; number_type, number_type &gt; const &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::meta::project_meta</name>
    <filename>classrll_1_1meta_1_1project__meta.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>project_meta</name>
      <anchorfile>classrll_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a4c79764a7f5f324b653113ea8214e4eb</anchor>
      <arglist>(struct version version, std::string_view name, std::string_view domain, std::string_view organization) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr struct version</type>
      <name>version</name>
      <anchorfile>classrll_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a448e4b74de54eff58a8254985e17e5c6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>name</name>
      <anchorfile>classrll_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a86640dc49fd17f8f1fe19c0fcea0c254</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>domain</name>
      <anchorfile>classrll_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a74abb714467dcb54e79b122ab3981a0b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>organization</name>
      <anchorfile>classrll_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>ae29c2fe03005061dba185602eb2e02c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::propagate_const</name>
    <filename>classrll_1_1propagate__const.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>propagate_const</name>
      <anchorfile>classrll_1_1propagate__const.html</anchorfile>
      <anchor>ab569637da3c1b76dd9f2c721fdca4a0c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>propagate_const</name>
      <anchorfile>classrll_1_1propagate__const.html</anchorfile>
      <anchor>ad3e181f3954a4254a648518e6c4b6e41</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>T::element_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classrll_1_1propagate__const.html</anchorfile>
      <anchor>a046ca48a6183a4ef3028ecc905e9881e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T::element_type const &amp;</type>
      <name>operator*</name>
      <anchorfile>classrll_1_1propagate__const.html</anchorfile>
      <anchor>aa90d0c9a09824a68470ba57053ebbdbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T::element_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrll_1_1propagate__const.html</anchorfile>
      <anchor>a1e33c33f0fad3f1b4d12a7bf2184acc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T::element_type const *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrll_1_1propagate__const.html</anchorfile>
      <anchor>ab205750f683b48e07d497563d627efc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T::element_type *</type>
      <name>get</name>
      <anchorfile>classrll_1_1propagate__const.html</anchorfile>
      <anchor>aaf2d4abcd8220afa821e7ccf8291fbfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T::element_type const *</type>
      <name>get</name>
      <anchorfile>classrll_1_1propagate__const.html</anchorfile>
      <anchor>a29af88f3b161d7784763245f32978886</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrll_1_1propagate__const.html</anchorfile>
      <anchor>a975020d2c4f9aa42f55ae04643553236</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::remove_cvref</name>
    <filename>structrll_1_1remove__cvref.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structrll_1_1remove__cvref.html</anchorfile>
      <anchor>a8137622210249fda1bd6f2453d23110d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::savefile</name>
    <filename>classrll_1_1savefile.html</filename>
    <templarg>typename F</templarg>
    <templarg>typename T</templarg>
    <templarg>typename</templarg>
    <base>rll::io::filedevice</base>
    <member kind="function">
      <type></type>
      <name>savefile</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a451f5687856303f20dd8650825891310</anchor>
      <arglist>(std::filesystem::path path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>savefile</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>ae1fc97f18a477b69b5a6bd35f89bf993</anchor>
      <arglist>(std::string_view filename, std::filesystem::path const &amp;folder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>savefile</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a188fdfe60f121166956d677afaff1f2f</anchor>
      <arglist>(savefile const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>savefile</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a972cb41e50562ddd8562f5204328e55a</anchor>
      <arglist>(savefile &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~savefile</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a1f36c7f0d8a5ab243aad25bcb36fccec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>aab2903cfab3dbc4acd7d4d172aad6232</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>backing_path</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a2a575101a49948994ab5ceb9509aeb44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_backup</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a7cbb520e49d736592df701dec803e569</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>values</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a78f7395631d588226f6566ea7b50d465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>values_mut</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a7208710c3fbb88a02edf1e2770c9405c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>load</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a58a3f8a440a9089eb721054f5edd0f7f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>save</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>adf83868e6201a0991a7ddbaef39d1022</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>invalidate</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>ac239e7b12245dd8cf3dee9dbfb5fd2d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>try_commit</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>aacee02bb3f8fe5137c072312f2682a44</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a06f5d892132bb8409f385c1c0e4054a1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>operator()</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a4a81e1e47414ce01b467bf424107aea0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a635e7ea93e2132d07a4b334791d3b5e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>savefile &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a7d25d75c0f64c6f0c51684abcf040fe1</anchor>
      <arglist>(savefile const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>savefile &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1savefile.html</anchorfile>
      <anchor>a0d2103be22c1136f6ae73a85ed7d251c</anchor>
      <arglist>(savefile &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>path</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>af11442a65ead0dd9e826bde916b132f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>suffixed_path</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a65c9cdc0c78811436a8f042ec0f95c5c</anchor>
      <arglist>(std::string_view const suffix) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a7011f8cd512d96566291d255bd0675c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_regular_file</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a35d137f5cc9bffeedd11360095872a9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a6191895aa7c0514bbdedc22663955929</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result&lt; std::string &gt;</type>
      <name>try_read</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a736cd984d5c093dab8c309b7e22d78ad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ae1c065119e5d236784a84cccd17b8bdb</anchor>
      <arglist>(std::string_view content) const noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>try_write</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a11d7c381e63746198b6c861950ae4c75</anchor>
      <arglist>(std::string_view content) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>read_from</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a4ef1516ee5fa402697077febc254461e</anchor>
      <arglist>(std::filesystem::path const &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result&lt; std::string &gt;</type>
      <name>try_read_from</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a1b06730a3c17168958c4281627cf928f</anchor>
      <arglist>(std::filesystem::path const &amp;path) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write_to</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ab12e4daaa3e42ea772957d75b0c83205</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept(false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result</type>
      <name>try_write_to</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a9eda7ac0c34ec83953f51c16d16af8e0</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>write_permissions</name>
      <anchorfile>classrll_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a33d0a980918c24622ccfeda453f91c10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::serializer</name>
    <filename>structrll_1_1serializer.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename F</templarg>
    <templarg>typename C</templarg>
    <templarg>typename</templarg>
    <member kind="function" static="yes">
      <type>static result</type>
      <name>serialize</name>
      <anchorfile>structrll_1_1serializer.html</anchorfile>
      <anchor>ac7fda6dcd9ac9de11e84e5fcdf3a11bf</anchor>
      <arglist>(T const &amp;value, std::basic_ostream&lt; char, F &gt; &amp;stream)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result&lt; T &gt;</type>
      <name>deserialize</name>
      <anchorfile>structrll_1_1serializer.html</anchorfile>
      <anchor>a8bf87ba2627586f96972e24873c3097d</anchor>
      <arglist>(std::basic_istream&lt; char, F &gt; &amp;stream)=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::singleton</name>
    <filename>structrll_1_1singleton.html</filename>
    <templarg>typename T</templarg>
    <base>rll::pin</base>
    <member kind="function">
      <type></type>
      <name>singleton</name>
      <anchorfile>structrll_1_1singleton.html</anchorfile>
      <anchor>ae11f9e3f8e4a999ecb7109f9d180e85b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>ptr_mut</name>
      <anchorfile>structrll_1_1singleton.html</anchorfile>
      <anchor>a40b9cbeb43597f7960912c0cd630b350</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T const *</type>
      <name>ptr</name>
      <anchorfile>structrll_1_1singleton.html</anchorfile>
      <anchor>a2f793a8eb4428b85a2bec5721db146e2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T const &amp;</type>
      <name>ref</name>
      <anchorfile>structrll_1_1singleton.html</anchorfile>
      <anchor>a0f881bddc029c91db8a527e72180a34b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T &amp;</type>
      <name>ref_mut</name>
      <anchorfile>structrll_1_1singleton.html</anchorfile>
      <anchor>a13723ce8539d2b1995d34efbeb765519</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::size2d</name>
    <filename>structrll_1_1size2d.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a2f76a40aa921a2e68ec4aafd7089bdc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a7e62dcfa8d60ef9d5e622935e022c98c</anchor>
      <arglist>(size2d const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a9a692e63ce21203af67da3ba58b17919</anchor>
      <arglist>(size2d const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a2d4a67a90a429d348b0594e3f69b3cb2</anchor>
      <arglist>(size2d &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>ad7ff476f21d0eb7fab7414585b10eb8b</anchor>
      <arglist>(size2d &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a1228d2366a1ec200f7d61cd8620218c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a42776470246f569c6f252ffda0171317</anchor>
      <arglist>(number_type x, number_type y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a37570ec56b092a2d7fbb2c7ba65a0237</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a49160388e1f0349fb8ff82a84873ab92</anchor>
      <arglist>(point2d&lt; number_type &gt; const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>af5408aaf26c968ff1783a0e487aab413</anchor>
      <arglist>(vector2d&lt; number_type &gt; const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>inverted</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a0663df789606929b9caf508162faa35d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>x</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>af1c6ca758381469e4d199f8e0e309ba3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>y</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a25573daa701c4afbbac9541fa9d7fcf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>x_mut</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a4dab0d476bbe387bdf37a69d4fd6ea26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>y_mut</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a2aa7cc779a041a771dcbadd529c3e93f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>width</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a8405392cbcf8adae7fa211dca9c5d6c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>height</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>aeeb361b16f16a8354a8efc6f24600f03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>width_mut</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a577ba0bf9fe27120b799fca81d51c03e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>height_mut</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>aea0a20cbedc8f875cae2b67f91a68190</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a12fa292a889fe01393b1d343dddf9833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; number_type, 2 &gt;</type>
      <name>to_array</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a42fdecefbbc15533ba9afb829694ac5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::tuple&lt; number_type, number_type &gt;</type>
      <name>to_tuple</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a2aa49a07d22fa69bb2b659b59147dd4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; number_type, number_type &gt;</type>
      <name>to_pair</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a203473a3c3649a2b4caec4b9d0ae3876</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>round</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>aa0af1f6d479ce082da6ad889767bd40d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>ceil</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>ad8c2786c3e57e9ab24bf1cb4ca6da6c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>floor</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>ac2182fbc98ac7db91a8253efb43fe60f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>lerp</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a8dc9bb4c869fb666c846e181933d37a0</anchor>
      <arglist>(size2d const &amp;other, f32 t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>max</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a72c0cbac6f9fa3b7c247c824110f7936</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>min</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a3bcc817eac102a560de51cc0ed0d361f</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>clamp</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a4479354f329f0e3d54279ea1fe53f44c</anchor>
      <arglist>(size2d const &amp;start, size2d const &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>abs</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>aa82cc2054f6a414de0a750d9498c3953</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>dot</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a5f35fbc97671b5503847f803d7505997</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a7199eccbd58b4e6a9b8f2db5c416ca84</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_finite</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a94dccc1caf9587365d545165bfac1625</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_positive</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a199a0f67dc3f6a61d080b63b8a02e50d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a3a594237871ff8f589a6d8010c6a3692</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>aeb0cb645e11a9602f2a8b1f68a73de22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; number_type &gt;</type>
      <name>to_point2d</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a5ff33c62d80f1e3ea5f6757ee8a13594</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; number_type &gt;</type>
      <name>to_vector2d</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a374c1fc280cdc73797bda60a374faf61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; U &gt;</type>
      <name>cast</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>ade75e8799c7bc43409689068fe8b5032</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>to_f32</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a37b43701028775faa05c3daf6221d4d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; f64 &gt;</type>
      <name>to_f64</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a6cd4c8eec7a287c7e050195138b64508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; u32 &gt;</type>
      <name>to_u32</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a78a2a582d101a194cd619910eabd97c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; u64 &gt;</type>
      <name>to_u64</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a928b7430f7c9259931a592db4cc05f11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; usize &gt;</type>
      <name>to_usize</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>af290c5fcd9ac8efb3a216fd7f0723874</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; i32 &gt;</type>
      <name>to_i32</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a7bbbe138fb32e17a22cbc29649c548eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; i64 &gt;</type>
      <name>to_i64</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>ad44369ecdaf43151d55ad26ee69be926</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; isize &gt;</type>
      <name>to_isize</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>ace1a693938c334acd0af04a2de0b033f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>area</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a6a07ca9a0debc3f4c05c41aa35221917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator+</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>afa337f6d21b7e96b2399621d78e46101</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator-</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>aaa46d6ee1cfc3e9b391df6c8a7b134be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>acdc8d985e5660c351d212fd6b1473d0b</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>af2c416af055c88720773053c58fa0589</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator+</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>aaf652138c881ea902bde1e964c98a7f2</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator-</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a0b90829f5e49d3f02b56947d600aefab</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator*</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>ac237719021d5ec92047e8cbeaf1db048</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator/</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>aaffb0a99e4e2aa71a88966198fbffae0</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a15b2a16847123302c38204a45c47666e</anchor>
      <arglist>(size2d const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a1e2d08efd19a6ba3307c546e26055019</anchor>
      <arglist>(size2d const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a279be3fcd855c7b0698faa7db228afbe</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>aa381c381bfe3f7fe3cdf88a5d5e79048</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>zero</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a06a6aebe112ed8ecb7e6d2b5045fc6b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>splat</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a674282cda2c5f9950a111fd550bbb1f9</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_tuple</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a9ba98c2a440a8c3ea56f9113c94d8432</anchor>
      <arglist>(std::tuple&lt; Args... &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_array</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a01efe1b152ada838494795c784cb7d07</anchor>
      <arglist>(std::array&lt; number_type, N2 &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_pair</name>
      <anchorfile>structrll_1_1size2d.html</anchorfile>
      <anchor>a2a043edfccccf54ab097a6f70332fce6</anchor>
      <arglist>(std::pair&lt; number_type, number_type &gt; const &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::source_location</name>
    <filename>structrll_1_1source__location.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>source_location</name>
      <anchorfile>structrll_1_1source__location.html</anchorfile>
      <anchor>a622ffed7e262326146ca20e825d0874a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>source_location</name>
      <anchorfile>structrll_1_1source__location.html</anchorfile>
      <anchor>a3ed8553342a348ea4241b18e5aba0a4e</anchor>
      <arglist>(char const *file, u32 const line, char const *function, u32 const column=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~source_location</name>
      <anchorfile>structrll_1_1source__location.html</anchorfile>
      <anchor>a017e50089e64cd30c0555b4cc0d7e9aa</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>file_name</name>
      <anchorfile>structrll_1_1source__location.html</anchorfile>
      <anchor>a4b62978e8bfc49de6baba4c55e9f24ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>function_name</name>
      <anchorfile>structrll_1_1source__location.html</anchorfile>
      <anchor>aa92bf63b26ecff3a383ec4866bf0c2a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u32</type>
      <name>line</name>
      <anchorfile>structrll_1_1source__location.html</anchorfile>
      <anchor>a366d6ff7ca4ba81046136a3f6f103789</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u32</type>
      <name>column</name>
      <anchorfile>structrll_1_1source__location.html</anchorfile>
      <anchor>adfc954fa9b61920e352b0c76dfde9759</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr source_location</type>
      <name>current</name>
      <anchorfile>structrll_1_1source__location.html</anchorfile>
      <anchor>a785af4a8fb7ad0dc1af8aee3889e59d8</anchor>
      <arglist>(char const *file=__builtin_FILE(), char const *function=__builtin_FUNCTION(), u32 line=__builtin_LINE(), u32 column=0) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::detail::symbol</name>
    <filename>structrll_1_1detail_1_1symbol.html</filename>
    <member kind="variable">
      <type>u32</type>
      <name>value</name>
      <anchorfile>structrll_1_1detail_1_1symbol.html</anchorfile>
      <anchor>aa4a2a72da49dce0f10100466a9780d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u32</type>
      <name>length</name>
      <anchorfile>structrll_1_1detail_1_1symbol.html</anchorfile>
      <anchor>acbba6d839d735d4eb32295706ca4af8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::serialization::format::toml</name>
    <filename>structrll_1_1serialization_1_1format_1_1toml.html</filename>
  </compound>
  <compound kind="class">
    <name>rll::u128</name>
    <filename>classrll_1_1u128.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>format</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a3859168a16727f06dbaeeb86bd5ff6a4</anchor>
      <arglist></arglist>
      <enumvalue file="classrll_1_1u128.html" anchor="a3859168a16727f06dbaeeb86bd5ff6a4abdaa3c20a3e3851599514f7c6be5f62f">decimal</enumvalue>
      <enumvalue file="classrll_1_1u128.html" anchor="a3859168a16727f06dbaeeb86bd5ff6a4a34d0e21ea08f041727cd3c62f02535e3">octal</enumvalue>
      <enumvalue file="classrll_1_1u128.html" anchor="a3859168a16727f06dbaeeb86bd5ff6a4a2c34788af99f9ca074434e362d584d54">hexadecimal</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a50c31275a1e9955c0043e56d3516a5df</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a3abaac2998413f750bbbb73d2171f4a6</anchor>
      <arglist>(u128 const &amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a893fcd8d0feaa11d7aeb4ce0443838ad</anchor>
      <arglist>(u128 &amp;&amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a8623f62f14a068430a114bfefc5643b8</anchor>
      <arglist>(u128 const &amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>abaac97124df4b285b02dec459319594b</anchor>
      <arglist>(u128 &amp;&amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a485df443dfa5d49463fbfb24f578b800</anchor>
      <arglist>(u64 upper, u64 lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>adfd94ca94d2f6a347872ed1282ae6caf</anchor>
      <arglist>(ulonglong const lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ae3eccddbe598ccb12f07d24677dae3c6</anchor>
      <arglist>(unsigned long const lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a0521b323cf5c3682e2ba479cfa075cbe</anchor>
      <arglist>(unsigned int const lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ac985e2ff40f0a1ba5cb3f34fa3a0d6af</anchor>
      <arglist>(unsigned short const lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a3ddce0eaf7a65a522be461f058ec3e66</anchor>
      <arglist>(long long const lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a51ac2d0856c263ae938c0ecf81de5520</anchor>
      <arglist>(long const lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a0b88c59225e81b970201915294cf9fcb</anchor>
      <arglist>(int const lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ab3eb6ffb8f9753d8284e700c9df82fb7</anchor>
      <arglist>(short const lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ad62c893685b79e1a60750bd1f451d5b8</anchor>
      <arglist>(double const value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a675c40171ee9b580e9c7842e99587406</anchor>
      <arglist>(long double value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>u128</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a82113163a56092a25bc11f191048dc54</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u64</type>
      <name>lower</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a0b0d6608d164f8d58f3c9c302dbc8a5f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u64</type>
      <name>upper</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ad2abdf47fad79968511ddda3cf6af734</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>hash</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>af9137bb24e704706a9785f36110db079</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a246892574e97772d7ba7cd40e007d45b</anchor>
      <arglist>(u128 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a00ed4575c0e05a3296994b4e4fab3bf9</anchor>
      <arglist>(format fmt=format::decimal) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a4df4f0bf9cbd0bc5bcb96f02e406ec4e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator ulonglong</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a47fa17a0e9ed1e8b09f5740520070ec7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator long long</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a40e19225f2fcf0ec54f1a0a1cca91745</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator unsigned long</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a737fa8d29b40fa1115b69343bfeea93d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator long</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a4fb07c666149a391a902c864c2ef3840</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator unsigned int</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>abb9594cba04753b628a50862cc18853e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator int</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a47384cfeb7b48ec297150b6305785e99</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator unsigned short</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ad4ef0324d520595e1309d05de0274627</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator short</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ae4fb70e515266236131c4cb37ea1821a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator unsigned char</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a2f9e391bea26fd8f95793efc9754c681</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator char</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a0ee286f28dc8fe65f32dcd3b4c0a29e2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator signed char</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a6d46f4fc7f1156763ea3b5873a09658e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a9a19eeeed257fc4e719d489f27576b58</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ac4a1807b2666c4c72945db2e69d2725b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>aec985ab6034e549fec5960c5631c667f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a413884a6bdde03014c709b2e36976c11</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator-=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>aed8e08db7866a56445d7b70c7c082eff</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ac288aaac264528d3926fa5ca65453b92</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator/=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>abd21ba421e4c1866394de376e25aec58</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator%=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a62a95235cf5fe906485b3bf7efeb2a89</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>acddd2a4f8be1758174d4f3f7b0520c7f</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator|=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a3078aec13ab416606037395c2fc70f3a</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator^=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>aaa7ba52e3fd37feba02d86c0fcc282c1</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>aee24372dc5296622bc3dacc8dab9843b</anchor>
      <arglist>(T shift) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a0b654a5bc13370439d76f2890fdf5abd</anchor>
      <arglist>(T shift) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator+</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a98f6b4e05fcb5b5571ef4577398c6199</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator-</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a8ee780e41fa0eef101fd26b69120c9b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator~</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>affe632c43df77a698d83ea8b54c09979</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator+</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a7a08133ecdc0701b639ed17930dc1e8c</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator-</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a59642e84954df5abc25b394c430d46a8</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator*</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>aacef65e20a599b62f1f4f6fcf518d91d</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator/</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>acc71c9109cc2834e869ad627684dc214</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator%</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>aee6cb901ca873137aef54c97acafbe42</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator&amp;</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a78308dd5193d2ebab52c31d87547d597</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator|</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a3a325b9d1f0013274d1b4e76d1812d38</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator^</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ae62e68ad00ec50d96701b23de606917d</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ad53a53a940974abb173ebff0a9b1fc51</anchor>
      <arglist>(T shift) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a1f54c093290b971254ceca9ca5d1727e</anchor>
      <arglist>(T shift) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator++</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a58a7bf0550ff4561866769ae3c0ae148</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator--</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a9b2eac9a1784ac63353078d732c54b88</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator++</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a2d4409eb3601a50ef0dbe40da6be064f</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator--</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a6c42bcfdd52eb619e8351fc089294923</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ad87ab6905427770930b5e38949fa30a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&amp;&amp;</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a27af348e9d14a21c6e01dff0dcdc9196</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator||</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>afa381bc38c7898d1cac9d4955d913d48</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ac723d05110590bbfcfa2c88cbe458dd9</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>acefe956ef001aa22d9a22c48605b119f</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a300f106e105b569709c4866903fabfa9</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a8708261c705499bde14ab8383c03c1ce</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>ab80c4447d743a9384fa310d4580b1810</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a8eeb8529ff5c0878428ea92c641a9b20</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>afa584913f5b58a0de91de31bd28d52e6</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>af0d8c3d9e775cd4b41be2cda6173927a</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>aef67610f6497dcbe8d303f266635e5f1</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a69ca6c98852cfe0e43531505946e7e1c</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>afd6cd81f34e5f7af73a1cc0db7ce3fe0</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>a4d7999aed5fa019eb944ce97e505cd52</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static optional&lt; u128 &gt;</type>
      <name>from_string</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>aaddf30487e58e6bdec483745e730f964</anchor>
      <arglist>(std::string const &amp;str, format fmt=format::decimal) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr optional&lt; u128 &gt;</type>
      <name>from_string</name>
      <anchorfile>classrll_1_1u128.html</anchorfile>
      <anchor>aa3840f8561e55f6213ba921fa3968080</anchor>
      <arglist>(T const (&amp;str)[N], format fmt=format::decimal) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::detail::utf16_reader</name>
    <filename>structrll_1_1detail_1_1utf16__reader.html</filename>
    <templarg>typename T</templarg>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf16_next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>a797b8f1e7ae6bd52425e3654396c5125</anchor>
      <arglist>(T const *&amp;it, T const *end, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf16_code_point</name>
      <anchorfile>structrll_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>a1016e1cc58541cfef96b045f02ca3c15</anchor>
      <arglist>(uint16_t value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::detail::utf32_reader</name>
    <filename>structrll_1_1detail_1_1utf32__reader.html</filename>
    <templarg>typename T</templarg>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf32_next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1utf32__reader.html</anchorfile>
      <anchor>a963bbcd17bd31b2e44f22d5b81bca844</anchor>
      <arglist>(T const *&amp;it, T const *, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::detail::utf8_reader</name>
    <filename>structrll_1_1detail_1_1utf8__reader.html</filename>
    <templarg>typename T</templarg>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf8_next_or_error</name>
      <anchorfile>structrll_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>acd9e74a16774ead07d7c96eaf2703f74</anchor>
      <arglist>(T const *&amp;it, T const *end, bool &amp;error, u32 &amp;error_symbol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf8_code_point</name>
      <anchorfile>structrll_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>a572039ce88636d4c364dc01938e3a472</anchor>
      <arglist>(uint8_t byte, bool &amp;correct) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr u32</type>
      <name>trailing_utf8_code_point</name>
      <anchorfile>structrll_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>a5caef6f52ef5949ea26e745b2df2a0a9</anchor>
      <arglist>(T const *&amp;it, T const *end, bool &amp;correct) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rll::uuid</name>
    <filename>classrll_1_1uuid.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>uuid</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>aab8245b18ea6dcb1ea503198a5e55acc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~uuid</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>aa8ec2a40cfec30492578773e2e9eda59</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>uuid</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a269a166d92692bb45626440a4c116deb</anchor>
      <arglist>(std::array&lt; u8, 16 &gt; const &amp;bytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uuid</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>aba71ad4a3ae7cfa9e6b837222e9c4e4c</anchor>
      <arglist>(std::array&lt; std::byte, 16 &gt; const &amp;bytes)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>uuid</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a4d45df0dc6c55c73d95e7150ca1f4b33</anchor>
      <arglist>(std::string_view const str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uuid</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a78aa01f36b6c78db1a94256c4566d10a</anchor>
      <arglist>(uuid const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uuid</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a53b3b1a37377a26aebb48d3a8403becd</anchor>
      <arglist>(uuid &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>uuid &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>acc0f13af7c07d577ee7bffe5f8cb63c4</anchor>
      <arglist>(uuid const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>uuid &amp;</type>
      <name>operator=</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>ac9d95d81cb3b98d5370bd7c9f6460f8b</anchor>
      <arglist>(uuid &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>acd2036fc332c0e7f96dc68df451e9299</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a03164f8beae7d09ffc525a4bca9914c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; u8, 16 &gt; const &amp;</type>
      <name>bytes</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>abb8babb728901a9b1bf81726435ec5aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; u8, 16 &gt; &amp;</type>
      <name>bytes_mut</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>af51be70e0c57a636752d97d5a47ff09b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>u64</type>
      <name>to_u64</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a8e311478617c05eee08c772cd7a24397</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a495e60cc00e8a336747cd04f4734bae4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a772f951248ec8b3820e8195d66c644bd</anchor>
      <arglist>(uuid const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a95b35a31470309de426f6b6662405509</anchor>
      <arglist>(uuid const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr uuid</type>
      <name>empty</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>aa95f59aaecae771978b4d055b110f7dc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uuid</type>
      <name>random</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a7f9e44b2a637d1ffed69698019f09b72</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>short_guid_string_length</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>acfae97fcccfd0f53d63778da32148687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>long_guid_string_length</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a2f302ba55976d354d51415dbc6e902a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a62bf7da18ccc181669c26469a6761e10</anchor>
      <arglist>(uuid const &amp;lhs, uuid const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrll_1_1uuid.html</anchorfile>
      <anchor>a324789da25a99d93c275bf1b32af0c1a</anchor>
      <arglist>(std::ostream &amp;os, uuid const &amp;guid)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::vector2d</name>
    <filename>classrll_1_1vector2d.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a746297d5df5da1f02bd179be59aee21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size2d&lt; number_type &gt;</type>
      <name>size2d_type</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a214d4aa106e95d27c9d8dec7add0dce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>point2d&lt; number_type &gt;</type>
      <name>point2d_type</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aef78cfe21e01ac32b5d14d38b417accf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>angle&lt; number_type &gt;</type>
      <name>angle_type</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>adc1b2c4a52cfa19c35ef6f466be921d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a87cc8cbb9e249a07490473fc92596940</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aa5bcf0b207b0b0ab1a1324dc9c77700c</anchor>
      <arglist>(number_type x, number_type y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a2d40e83961567171e341d7231666859b</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aa4db296e007377f524e5ebbd7ac6c2ae</anchor>
      <arglist>(size2d_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a7c683a63cdbc1a1ebd39ae03bb9f701e</anchor>
      <arglist>(point2d&lt; T &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>ad2f36d70d486867de7e41ee266a85e00</anchor>
      <arglist>(F &amp;&amp;fn) const -&gt; std::enable_if_t&lt; std::is_invocable_v&lt; F, number_type &gt;, vector2d&lt; decltype(fn(std::declval&lt; number_type &gt;()))&gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>zip</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a108603638276e9d04dcb93f8994ff211</anchor>
      <arglist>(vector2d const &amp;other, F &amp;&amp;fn) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d_type</type>
      <name>to_size2d</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a6722e7fb807bfbd6086cdc2c87b25424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d_type</type>
      <name>to_point2d</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a658760926cefcf13747ca4d10724a230</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>length_squared</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a3d31562cdce62b5d35ab40832b94b18d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>length_scalar</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a61a6283a53a6d648e93b3987e3964e7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>inverted</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a288abf028ef701704000d498fbfeabf8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>x</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>afac6b615d33848fafbc465d8bca9c492</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>y</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>abc5c9d24b7f92bbf2df6708882402fb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>x_mut</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a4c50ebe5f301db3d4be74f434af3bb21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>y_mut</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aa0cc2951b567228c627fbeea868fd20a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aaed3558430dd2270ed9a64faafd5146a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; number_type, 2 &gt;</type>
      <name>to_array</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a85d090fa8beec633c5d008d06d67e977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::tuple&lt; number_type, number_type &gt;</type>
      <name>to_tuple</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a20d578548d70d1c266c26014475ea0a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; number_type, number_type &gt;</type>
      <name>to_pair</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a37d515eab109a663b3e2c7c27c488bb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>round</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>ad009f8b4bdce2d8274c6b875c7f2c92a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>ceil</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a29c204238c53c436b213839b1e07e2d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>floor</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aaaaa710f2f4843ad2272cec308d51f16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>lerp</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a8ddc89d4f67678c198d0cf67371bd6a8</anchor>
      <arglist>(vector2d const &amp;other, f32 t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>max</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a2be1fa9289455af6f68362636b833cef</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>min</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>af895fdde24d03ecc44798f91280d4629</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>clamp</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a7edce223f5e4c8e8d16fea016141a87a</anchor>
      <arglist>(vector2d const &amp;start, vector2d const &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>dot</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>ad4f8571aa8880ff3aa644dcf2963048a</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a29e5dda7c7e8e146c025062b514cd68d</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>abs</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a782444810610a8ee7a39be598b6b81e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>project</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a027bb6d91ea29bac3b92d8f1cc86f4d2</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a824f93b50d9c1381646b89261ab751ac</anchor>
      <arglist>(T const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_finite</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>ac8c91d9f7aad1009c5af0e7348fb828b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_positive</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aa26814d252e2392ac93aa173dcd589c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a4dae0866fa56faeed7b2fcda7151cd17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a0f7216f45a0973ac6299c908c4215f86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle_type</type>
      <name>angle_to</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a827fc330055774c4c7937690bd5243e9</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle_type</type>
      <name>angle_to_x_axis</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a23a17a3b3b32a11fd52108489f0352c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>normalized</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>ad88d490efa8c0e431f4a5bb7cd2751e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>reflected</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a8e6b1f806afa2ff4ed55094b9f83a5cd</anchor>
      <arglist>(vector2d const &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; U &gt;</type>
      <name>cast</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aec57ce317e6bb5f23ec3e23880bcc18e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>to_f32</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>ada58d3b0ee009ef2fee1a3a7e2b0f563</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; f64 &gt;</type>
      <name>to_f64</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aaf4fb562a2b05ab8548ccffc091793e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; u32 &gt;</type>
      <name>to_u32</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a3873523fdc497123d09ab0ffa133c0ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; u64 &gt;</type>
      <name>to_u64</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a96bf7727e6dded5104ce7e521ec5809c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; usize &gt;</type>
      <name>to_usize</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a252e97c239f5acf207bfc7e65955346d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; i32 &gt;</type>
      <name>to_i32</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a00ae84607c777c9a2384ca3ddd9fd4dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; i64 &gt;</type>
      <name>to_i64</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a82dd7d43ac8a237367e8ebfdf05ccd0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; isize &gt;</type>
      <name>to_isize</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a222670f8d5ebda13e067a35a341ccc62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator+</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a8ca2a9f8f4fce46ad9839f6197d2eab0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator-</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>ac6bcdc45c33d0f67b5ed06176126361c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a957bfe5048a09d4573d183ce08c8bbaf</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator+</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aad158a7632b202fa95b529c8dea56826</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aaa882fe707b5e174e7eb8a06589a4040</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator-</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a96e7570f95cf17911244c87858518d52</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator*</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a3552ec7b09b697820feb2eed9394a684</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator/</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a4213daa1f16ddd673d836478c42a22e6</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator+=</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a96a77e7815154eabc0c53137a4dcf391</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator-=</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a81846ecb0a736abf9809714572c95c12</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator*=</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a9bedc4ca51e2b083989163ac67a10191</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator/=</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a250420e605b439e90e0ca78c8507e8c8</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>zero</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a337e0722636df72618ca9a196e5f09f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>splat</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a944ee063a0996db635d8ae60dd9549b6</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>from_tuple</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>aee441b515f1848d11f256b659edd618b</anchor>
      <arglist>(std::tuple&lt; Args... &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>from_array</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a3818afc39f22344b4472ad7a1a06d02a</anchor>
      <arglist>(std::array&lt; number_type, N2 &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>from_pair</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>a01dc67c52c11f93483156bad68557f8f</anchor>
      <arglist>(std::pair&lt; number_type, number_type &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>one</name>
      <anchorfile>classrll_1_1vector2d.html</anchorfile>
      <anchor>abcda2cb046547b6abe4c14932670bd96</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::velocity</name>
    <filename>structrll_1_1velocity.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>ac2aa53c063006f866f5eff93dfbbf6db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a7935e6c5019f893a2e520be80dfc3e79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a031f6da0b303cfa965cb045cee3bbe05</anchor>
      <arglist>(number_type const value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~velocity</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>abf8452d00502f012764ceb023a5b3e2d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>aaaec56c68210991a261002c724552e7e</anchor>
      <arglist>(velocity const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a335ce07be6ade0ca09546941a3585e23</anchor>
      <arglist>(velocity &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>ae10e82693751a23282891515415ad4c3</anchor>
      <arglist>(velocity const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a86d0a5bd2b65fb09b2dff98013f74816</anchor>
      <arglist>(velocity &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a22e43e31425ab01cb69369a8f953054c</anchor>
      <arglist>(velocity_unit u=velocity_unit::meters_per_second) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>in</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a6cfba002e14c7ca78a79a7b3f6b6d22f</anchor>
      <arglist>(velocity_unit u) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>kmph</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a685e584f97b34f4927e689135ded9b56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>mps</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a23fcad91a00387d9281992a09e33977f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity&lt; U &gt;</type>
      <name>cast</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a7ad84bc6d4992a6bfe2818ba46081e7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>value</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>acc7e36ddda38289f8037366a357af406</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr U</type>
      <name>as</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a0729857abed5326bb84837a603ac7ca9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f32</type>
      <name>as_f32</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>ab8e1cfee7cc23809e4b1a89bfdda0bb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f64</type>
      <name>as_f64</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a646045c133098930db9f6c8c669b2af5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a624e8ee4d851d950b08c86c25db14f90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a32c79625fe8d141eaff560a6297c5266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a6ef5c05aa84c40fe13635538aa15e544</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>ac26cab4eaf8a8912ce6ecdf72f22aeb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a60f2d21f982cf1da07845d582326bd0c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a1a003fd3af2b5715396ec5dbaa6df16d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator number_type</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a0206bb653bfec8802ea6d36999c2499f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a6e6b28c70ad3b67bc277fdde357f844f</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a5740ee982edd26798c56f5d67f5be2bd</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a1ddb0cd6cb59c71089b98746c7805194</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a8c7a8d8421e4dd92e1dfa6b1b3452502</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>abd9f2436cefdc6c126c38bcb657946bb</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a7edde247d559422f5a1644ce11cf56cb</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>operator*</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>acbbc94ae7451414f610755e38eb320ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator+</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a5fc4230dcba2ea29840b36170863cead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator-</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a20f14e3b9bd801931b8867778561d3ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator+</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a5caa6b5e3b2f72af14e86e47c42b1fe4</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator-</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>aade40528ba5b7fe3722f7ac80103493c</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator*</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a6f2674bc52fc6b866d3d0d87f719a3e5</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator/</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a5f015812c6461ee2a0a452f02668f968</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a4bc99c1e0e358017e3eff8a2d1d82f12</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a5fa6bfc1dc766b24a486983d9ab552a9</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a4b09a94cd0e276fc0677466cf01e4d24</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a8d25d584b63063e62eb3187201c36bb6</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator*</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>ad153a20b4248b6884c246642970a0c30</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator/</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a18ae6954932688943925d5374c0c99a8</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator+</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a9eb608a9901a0b9d2fbe6e25459592d4</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator-</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a8661f6d44145ca4e5382d8150f27e7d9</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a7df5447a9827700aaf91440b29300ae6</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a39a784852c39e84b8ab6cec6f81c9f8e</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a2448c34fdbcd15662ad9a6b987f41b85</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a8440266fc1bda60c91c67137ac87175d</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>from_kmph</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a60c6cac6221bbea973d3974b6c6803ed</anchor>
      <arglist>(number_type kmph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>from_mps</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>ac4ac90aacf23bbce4fe076e0b68737e1</anchor>
      <arglist>(number_type mps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>from</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a06d31762a577d037b249d62b30bc28fc</anchor>
      <arglist>(number_type value, velocity_unit u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>zero</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>a6992006f368e71b07fb4ddc5501cfc63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structrll_1_1velocity.html</anchorfile>
      <anchor>aa0c055ac678514427fa9361c636bfc57</anchor>
      <arglist>(std::ostream &amp;os, velocity const &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::version</name>
    <filename>structrll_1_1version.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>af49e1116d0f519751a8752e2e7062190</anchor>
      <arglist>(std::uint16_t mj, std::uint16_t mn, std::uint16_t pt, prerelease prt=prerelease::none, optional&lt; std::uint16_t &gt; prn=nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>a12ec9c2dcc7cb932c69c66a67965c656</anchor>
      <arglist>(std::uint16_t mj, std::uint16_t mn, std::uint16_t pt, prerelease prt, std::uint16_t prn) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>ad244a33918c22fbb6ce5f088c49d0c9f</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>a47e2178e471c0b634fd3ea10d9f14ed8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>adef7356bd4d702338906aabd34920e67</anchor>
      <arglist>(version const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>a02d8dbacaf509cf04b61fcb71cd7b655</anchor>
      <arglist>(version &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~version</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>a5ee551cbb81697ca832e5b4e0f7cda8c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>version &amp;</type>
      <name>operator=</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>a345bcf5441487c9ba2e7bee1ea261df5</anchor>
      <arglist>(version const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>version &amp;</type>
      <name>operator=</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>a3969a7a20d3b7016648091d1078a2932</anchor>
      <arglist>(version &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr from_chars_result</type>
      <name>from_chars</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>a6cc3139f9f2e67f72089ef5f2f38d76c</anchor>
      <arglist>(char const *first, char const *last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr to_chars_result</type>
      <name>to_chars</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>a5d11667f7475b989ebee486fe4c0eb16</anchor>
      <arglist>(char *first, char *last) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>from_string_noexcept</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>a7ca8b87f68d8819a35817b4e985dcfaf</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr version &amp;</type>
      <name>from_string</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>ad60106559fe914f1136117d1ab6f33c5</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>ac1762c0b556abacedf7fca6a75fb30f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::uint8_t</type>
      <name>string_length</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>adc35e9f24d36498c3c55de223a0c7d27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>ad3668f2a11452a8551bfc05cccafb99b</anchor>
      <arglist>(version const &amp;other) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>std::uint16_t</type>
      <name>major</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>a1d5e6cc07e8efa7a6e443a16f56dce33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint16_t</type>
      <name>minor</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>ada37624781b7accec5859af53c0372f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint16_t</type>
      <name>patch</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>ae7dd1c9c807a38bf01e95618470c1174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>prerelease</type>
      <name>prerelease_type</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>ab2d2cf5094d324713e1b48b1042546f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>optional&lt; std::uint16_t &gt;</type>
      <name>prerelease_number</name>
      <anchorfile>structrll_1_1version.html</anchorfile>
      <anchor>a14a34e7e477aea2b3101a2a0b2875356</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rll::serialization::format::xml</name>
    <filename>structrll_1_1serialization_1_1format_1_1xml.html</filename>
  </compound>
  <compound kind="struct">
    <name>rll::serialization::format::yaml</name>
    <filename>structrll_1_1serialization_1_1format_1_1yaml.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::basic_lockable</name>
    <filename>conceptrll_1_1basic__lockable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::c_ptr</name>
    <filename>conceptrll_1_1c__ptr.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::enum_</name>
    <filename>conceptrll_1_1enum__.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::lockable</name>
    <filename>conceptrll_1_1lockable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::mutex</name>
    <filename>conceptrll_1_1mutex.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::num</name>
    <filename>conceptrll_1_1num.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::ptr</name>
    <filename>conceptrll_1_1ptr.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::ptr_like</name>
    <filename>conceptrll_1_1ptr__like.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::shared_lockable</name>
    <filename>conceptrll_1_1shared__lockable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::shared_mutex</name>
    <filename>conceptrll_1_1shared__mutex.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::shared_timed_lockable</name>
    <filename>conceptrll_1_1shared__timed__lockable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::shared_timed_mutex</name>
    <filename>conceptrll_1_1shared__timed__mutex.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::smart_ptr</name>
    <filename>conceptrll_1_1smart__ptr.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::standard_copyable_and_movable</name>
    <filename>conceptrll_1_1standard__copyable__and__movable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::timed_lockable</name>
    <filename>conceptrll_1_1timed__lockable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rll::timed_mutex</name>
    <filename>conceptrll_1_1timed__mutex.html</filename>
  </compound>
  <compound kind="namespace">
    <name>rll</name>
    <filename>namespacerll.html</filename>
    <namespace>rll::comparators</namespace>
    <namespace>rll::crypto</namespace>
    <namespace>rll::detail</namespace>
    <namespace>rll::io</namespace>
    <namespace>rll::literals</namespace>
    <namespace>rll::meta</namespace>
    <namespace>rll::net</namespace>
    <namespace>rll::numbers</namespace>
    <namespace>rll::oslayer</namespace>
    <namespace>rll::rtti</namespace>
    <namespace>rll::serialization</namespace>
    <class kind="struct">rll::angle</class>
    <class kind="class">rll::application_dirs</class>
    <class kind="class">rll::bad_optional_access</class>
    <class kind="class">rll::configuration_file</class>
    <class kind="struct">rll::const_overload_t</class>
    <class kind="struct">rll::contract_violation</class>
    <class kind="struct">rll::deleter</class>
    <class kind="class">rll::dirs</class>
    <class kind="struct">rll::fixed_string</class>
    <class kind="struct">rll::fixed_string&lt; 0 &gt;</class>
    <class kind="struct">rll::is_any_of</class>
    <class kind="struct">rll::is_num</class>
    <class kind="struct">rll::is_partially_serializable</class>
    <class kind="struct">rll::is_partially_serializable&lt; T, F, R, std::void_t&lt; decltype(partial_serializer&lt; T, F, R &gt;::serialize), decltype(partial_serializer&lt; T, F, R &gt;::deserialize)&gt; &gt;</class>
    <class kind="struct">rll::is_serializable</class>
    <class kind="struct">rll::is_serializable&lt; T, F, std::void_t&lt; decltype(serializer&lt; T, F &gt;::serialize), decltype(serializer&lt; T, F &gt;::deserialize)&gt; &gt;</class>
    <class kind="class">rll::library</class>
    <class kind="struct">rll::non_const_overload_t</class>
    <class kind="struct">rll::noncopyable</class>
    <class kind="struct">rll::nonmovable</class>
    <class kind="struct">rll::nullopt_t</class>
    <class kind="class">rll::observer_ptr</class>
    <class kind="class">rll::optional</class>
    <class kind="class">rll::optional&lt; T &amp; &gt;</class>
    <class kind="struct">rll::overload_t</class>
    <class kind="struct">rll::partial_serializer</class>
    <class kind="struct">rll::pin</class>
    <class kind="struct">rll::plain_type</class>
    <class kind="class">rll::point2d</class>
    <class kind="class">rll::propagate_const</class>
    <class kind="struct">rll::remove_cvref</class>
    <class kind="class">rll::savefile</class>
    <class kind="struct">rll::serializer</class>
    <class kind="struct">rll::singleton</class>
    <class kind="struct">rll::size2d</class>
    <class kind="struct">rll::source_location</class>
    <class kind="class">rll::u128</class>
    <class kind="class">rll::uuid</class>
    <class kind="struct">rll::vector2d</class>
    <class kind="struct">rll::velocity</class>
    <class kind="struct">rll::version</class>
    <concept>rll::enum_</concept>
    <concept>rll::num</concept>
    <concept>rll::ptr</concept>
    <concept>rll::c_ptr</concept>
    <concept>rll::smart_ptr</concept>
    <concept>rll::ptr_like</concept>
    <concept>rll::standard_copyable_and_movable</concept>
    <concept>rll::basic_lockable</concept>
    <concept>rll::lockable</concept>
    <concept>rll::timed_lockable</concept>
    <concept>rll::shared_lockable</concept>
    <concept>rll::shared_timed_lockable</concept>
    <concept>rll::mutex</concept>
    <concept>rll::timed_mutex</concept>
    <concept>rll::shared_mutex</concept>
    <concept>rll::shared_timed_mutex</concept>
    <member kind="typedef">
      <type>std::integral_constant&lt; int, static_cast&lt; signed int &gt;(endian::big)&gt;</type>
      <name>big_endian_t</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a588e1f9bad0df417828f550415f0409f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; int, static_cast&lt; signed int &gt;(endian::little)&gt;</type>
      <name>little_endian_t</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a42616d331fbcf68f53dc4d4b654fc106</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; int, static_cast&lt; signed int &gt;(endian::native)&gt;</type>
      <name>native_endian_t</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aa0f125301c68d2140ccb966619e37ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(contract_violation const  &amp;)&gt;</type>
      <name>contract_violation_handler</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a15256aad57cade3792bb9278924d0d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>expected&lt; T, std::string &gt;</type>
      <name>result</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a180b6c7999980ef9862de8890b3cae6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>u8</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ad6735ac03f5b157541233eb3196ddd80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>u16</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ae2609383ff7a92ce58e192c12088a48c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>u32</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ae66d90946f5af06c985b3dd77d786041</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>u64</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a0990f1edc722e4e33e6f52019fce4733</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int8_t</type>
      <name>i8</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a5fd6b6109145b0cb3cca5530edc48d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int16_t</type>
      <name>i16</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3d07f02dcb54fdaf99552e23d65f2429</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>i32</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a835989a950485cae2072fff3188edaca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int64_t</type>
      <name>i64</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a1339f8d58e0d66f36063a12a3d75b28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>usize</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ac8efd086c004f51c0493b51ce67e3c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::make_signed_t&lt; std::size_t &gt;</type>
      <name>isize</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a63076edb18854492a45c0d74cd356f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>f32</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a8b47b5056ce733d55fff4e9dc6cb4bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>f64</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a2d475501a0684be1bb17cc0c806d40c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>f128</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a2cc115a4e7a6db273191f609a95235d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uintptr_t</type>
      <name>uptr</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a82b310223c765ee0791dc1727666d8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>ulonglong</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ab0d2074a65c11665a924b42cf49675f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ad5fb55898b0326b467d74a2c8887a2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename remove_cvref&lt; T &gt;::type</type>
      <name>remove_cvref_t</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ae4837574a944414f51373fcdffb5366d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename plain_type&lt; T &gt;::type</type>
      <name>plain_type_t</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a6209c17ba4ecea78fd9198b62901d9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::range</type>
      <name>version_range</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a002ff253dc2c1b0c3dae06a39c14fc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::satisfies_option</type>
      <name>version_range_option</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a350aed5790219c9fdde26e0d429340da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>owner</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a84cf1179e707053b574f3a52ccbdcb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>propagate_const&lt; std::unique_ptr&lt; T &gt; &gt;</type>
      <name>pimpl</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a0c9aceb722b117f89569de6ec614d05b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>propagate_const&lt; std::shared_ptr&lt; T &gt; &gt;</type>
      <name>shared_pimpl</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a4b449b84c39c894ec863b2e71648a428</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>endian</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a8c5f0d25c18057691a3260e5c31df3d2</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerll.html" anchor="a8c5f0d25c18057691a3260e5c31df3d2aaae6635e044ac56046b2893a529b5114">little</enumvalue>
      <enumvalue file="namespacerll.html" anchor="a8c5f0d25c18057691a3260e5c31df3d2ad861877da56b8b4ceb35c8cbfdf65bb4">big</enumvalue>
      <enumvalue file="namespacerll.html" anchor="a8c5f0d25c18057691a3260e5c31df3d2a8e5f3adee38c8fccc13c1f3be0143796">native</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>saving_policy</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a7c866bd44d6ce11970c4d7f41bf97348</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerll.html" anchor="a7c866bd44d6ce11970c4d7f41bf97348af47468435c3051a65ef52dbe8a7838b1">autosave</enumvalue>
      <enumvalue file="namespacerll.html" anchor="a7c866bd44d6ce11970c4d7f41bf97348ac9c45ac5595e1bb329ad8e26396d93c5">explicit_</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>contract_type</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3dc5f6f22ccd024d77f7b00aeb9c82c9</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerll.html" anchor="a3dc5f6f22ccd024d77f7b00aeb9c82c9ac3c270a815f2c6329cf95844e757cf7f">precondition</enumvalue>
      <enumvalue file="namespacerll.html" anchor="a3dc5f6f22ccd024d77f7b00aeb9c82c9a251848760bc80cc0b08dec58b4199c6b">postcondition</enumvalue>
      <enumvalue file="namespacerll.html" anchor="a3dc5f6f22ccd024d77f7b00aeb9c82c9a97a1fb4792ab0d80857d825020ced2f0">invariant</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>angle_unit</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a4f72b71960cd86a56862a9f872a6dec7</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerll.html" anchor="a4f72b71960cd86a56862a9f872a6dec7a18daee01fc6e54aacd7f4c2eef60ff4d">degrees</enumvalue>
      <enumvalue file="namespacerll.html" anchor="a4f72b71960cd86a56862a9f872a6dec7a017969ba49117264eb077e9f66daacfd">radians</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>velocity_unit</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ae7665e1a7ebe58b4542b175bf601581f</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerll.html" anchor="ae7665e1a7ebe58b4542b175bf601581fac01a692efdbdbc7211b76bb9309a48a1">kmph</enumvalue>
      <enumvalue file="namespacerll.html" anchor="ae7665e1a7ebe58b4542b175bf601581fa7c1dc91629afef3369fc77b119a2e24d">mps</enumvalue>
      <enumvalue file="namespacerll.html" anchor="ae7665e1a7ebe58b4542b175bf601581fa400b6d1abbad6e83b994800d62c03fee">kilometers_per_hour</enumvalue>
      <enumvalue file="namespacerll.html" anchor="ae7665e1a7ebe58b4542b175bf601581fa7355df818aff8043f3acaeda426ae396">meters_per_second</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>prerelease</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a76edd34b6e23e525ddb76ed62635ee19</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerll.html" anchor="a76edd34b6e23e525ddb76ed62635ee19a2c1743a391305fbf367df8e4f069f9f9">alpha</enumvalue>
      <enumvalue file="namespacerll.html" anchor="a76edd34b6e23e525ddb76ed62635ee19a987bcab01b929eb2c07877b224215c92">beta</enumvalue>
      <enumvalue file="namespacerll.html" anchor="a76edd34b6e23e525ddb76ed62635ee19aff78648be52a4e79513f4e70b266c62a">rc</enumvalue>
      <enumvalue file="namespacerll.html" anchor="a76edd34b6e23e525ddb76ed62635ee19a334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>popcount</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ad52357046bcefa26ae1487b3f30717f2</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_single_bit</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a93fa168048d0515c94781c8fc2338990</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_pow2</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a67449bd034008955ce054665fb892d1e</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_ceil</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ab5ea82cce74444eb839da81aedc0f910</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bit_cast</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a95210e89b4d007ed55eb40b75591d8a0</anchor>
      <arglist>(From const &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>byteswap</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a8fbaf929355163bc3ca9609ed5c8576d</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_big_endian</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a494f325e3f011b30efe92a9f4a1ef994</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_little_endian</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a7174d581ef617432ea69bf5451f904a0</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>default_contract_violation_handler</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a132e3bda8756f762bbdff0e651cb9ccc</anchor>
      <arglist>(contract_violation const &amp;violation)</arglist>
    </member>
    <member kind="function">
      <type>contract_violation_handler &amp;</type>
      <name>violation_handler</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3ecbd5131e53fc49399c6c9531454c30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>contract_violation_handler</type>
      <name>set_violation_handler</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a11bc7516c86518a712da9d66bea0a6d3</anchor>
      <arglist>(contract_violation_handler handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invariant</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a8a162989b8a9da4846f785610af1fd92</anchor>
      <arglist>(bool const expression, std::string_view const message=&quot;Invariant violated&quot;, source_location const &amp;location=source_location::current())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precondition</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a7be69e17bcc1ef595aba0c7b9c670e99</anchor>
      <arglist>(bool const expression, std::string_view const message=&quot;Precondition violated&quot;, source_location const &amp;location=source_location::current())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postcondition</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a26f2f4e3c6031080180574b8cd0b5c3a</anchor>
      <arglist>(bool const expression, std::string_view const message=&quot;Postcondition violated&quot;, source_location const &amp;location=source_location::current())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_invariant</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a6bff4209afff333c830016f365a3c9ba</anchor>
      <arglist>(std::string_view const message=&quot;Broken invariant&quot;, source_location const &amp;location=source_location::current())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_precondition</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a715064ab7e82b110c21fcd766f6b47bc</anchor>
      <arglist>(std::string_view const message=&quot;Broken precondition&quot;, source_location const &amp;location=source_location::current())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_postcondition</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a178d0a82e673c1adaef5d0b025f9afa4</anchor>
      <arglist>(std::string_view const message=&quot;Broken postcondition&quot;, source_location const &amp;location=source_location::current())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>not_implemented</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aa4725f65eea24a7e7dab185e48279623</anchor>
      <arglist>(source_location const &amp;location=source_location::current())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>acfa573dff12f406c80a2e325d8632063</anchor>
      <arglist>(const char8_t(&amp;)[N]) -&gt; fixed_string&lt; N - 1 &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a24fc1c14d38e4b75eef699f435f88e54</anchor>
      <arglist>(fixed_string&lt; N &gt;) -&gt; fixed_string&lt; N &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a8e6476c6c4ef4a06becb8a088f8d78e2</anchor>
      <arglist>(char const (&amp;)[N]) -&gt; fixed_string&lt; N - 1 &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ab56312a713d4462a07b023a33d0e9f27</anchor>
      <arglist>(wchar_t const (&amp;)[N]) -&gt; fixed_string&lt; N - 1 &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a0d7b861ad3cf68f50bf2e8c691396166</anchor>
      <arglist>(char16_t const (&amp;)[N]) -&gt; fixed_string&lt; N - 1 &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aa7b72a83bc93a8398a7f1588a4173715</anchor>
      <arglist>(char32_t const (&amp;)[N]) -&gt; fixed_string&lt; N - 1 &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a93707ac3991ac5c156615e215a1384d6</anchor>
      <arglist>() -&gt; fixed_string&lt; 0 &gt;</arglist>
    </member>
    <member kind="function">
      <type>spdlog::logger &amp;</type>
      <name>logger</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aff57a3a07ee40f65ff8bc6fb366ef213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>spdlog::logger &amp;</type>
      <name>logger</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a54d37fa736019ccd6fa758188e92a531</anchor>
      <arglist>(std::string_view const name)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>floor</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>abff8f8d67c3c82aeaf5dfd3b22e1e04c</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>min</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>af4eabce8da597789894742e0ff1c5f9c</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>min</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a73e8a914948362c1b3ed4a8ef798251c</anchor>
      <arglist>(T const &amp;v1, T const &amp;v2, Args const &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>max</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a74d83336c78fa897694e02f6a7ab23be</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>max</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3804030738de270b4c36908fc3c52fed</anchor>
      <arglist>(T const &amp;v1, T const &amp;v2, Args const &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>abs</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ae4c4d4607b5e6e102526c34e7e1da28c</anchor>
      <arglist>(T const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr f32</type>
      <name>fmod</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3314ef5d9f30d6306ac8e9405e46c32b</anchor>
      <arglist>(f32 const x, f32 const y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_radians</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>af201b16ebb83772c80cbf0be2cc66f9f</anchor>
      <arglist>(T degrees) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_degrees</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ab82688d5b3bb345e4e13785b71a82ef3</anchor>
      <arglist>(T radians) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_eq</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3b664eeb777e744d28a934fbbfe7fb9d</anchor>
      <arglist>(T a, T b, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_null</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a133e146ce941ab21cc48ef4fee67fbf2</anchor>
      <arglist>(T a, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>div_euclid</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3609f72bf9b34e19aa946b3818906083</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rem_euclid</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a361c57dccc4d77581f9b1683da801ca8</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a0d05f1fba4b2a406b9b601ae2ca01d52</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a8370664b5bbad1b6381cb9edafff7837</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a2c48fb6a600c8d74e896f6ca478238c6</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>afbf02ab88de8ee51076df7049a054bad</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a78865e20aefef4ba07bf33b8d721a0d8</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a181b4dd8d202f0f908b5d94d53df2a9b</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ac00eba714d8403879fdcb28a411bff26</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a80e8931aac15efa0150608e1d6dc1015</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ae69bcd266c182151f04d54b7e74c7b75</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>af26d67eee717102a4845a9a5efee7e74</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a03266f07d8deafa524f1df3f6350e374</anchor>
      <arglist>(optional&lt; T &gt; const &amp;, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a9ff251fe02ae34d11055ef96a271dd20</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ae9cc5a4db53306f13a59f9875b671edc</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a2cbe98b2937ed37e1e9f235140067f1d</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ac938e5316b0f426c847d8c60d05b5c4d</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ab225f6d5c3a6174ba21ede5eaa2b95b9</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a42d4f2085dc71e1e690233e55de501d8</anchor>
      <arglist>(optional&lt; T &gt; const &amp;, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a71baba00689328e8d49cebcfdbb51d4d</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a38b2a9adecd48d3993dfdc8dd33ad923</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>abc921952949e364846600a2e942dba2d</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a9376e9bb203be84b12d38ed2199e0c92</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a0f6f7a5d7731439bf15f3830e57722a9</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a6dda171e64251b24c31441cac2e75ac0</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aa84746156b4110d1bd314530ae9c83d6</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a5db46a024140c5d3a475a6fce9e030a4</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a2bf6cd32aa5d13480df9e7ec65f4332f</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a33363ed76243e8cc4c8521b9b2862c55</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>adfd9636d2c90eff87bc1c9bcb5f384ab</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a0e86c302bec0a5620046855e198160ad</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a62d2c5380a6dca67cd41d87fa3c59c96</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a2ce23df53de6a3afe449b2a68d618baa</anchor>
      <arglist>(optional&lt; T &gt; &amp;lhs, optional&lt; T &gt; &amp;rhs) noexcept(noexcept(lhs.swap(rhs)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; Ret &gt;</type>
      <name>make_optional</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a7dc8631a5b5c41fa83c9877261f24f4b</anchor>
      <arglist>(U &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; T &gt;</type>
      <name>make_optional</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ad410a0e05b7621b22e9478873d51157f</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; T &gt;</type>
      <name>make_optional</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ae65f8f3c7ad36d7d5739d1c790becea4</anchor>
      <arglist>(std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a10df8864bcef3663b7348d3e7c426c08</anchor>
      <arglist>(T) -&gt; optional&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::decay_t&lt; T &gt; &gt;</type>
      <name>some</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a32bf03f2bb704bfd54de129253923853</anchor>
      <arglist>(T &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>unexpected&lt; std::decay_t&lt; std::string &gt; &gt;</type>
      <name>error</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aa24fbb6493fb1c68a84c57f8edf0df78</anchor>
      <arglist>(std::string_view format, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>expected&lt; std::decay_t&lt; T &gt;, std::string &gt;</type>
      <name>ok</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a19b6b29c0b55bd54027a7299fbb4f749</anchor>
      <arglist>(T &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>ok</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ab0e045b626d9d7cf87ed1aa698259118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; E, T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>acc7168e14150404fc998c1941db54778</anchor>
      <arglist>(std::basic_ostream&lt; E, T &gt; &amp;os, source_location const &amp;loc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ab284ef08e517b8aba8d8d95faf498e22</anchor>
      <arglist>(source_location const &amp;lhs, source_location const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ade121ac8f63ad9cd9f7d195b45267f47</anchor>
      <arglist>(source_location const &amp;lhs, source_location const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a7a7eef0c3d21070f1ab662ce10eed0e6</anchor>
      <arglist>(std::string const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a2d9362bcd46107ac47f7a90bc4bdfd2f</anchor>
      <arglist>(std::string_view input)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split_by</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a565947f3424d6bedd9c1c71589381067</anchor>
      <arglist>(std::string const &amp;input, char delimiter)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split_by</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a55c4bd14701a5b376f10850b20e21169</anchor>
      <arglist>(std::string_view input, char delimiter)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_lower</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3823f9ff43f6701583a75670b0296cc7</anchor>
      <arglist>(std::string_view input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>acbd24b6109e5f380b3cf4d1c43c6962c</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a38a3ab37f3f00d177451e79735090ec4</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, C c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aa912c388c56f23ad7e3b98f1c0df1d31</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, C const *chp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a645e0b5bf2bc7ee948e6b3d8e2dc376b</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a81d0449b479291c7d5049cf76d7696fb</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, C c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a4e035ddb9718bc08019496b6c6ddb873</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, C const *chp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a44ed08db858fdc12c675bf8b742301ef</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a937cb75f70541059be4f0d93d5564208</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, C c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a9bd42e407624091b229693202a49371f</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, C const *chp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a0c5bbdae4d29d8f7816a908fb8854b5a</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ad01e1b8b6190020ff952a1907356de74</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, C c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ae457d303844bbad6b2bc5f979757376e</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, C const *chp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>from_c_str</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ae66f7eb2436c5443334b2fd741c2a6c8</anchor>
      <arglist>(char const *owned_str, int const size=-1, F &amp;&amp;dealloc_function=[](char const *ptr) { std::free(const_cast&lt; char * &gt;(ptr));})</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator+</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a71fcdc817fe806b3ebf3c0cbfe62ae24</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator-</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a53afd0290d86ebbdfcdcf3f0d14dc3a3</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator*</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a9c6dc718ca204222bcc7383fd3a79ad7</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator/</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a374efea9fd7a7a566e5fef06bb91ba9b</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator%</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a87c82f0def46fbd326e6402ed8f9c896</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator&amp;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ac519d56925c691db9dbc22c70055e68b</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator|</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>abc7ddb57d233f34f4d7a38d0a54f41d4</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator^</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ae2e2d1215a9617a368e6f2e94a8d0cd5</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a2e0b0b3a66d5c22bf22ec06d809768be</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a128590b9b5450da1ec1b22766e667995</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aee0f7520b00daf0521747f401446a3c3</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a32c342fcab0b4eae40437740466d69ee</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3950f999361b442171829de998722c6f</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ad951feb36968569241fb29864059cd55</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreachable</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a6b16180428689fe11cb64602a01d0bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>to_underlying</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a0c40281e7e71d31612052e57c5fb9612</anchor>
      <arglist>(T t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lazy</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>adb517f6aef1095463f5b99bdca84b674</anchor>
      <arglist>(F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>detail::scope_guard&lt; Callback &gt;</type>
      <name>make_scope_guard</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>adead592f63e902703f2eafe1a84c8c39</anchor>
      <arglist>(Callback &amp;&amp;callback) noexcept(noexcept(detail::make_scope_guard&lt; Callback &gt;(std::forward&lt; Callback &gt;(callback))))</arglist>
    </member>
    <member kind="function">
      <type>detail::scope_guard&lt; Callback &gt;</type>
      <name>finally</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a4478278bd75e75155c8b78252c463449</anchor>
      <arglist>(Callback &amp;&amp;callback) noexcept(noexcept(detail::finally&lt; Callback &gt;(std::forward&lt; Callback &gt;(callback))))</arglist>
    </member>
    <member kind="function">
      <type>constexpr char</type>
      <name>to_lower</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aa2ac992b453bb274274469d4d8f56d11</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_digit</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>af68a12b51a4791577f54e47d511ed2a0</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_space</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ad3114db5b52d645558905bb4fed44d75</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_operator</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3e6df95408fa1bb0aab9e06c147fd77b</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_dot</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a1780929f0c6cb09297195353c80b69c6</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_logical_or</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a8b487a3cf659c8bca9a7c07789adb771</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a5008fd48c1071699206cd6d579449aa4</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>adcbe8807406cc8aa064716fc45b6b884</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hex</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aa0081edc20545d2dcdc260bcb3f76c11</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::uint16_t</type>
      <name>to_digit</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a1b941795f030a32f793995e3a8ab320f</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr unsigned char</type>
      <name>hex_to_char</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a1a8401eebbf5aa9e44e354c8cd010b7d</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a1e812b2ea089752a87be2ac86e612a8c</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3754d70a05164d35df35192328143441</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a9402d1f616e061722d459bc749f241db</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a93f08384d9cf69572a1f4de237a70c8c</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a0888f398211a3d09006abf1983180fca</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a0249bef442e4ef3bd889d81d20ac1e63</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aa1a18a61eb55747f701aad03d368ce20</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>valid</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>af1a5fbb6c566276e11ba1eb32e8185c6</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr from_chars_result</type>
      <name>from_chars</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a7b7c208284a60401325bd28c7a14b61b</anchor>
      <arglist>(char const *first, char const *last, version &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr to_chars_result</type>
      <name>to_chars</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>af655be537cff0e6f30238fae8c734426</anchor>
      <arglist>(char *first, char *last, version const &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; version &gt;</type>
      <name>from_string_noexcept</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aae28f414693a05244ba5682d857a387d</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr version</type>
      <name>from_string</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a3e37e6d804b4ebb7248025a9c806a5df</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>aa305eecc83001e53b51910f9d8706817</anchor>
      <arglist>(version const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>af34ca1711e7fa0f525664857ca5de08c</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, version const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a4b35da612cf42cf7fbc034f6a42fdfb8</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a292db00f4861dfbeefad863b1bc597cd</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a8fb77180382b9b81d3dfcbe862975bd3</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a94dbd2132831b9c037da42f4558bb0fa</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ab3f607d4a0a3e67b0c9bd7003e8e2a83</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a669aa7532b39c1a3005be0bee9cded1f</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr observer_ptr&lt; T &gt;</type>
      <name>make_observer</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ad5173e7623857d47497d630da58ae3dc</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>none</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ad3c2d18231988879a7668919336b77d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_any_of_v</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a9cd34d1464238cb87ba225fd7ab5e967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr overload_t&lt; Args... &gt;</type>
      <name>overload</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a204ff23cb21cff38724a73ed389e623d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr const_overload_t&lt; Args... &gt;</type>
      <name>const_overload</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>a67ba25528160374ce1813eb37f2ab984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr non_const_overload_t&lt; Args... &gt;</type>
      <name>non_const_overload</name>
      <anchorfile>namespacerll.html</anchorfile>
      <anchor>ab602412f57d79a72a8509e5d89b73958</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="namespacerll.html" title="introduction">Quick</docanchor>
    <docanchor file="namespacerll.html">Usage</docanchor>
    <docanchor file="namespacerll.html">Examples</docanchor>
  </compound>
  <compound kind="namespace">
    <name>rll::comparators</name>
    <filename>namespacerll_1_1comparators.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>comparators_option</name>
      <anchorfile>namespacerll_1_1comparators.html</anchorfile>
      <anchor>aa8f4e2069421aac7a4ddbbf7d5959023</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerll_1_1comparators.html" anchor="aa8f4e2069421aac7a4ddbbf7d5959023addeceef5ab5e83d395f484906200d378">exclude_prerelease</enumvalue>
      <enumvalue file="namespacerll_1_1comparators.html" anchor="aa8f4e2069421aac7a4ddbbf7d5959023ae6190b381edc2f52d53e4c142b6fdd8a">include_prerelease</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>namespacerll_1_1comparators.html</anchorfile>
      <anchor>a0a8697d7af6f831b4495c57d71550a34</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>equal_to</name>
      <anchorfile>namespacerll_1_1comparators.html</anchorfile>
      <anchor>a3e302003600100689ca57a211726e9e5</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>not_equal_to</name>
      <anchorfile>namespacerll_1_1comparators.html</anchorfile>
      <anchor>a8ab74724dfa36244860698f6b746ee0e</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>greater</name>
      <anchorfile>namespacerll_1_1comparators.html</anchorfile>
      <anchor>a8bb3d3649e4556b6a25a0892d952fa3f</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>greater_equal</name>
      <anchorfile>namespacerll_1_1comparators.html</anchorfile>
      <anchor>ab0cb910dea070988939cdbe43ad83eef</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>less</name>
      <anchorfile>namespacerll_1_1comparators.html</anchorfile>
      <anchor>a61aea66adf9470ad6535d60366b5be9f</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>less_equal</name>
      <anchorfile>namespacerll_1_1comparators.html</anchorfile>
      <anchor>a72f942fb2faa2c5f9723ddf48e8fccc2</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rll::crypto</name>
    <filename>namespacerll_1_1crypto.html</filename>
    <class kind="class">rll::crypto::basic_hasher</class>
    <class kind="class">rll::crypto::md5</class>
  </compound>
  <compound kind="namespace">
    <name>rll::detail</name>
    <filename>namespacerll_1_1detail.html</filename>
    <class kind="struct">rll::detail::char_or_throw</class>
    <class kind="struct">rll::detail::char_reader</class>
    <class kind="struct">rll::detail::char_reader&lt; char &gt;</class>
    <class kind="struct">rll::detail::char_reader&lt; char16_t &gt;</class>
    <class kind="struct">rll::detail::char_reader&lt; char32_t &gt;</class>
    <class kind="struct">rll::detail::char_reader&lt; char8_t &gt;</class>
    <class kind="struct">rll::detail::char_reader&lt; wchar_t &gt;</class>
    <class kind="struct">rll::detail::symbol</class>
    <class kind="struct">rll::detail::utf16_reader</class>
    <class kind="struct">rll::detail::utf32_reader</class>
    <class kind="struct">rll::detail::utf8_reader</class>
    <member kind="function">
      <type>contract_violation</type>
      <name>make_contract_violation</name>
      <anchorfile>namespacerll_1_1detail.html</anchorfile>
      <anchor>ad2b84c89bf924070f1baca614f71e96e</anchor>
      <arglist>(contract_type type, std::string_view message, source_location location=source_location::current())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>violate</name>
      <anchorfile>namespacerll_1_1detail.html</anchorfile>
      <anchor>a2274f95f096f984744d37a4852e4fb82</anchor>
      <arglist>(contract_type type, std::string_view message, source_location const &amp;location=source_location::current())</arglist>
    </member>
    <member kind="function">
      <type>constexpr char</type>
      <name>next_char</name>
      <anchorfile>namespacerll_1_1detail.html</anchorfile>
      <anchor>ad204a7a3a84e765f7acf9ff80462cc72</anchor>
      <arglist>(T const *&amp;it, T const *begin, T const *end) noexcept(noexcept(detail::char_reader&lt; T &gt;::next(it, begin, end)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr char</type>
      <name>next_char_or_error</name>
      <anchorfile>namespacerll_1_1detail.html</anchorfile>
      <anchor>a3d82ac7a7db189b8052f40ecb9cbe011</anchor>
      <arglist>(T const *&amp;it, T const *end, bool &amp;error, u32 &amp;error_symbol) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rll::io</name>
    <filename>namespacerll_1_1io.html</filename>
    <class kind="class">rll::io::filedevice</class>
  </compound>
  <compound kind="namespace">
    <name>rll::literals</name>
    <filename>namespacerll_1_1literals.html</filename>
    <member kind="function">
      <type>constexpr u8</type>
      <name>operator&quot;&quot;_u8</name>
      <anchorfile>namespacerll_1_1literals.html</anchorfile>
      <anchor>a66d4892373f46df8be4f3dbcb7b19f32</anchor>
      <arglist>(ulonglong const value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr u16</type>
      <name>operator&quot;&quot;_u16</name>
      <anchorfile>namespacerll_1_1literals.html</anchorfile>
      <anchor>a231a19902dcace310701720ae27f6d87</anchor>
      <arglist>(ulonglong const value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr u32</type>
      <name>operator&quot;&quot;_u32</name>
      <anchorfile>namespacerll_1_1literals.html</anchorfile>
      <anchor>ad4641d3216b8956445e6d33cdd7a221d</anchor>
      <arglist>(ulonglong const value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr u64</type>
      <name>operator&quot;&quot;_u64</name>
      <anchorfile>namespacerll_1_1literals.html</anchorfile>
      <anchor>a2acfd9fd2e30c6c698bd10205966f4d8</anchor>
      <arglist>(ulonglong const value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i8</type>
      <name>operator&quot;&quot;_i8</name>
      <anchorfile>namespacerll_1_1literals.html</anchorfile>
      <anchor>a88cbf417f855befc588cee6426921d6e</anchor>
      <arglist>(ulonglong const value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i16</type>
      <name>operator&quot;&quot;_i16</name>
      <anchorfile>namespacerll_1_1literals.html</anchorfile>
      <anchor>ae9f6337075a6d7b2759eddc2cea87079</anchor>
      <arglist>(ulonglong const value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i32</type>
      <name>operator&quot;&quot;_i32</name>
      <anchorfile>namespacerll_1_1literals.html</anchorfile>
      <anchor>a53685a5c64a563b14a44616cc22e5c47</anchor>
      <arglist>(ulonglong const value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i64</type>
      <name>operator&quot;&quot;_i64</name>
      <anchorfile>namespacerll_1_1literals.html</anchorfile>
      <anchor>a73960111c43e3450a5f261f024138d4b</anchor>
      <arglist>(ulonglong const value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::ptrdiff_t</type>
      <name>operator&quot;&quot;_ptrdiff</name>
      <anchorfile>namespacerll_1_1literals.html</anchorfile>
      <anchor>a42ad61e5f17e218f035b160c1b2e7f27</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator&quot;&quot;_pvoid</name>
      <anchorfile>namespacerll_1_1literals.html</anchorfile>
      <anchor>ac9f53daed72d5ff276466c6897d905d0</anchor>
      <arglist>(ulonglong const value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr version</type>
      <name>operator&quot;&quot;_version</name>
      <anchorfile>namespacerll_1_1literals.html</anchorfile>
      <anchor>a58ca85302d7046a87705709592d72c28</anchor>
      <arglist>(char const *str, std::size_t length)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rll::meta</name>
    <filename>namespacerll_1_1meta.html</filename>
    <class kind="class">rll::meta::project_meta</class>
  </compound>
  <compound kind="namespace">
    <name>rll::net</name>
    <filename>namespacerll_1_1net.html</filename>
  </compound>
  <compound kind="namespace">
    <name>rll::numbers</name>
    <filename>namespacerll_1_1numbers.html</filename>
    <member kind="variable">
      <type>constexpr T</type>
      <name>pi_v</name>
      <anchorfile>namespacerll_1_1numbers.html</anchorfile>
      <anchor>aa433783b612e2b09fffe6204316d153c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>e_v</name>
      <anchorfile>namespacerll_1_1numbers.html</anchorfile>
      <anchor>ac0608839f81b1b2e5ad31acd0641f40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>pi</name>
      <anchorfile>namespacerll_1_1numbers.html</anchorfile>
      <anchor>af529dd606ebdcbc38fcdb82635ea9e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>e</name>
      <anchorfile>namespacerll_1_1numbers.html</anchorfile>
      <anchor>a8043317fda32a0e2c681380e63301dd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rll::oslayer</name>
    <filename>namespacerll_1_1oslayer.html</filename>
    <namespace>rll::oslayer::android</namespace>
    <namespace>rll::oslayer::linux</namespace>
    <namespace>rll::oslayer::win</namespace>
  </compound>
  <compound kind="namespace">
    <name>rll::oslayer::android</name>
    <filename>namespacerll_1_1oslayer_1_1android.html</filename>
    <class kind="struct">rll::oslayer::android::guid_info</class>
    <member kind="function">
      <type>void</type>
      <name>init_jni</name>
      <anchorfile>namespacerll_1_1oslayer_1_1android.html</anchorfile>
      <anchor>aae61db4b43aec78ae0866d3933733536</anchor>
      <arglist>(JNIEnv *env)</arglist>
    </member>
    <member kind="variable">
      <type>guid_info</type>
      <name>info</name>
      <anchorfile>namespacerll_1_1oslayer_1_1android.html</anchorfile>
      <anchor>a98ec32542bda0f3914a72f820085f08f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rll::oslayer::linux</name>
    <filename>namespacerll_1_1oslayer_1_1linux.html</filename>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>home_dir</name>
      <anchorfile>namespacerll_1_1oslayer_1_1linux.html</anchorfile>
      <anchor>a977aadbf538fffe28177eb58bfb8d8dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>xdg_runtime_dir</name>
      <anchorfile>namespacerll_1_1oslayer_1_1linux.html</anchorfile>
      <anchor>aac53759fe3ce7183d08360a791ad58a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rll::oslayer::win</name>
    <filename>namespacerll_1_1oslayer_1_1win.html</filename>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>known_folder_path</name>
      <anchorfile>namespacerll_1_1oslayer_1_1win.html</anchorfile>
      <anchor>a3bc7321510c57d849ad550c35937fbad</anchor>
      <arglist>(::KNOWNFOLDERID id)</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>home_dir</name>
      <anchorfile>namespacerll_1_1oslayer_1_1win.html</anchorfile>
      <anchor>a29096d467353da315762cc57b08b4637</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>appdata_dir</name>
      <anchorfile>namespacerll_1_1oslayer_1_1win.html</anchorfile>
      <anchor>a620d231266d153b0b9f1c06ef557fef4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>local_appdata_dir</name>
      <anchorfile>namespacerll_1_1oslayer_1_1win.html</anchorfile>
      <anchor>a4355e5d7ba6f2e2b9a2a81062877af10</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rll::rtti</name>
    <filename>namespacerll_1_1rtti.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>demangle</name>
      <anchorfile>namespacerll_1_1rtti.html</anchorfile>
      <anchor>a803c6abd6fbe6c10bc9343edf781bac4</anchor>
      <arglist>(char const *name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type_name</name>
      <anchorfile>namespacerll_1_1rtti.html</anchorfile>
      <anchor>ab2d06f9827cb7319258ecf9cfaee446f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rll::serialization</name>
    <filename>namespacerll_1_1serialization.html</filename>
    <namespace>rll::serialization::format</namespace>
  </compound>
  <compound kind="namespace">
    <name>rll::serialization::format</name>
    <filename>namespacerll_1_1serialization_1_1format.html</filename>
    <class kind="struct">rll::serialization::format::bson</class>
    <class kind="struct">rll::serialization::format::cbor</class>
    <class kind="struct">rll::serialization::format::flexbuffer</class>
    <class kind="struct">rll::serialization::format::generic</class>
    <class kind="struct">rll::serialization::format::json</class>
    <class kind="struct">rll::serialization::format::msgpack</class>
    <class kind="struct">rll::serialization::format::toml</class>
    <class kind="struct">rll::serialization::format::xml</class>
    <class kind="struct">rll::serialization::format::yaml</class>
  </compound>
  <compound kind="group">
    <name>core</name>
    <title>Core</title>
    <filename>group__core.html</filename>
    <subgroup>macros</subgroup>
    <subgroup>meta</subgroup>
    <subgroup>platform</subgroup>
  </compound>
  <compound kind="group">
    <name>macros</name>
    <title>Definitions and macros</title>
    <filename>group__macros.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>RLL_DOC</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga2ead78024387c6bb4b855669c8ff29de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___constexpr___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga0c9fde80eb6d7ab75a391dc178ef18b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_QT_CORE</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga6c4db82ea1bcad14033c5a27ee416607</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_QT_GUI</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>gacb133e37e7787d05baa82a25c970a4f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_DEBUG</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga4be4154a097b6e8f1ba12097c708ff86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_NO_DEBUG</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga1bda7c0d1bfca193457f9c1d24d97f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___noinline___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga145bb0d26bb2157f4dc7874127366986</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___inline___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga791216d5be3d4ee7f5b5b04f597a7fcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>meta</name>
    <title>Library metadata</title>
    <filename>group__meta.html</filename>
    <class kind="class">rll::meta::project_meta</class>
    <member kind="define">
      <type>#define</type>
      <name>RLL_VERSION_MAJOR</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae4c933ea69724c0db284d67b6aae924b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_VERSION_MINOR</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7bc19100e1baacd2ace277c9dd887e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_VERSION_PATCH</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga342cb729fd7b0d2ef0426d67279ec2ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_VERSION_STRING</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga97bb07d0d43dd11931df039a8c99f905</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>platform</name>
    <title>Platform</title>
    <filename>group__platform.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_WINDOWS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga1ba5279bc6c0baa3ee7ae98a95fb6e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_LINUX</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gafa2394deb8155785a6c7c5db668fd623</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_DARWIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga018aad7ab2bda51c19047dad10980ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_ANDROID</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga053f2973928fa55ed58eca19cbc486ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_IOS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaeee59866d9f0af231de0ff8926f39d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_CYGWIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gac22d3b1b2b685346e73e63dbbb15b5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_FREEBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga2e9baf2fa0875318c1017f923d83f27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_DRAGONFLY</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaf885a266bb9e45d7c3fea18394c0530f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_NETBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gabebd3e06cbac83f44e83d7c00376fd2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLLOPPY_OS_OPENBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga1d327ce62f081fe24967a2e08f74ee25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_OS_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gabcf410c69a77977a2052845c022edec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_X86_32</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga076c7d57ff6b3527ea01ca5ddf00786e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_X86_64</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga10ade98b3c5c718e2c124c6fd42f88f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_ALPHA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gae54ae66007179b512eb2e91613a906da</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_ARM</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gacf98770d834e5692caa9d02b4da94dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_BFIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga90d9673291e7d19d8f292b7b188d6c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_CONVEX</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga8137dc5b3cfd87f74cca6aeef451eaae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_E2K</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga78bf7789114c539f770ecfe8d6c5b25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_IA64</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga4f48350c5075b67ac0071679f14b201e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_LOONGARCH</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga8a06ccd57cb5d5213179fbca58739c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_M68K</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gade806c628966581ce537a6072c8c6bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_MIPS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga47e04dac58fb5b3df4bc2547a0b1a093</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_HPPA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga32617aeae628226f8227db4c7f3253a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_POWERPC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga5623ca341385be52db9cc25ce66ad250</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_CUDA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaef493399e7cdc7886c166664d63d8588</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_PYRAMID</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga6ae673c8b4135b5d202a82522cc8ec5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_RISCV</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga17aa3376cb1d3792f6ccfa45b829d764</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_RS6000</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gacc23cd23d64093f04a6651f5efe2a34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_SPARC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaad05de2370e92d27f17d415866bebdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_SUPERH</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga556c746bf4dd457962a863af5f5b237d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ARCH_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga1863cafb46fe173aa7f5b1d10110396a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_CLANG</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gada7447d6c6a54182cc3b4d32d4f62567</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_GNU</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gae2ca49015641c119b554f478f7e6de0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_INTEL</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gac4a050d47c3a06c942bdf715483e8dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_NVIDIA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga5d3f29af09ff0c90d567e5a9dcac33ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_MSVC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga598fe34bb0eebfb022d512a7f9937103</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_COMPILER_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gabc5195a3328c09dc522a657cf0959d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ENDIAN_BIG</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga26ace2e7bf69a6d02940c7040dfdc214</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ENDIAN_LITTLE</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga745cdfdc5a0e775e2d04f45f5a85e5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RLL_ENDIAN_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga7e1638732a4642956e03c27a2c947f52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Rolly documentation</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Introduction">intro_sec</docanchor>
    <docanchor file="index.html" title="Installation">install_sec</docanchor>
    <docanchor file="index.html" title="Usage">usage_sec</docanchor>
    <docanchor file="index.html" title="License">license_sec</docanchor>
  </compound>
</tagfile>
