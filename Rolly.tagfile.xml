<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.8">
  <compound kind="file">
    <name>all.h</name>
    <filename>all_8h.html</filename>
    <includes id="bit_8h" name="bit.h" local="yes" import="no" module="no" objc="no">./bit.h</includes>
    <includes id="concepts_8h" name="concepts.h" local="yes" import="no" module="no" objc="no">./concepts.h</includes>
    <includes id="contracts_8h" name="contracts.h" local="yes" import="no" module="no" objc="no">./contracts.h</includes>
    <includes id="directories_8h" name="directories.h" local="yes" import="no" module="no" objc="no">./directories.h</includes>
    <includes id="exception_8h" name="exception.h" local="yes" import="no" module="no" objc="no">./exception.h</includes>
    <includes id="functional_8h" name="functional.h" local="yes" import="no" module="no" objc="no">./functional.h</includes>
    <includes id="global_8h" name="global.h" local="yes" import="no" module="no" objc="no">./global.h</includes>
    <includes id="include_2rolly_2library_8h" name="library.h" local="yes" import="no" module="no" objc="no">./library.h</includes>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">./math.h</includes>
    <includes id="memory_8h" name="memory.h" local="yes" import="no" module="no" objc="no">./memory.h</includes>
    <includes id="net_8h" name="net.h" local="yes" import="no" module="no" objc="no">./net.h</includes>
    <includes id="numbers_8h" name="numbers.h" local="yes" import="no" module="no" objc="no">./numbers.h</includes>
    <includes id="rtti_8h" name="rtti.h" local="yes" import="no" module="no" objc="no">./rtti.h</includes>
    <includes id="savefile_8h" name="savefile.h" local="yes" import="no" module="no" objc="no">./savefile.h</includes>
    <includes id="serialization_8h" name="serialization.h" local="yes" import="no" module="no" objc="no">./serialization.h</includes>
    <includes id="source__location_8h" name="source_location.h" local="yes" import="no" module="no" objc="no">./source_location.h</includes>
    <includes id="string__util_8h" name="string_util.h" local="yes" import="no" module="no" objc="no">./string_util.h</includes>
    <includes id="traits_8h" name="traits.h" local="yes" import="no" module="no" objc="no">./traits.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="yes" import="no" module="no" objc="no">./type_traits.h</includes>
    <includes id="types_8h" name="types.h" local="yes" import="no" module="no" objc="no">./types.h</includes>
  </compound>
  <compound kind="file">
    <name>bit.h</name>
    <filename>bit_8h.html</filename>
    <includes id="global_8h" name="global.h" local="yes" import="no" module="no" objc="no">global.h</includes>
    <includes id="num_8h" name="num.h" local="yes" import="no" module="no" objc="no">concepts/num.h</includes>
    <namespace>rolly</namespace>
    <member kind="define">
      <type>#define</type>
      <name>__builtin_popcount</name>
      <anchorfile>bit_8h.html</anchorfile>
      <anchor>ae52f9ab121b791b441455c2de191034e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___rolly_byteswap16</name>
      <anchorfile>bit_8h.html</anchorfile>
      <anchor>a73644f3cbdf00887a94b718f6ef0054a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___rolly_byteswap32</name>
      <anchorfile>bit_8h.html</anchorfile>
      <anchor>a9b6038988dad05d084ae36c96fcf0f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___rolly_byteswap64</name>
      <anchorfile>bit_8h.html</anchorfile>
      <anchor>aa23cf7e17f975f07efb2fd4bf3c20092</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_LITTLE_ENDIAN</name>
      <anchorfile>bit_8h.html</anchorfile>
      <anchor>a2fe1eddfeb179dff886a950589f79e65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_BIG_ENDIAN</name>
      <anchorfile>bit_8h.html</anchorfile>
      <anchor>a0489458174381713533c322ef1892a29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>concepts.h</name>
    <filename>concepts_8h.html</filename>
    <includes id="enum_8h" name="enum.h" local="yes" import="no" module="no" objc="no">concepts/enum.h</includes>
    <includes id="num_8h" name="num.h" local="yes" import="no" module="no" objc="no">concepts/num.h</includes>
    <includes id="ptr_8h" name="ptr.h" local="yes" import="no" module="no" objc="no">concepts/ptr.h</includes>
    <includes id="standard__copyable__and__movable_8h" name="standard_copyable_and_movable.h" local="yes" import="no" module="no" objc="no">concepts/standard_copyable_and_movable.h</includes>
    <includes id="threading_8h" name="threading.h" local="yes" import="no" module="no" objc="no">concepts/threading.h</includes>
    <includes id="any__of_8h" name="any_of.h" local="yes" import="no" module="no" objc="no">concepts/any_of.h</includes>
  </compound>
  <compound kind="file">
    <name>concepts.h</name>
    <filename>qt_2concepts_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <class kind="struct">rolly::is_qobject</class>
    <class kind="struct">rolly::is_qgadget</class>
    <class kind="struct">rolly::is_qgadget&lt; T, std::void_t&lt; decltype(T::staticMetaObject)&gt; &gt;</class>
    <namespace>rolly</namespace>
    <namespace>rolly::concepts</namespace>
    <concept>rolly::concepts::qobject</concept>
    <concept>rolly::concepts::qgadget</concept>
  </compound>
  <compound kind="file">
    <name>any_of.h</name>
    <filename>any__of_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="yes" import="no" module="no" objc="no">../type_traits.h</includes>
    <class kind="struct">rolly::is_any_of</class>
    <namespace>rolly</namespace>
    <namespace>rolly::concepts</namespace>
    <concept>rolly::concepts::any_of</concept>
  </compound>
  <compound kind="file">
    <name>enum.h</name>
    <filename>enum_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="yes" import="no" module="no" objc="no">../type_traits.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::concepts</namespace>
    <concept>rolly::concepts::enum_</concept>
  </compound>
  <compound kind="file">
    <name>num.h</name>
    <filename>num_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="yes" import="no" module="no" objc="no">../type_traits.h</includes>
    <class kind="struct">rolly::is_num</class>
    <namespace>rolly</namespace>
    <namespace>rolly::concepts</namespace>
    <concept>rolly::concepts::num</concept>
  </compound>
  <compound kind="file">
    <name>ptr.h</name>
    <filename>ptr_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::concepts</namespace>
    <concept>rolly::concepts::ptr</concept>
    <concept>rolly::concepts::c_ptr</concept>
    <concept>rolly::concepts::smart_ptr</concept>
    <concept>rolly::concepts::ptr_like</concept>
  </compound>
  <compound kind="file">
    <name>standard_copyable_and_movable.h</name>
    <filename>standard__copyable__and__movable_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::concepts</namespace>
    <concept>rolly::concepts::standard_copyable_and_movable</concept>
  </compound>
  <compound kind="file">
    <name>threading.h</name>
    <filename>threading_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::concepts</namespace>
    <concept>rolly::concepts::basic_lockable</concept>
    <concept>rolly::concepts::lockable</concept>
    <concept>rolly::concepts::timed_lockable</concept>
    <concept>rolly::concepts::shared_lockable</concept>
    <concept>rolly::concepts::shared_timed_lockable</concept>
    <concept>rolly::concepts::mutex</concept>
    <concept>rolly::concepts::timed_mutex</concept>
    <concept>rolly::concepts::shared_mutex</concept>
    <concept>rolly::concepts::shared_timed_mutex</concept>
  </compound>
  <compound kind="file">
    <name>config.h</name>
    <filename>config_8h.html</filename>
    <includes id="serialization_8h" name="serialization.h" local="yes" import="no" module="no" objc="no">serialization.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">types/stdint.h</includes>
    <includes id="filedevice_8h" name="filedevice.h" local="yes" import="no" module="no" objc="no">io/filedevice.h</includes>
    <class kind="class">rolly::configuration_file</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>contracts.h</name>
    <filename>contracts_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">global/definitions.h</includes>
    <includes id="export_8h" name="export.h" local="yes" import="no" module="no" objc="no">global/export.h</includes>
    <includes id="source__location_8h" name="source_location.h" local="yes" import="no" module="no" objc="no">source_location.h</includes>
    <class kind="struct">rolly::contracts::contract_violation</class>
    <namespace>rolly</namespace>
    <namespace>rolly::contracts</namespace>
    <namespace>rolly::contracts::detail</namespace>
    <namespace>rolly::contracts::audit</namespace>
  </compound>
  <compound kind="file">
    <name>directories.h</name>
    <filename>directories_8h.html</filename>
    <includes id="export_8h" name="export.h" local="yes" import="no" module="no" objc="no">global/export.h</includes>
    <includes id="version_8h" name="version.h" local="yes" import="no" module="no" objc="no">global/version.h</includes>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">global/definitions.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">types/stdint.h</includes>
    <includes id="optional_8h" name="optional.h" local="yes" import="no" module="no" objc="no">types/optional.h</includes>
    <class kind="class">rolly::dirs</class>
    <class kind="class">rolly::application_dirs</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>exception.h</name>
    <filename>exception_8h.html</filename>
    <includes id="compile__time__error_8h" name="compile_time_error.h" local="yes" import="no" module="no" objc="no">exception/compile_time_error.h</includes>
    <includes id="serialization__error_8h" name="serialization_error.h" local="yes" import="no" module="no" objc="no">exception/serialization_error.h</includes>
  </compound>
  <compound kind="file">
    <name>compile_time_error.h</name>
    <filename>compile__time__error_8h.html</filename>
    <class kind="class">rolly::compile_time_error</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>serialization_error.h</name>
    <filename>serialization__error_8h.html</filename>
    <includes id="rtti_8h" name="rtti.h" local="yes" import="no" module="no" objc="no">../rtti.h</includes>
    <includes id="tags_8h" name="tags.h" local="yes" import="no" module="no" objc="no">../serialization/tags.h</includes>
    <class kind="class">rolly::serialization_error</class>
    <class kind="class">rolly::deserialization_error</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>functional.h</name>
    <path>rolly/</path>
    <filename>functional_8h.html</filename>
    <includes id="lazy_8h" name="lazy.h" local="yes" import="no" module="no" objc="no">functional/lazy.h</includes>
    <includes id="overload_8h" name="overload.h" local="yes" import="no" module="no" objc="no">functional/overload.h</includes>
    <includes id="scope__guard_8h" name="scope_guard.h" local="yes" import="no" module="no" objc="no">functional/scope_guard.h</includes>
  </compound>
  <compound kind="file">
    <name>lazy.h</name>
    <path>rolly/functional/</path>
    <filename>lazy_8h.html</filename>
    <includes id="standard__copyable__and__movable_8h" name="standard_copyable_and_movable.h" local="yes" import="no" module="no" objc="no">../concepts/standard_copyable_and_movable.h</includes>
    <includes id="noncopyable_8h" name="noncopyable.h" local="yes" import="no" module="no" objc="no">../traits/noncopyable.h</includes>
    <includes id="optional_8h" name="optional.h" local="yes" import="no" module="no" objc="no">../types/optional.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="yes" import="no" module="no" objc="no">../type_traits.h</includes>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>overload.h</name>
    <path>rolly/functional/</path>
    <filename>overload_8h.html</filename>
    <class kind="struct">rolly::non_const_overload_t</class>
    <class kind="struct">rolly::const_overload_t</class>
    <class kind="struct">rolly::overload_t</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>scope_guard.h</name>
    <path>rolly/functional/</path>
    <filename>scope__guard_8h.html</filename>
    <class kind="class">rolly::detail::scope_guard&lt; Callback &gt;</class>
    <namespace>rolly</namespace>
    <namespace>rolly::detail</namespace>
  </compound>
  <compound kind="file">
    <name>global.h</name>
    <path>rolly/</path>
    <filename>global_8h.html</filename>
    <includes id="charconv_8h" name="charconv.h" local="yes" import="no" module="no" objc="no">global/charconv.h</includes>
    <includes id="export_8h" name="export.h" local="yes" import="no" module="no" objc="no">global/export.h</includes>
    <includes id="version_8h" name="version.h" local="yes" import="no" module="no" objc="no">global/version.h</includes>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">global/definitions.h</includes>
  </compound>
  <compound kind="file">
    <name>char_utils.h</name>
    <path>rolly/global/</path>
    <filename>char__utils_8h.html</filename>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>charconv.h</name>
    <path>rolly/global/</path>
    <filename>charconv_8h.html</filename>
    <namespace>rolly</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_CONVERTIBLE_TO_STRING_VIEW</name>
      <anchorfile>charconv_8h.html</anchorfile>
      <anchor>a45800098988715afd7df3e3c7bccca52</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_CONVERTIBLE_TO_STRING</name>
      <anchorfile>charconv_8h.html</anchorfile>
      <anchor>a4fcbd720adba1662ad994ab67588e058</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_CONVERTIBLE_TO_STRING_DEFAULT</name>
      <anchorfile>charconv_8h.html</anchorfile>
      <anchor>ab62a8d7c4fb893156c4787b98a896443</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_CONVERTIBLE_FROM_STRING</name>
      <anchorfile>charconv_8h.html</anchorfile>
      <anchor>a274d7677a5e67a64ef79d2c530a33595</anchor>
      <arglist>(T)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>definitions.h</name>
    <path>rolly/global/</path>
    <filename>definitions_8h.html</filename>
    <includes id="export_8h" name="export.h" local="yes" import="no" module="no" objc="no">export.h</includes>
    <includes id="platform__definitions_8h" name="platform_definitions.h" local="yes" import="no" module="no" objc="no">platform_definitions.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_DOC</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga505b4a9fc37ca5cbd8fdcfdf5ef88dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___constexpr___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga0c9fde80eb6d7ab75a391dc178ef18b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_QT_CORE</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>gaa032e9c37560d16eb522f6ad25d09893</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_QT_GUI</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>gacdcb0a5fcef3d4a927a21b45ab4242a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_DEBUG</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga7529dd8806261ce6d42e74b6b8640645</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_NO_DEBUG</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga4bd557993872c902c6e785cb8a606e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___noinline___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga145bb0d26bb2157f4dc7874127366986</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___inline___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga791216d5be3d4ee7f5b5b04f597a7fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_RTTI</name>
      <anchorfile>definitions_8h.html</anchorfile>
      <anchor>a76e7d7fa392e4e041540bb715805ab6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>export.h</name>
    <path>rolly/global/</path>
    <filename>export_8h.html</filename>
    <namespace>rolly</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_API</name>
      <anchorfile>export_8h.html</anchorfile>
      <anchor>a3e079ee49421b0f6deb4ae6e3dbb4cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___rolly_cxx20___</name>
      <anchorfile>export_8h.html</anchorfile>
      <anchor>a56fd1dd3c32c74f39ba7442addc78246</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>groups.dox</name>
    <path>rolly/global/</path>
    <filename>groups_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>mainpage.dox</name>
    <path>rolly/global/</path>
    <filename>mainpage_8dox.html</filename>
  </compound>
  <compound kind="file">
    <name>platform_definitions.h</name>
    <path>rolly/global/</path>
    <filename>platform__definitions_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_WINDOWS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga3ac2093cf66c05ed2254c38419269b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_LINUX</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gad060f36ed8c26cd0962f465ce31711dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_DARWIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gab5514b1891219769aa14d21e80ed8608</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_ANDROID</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga989564bc81f298ea3be6d5ebc3ccaf19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_IOS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gacf820cfe648cdfff6118bf3ea7a468fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_CYGWIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gae4e7ffb21e0842d6e1a7ce8c7e33ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_FREEBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gad18005e148adeb353ea1ead9a885a497</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_DRAGONFLY</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaf8e1352717a68b2f0512331142b2a185</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_NETBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga1cbbe058d150e202e08ff27f93eb487c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLYOPPY_OS_OPENBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0f1f18fee1cd87a8eba133825fda2779</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga554e07346830d0faf9b967b1b641d1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_X86_32</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga890d65212ce7a0f8eea1afa31de77fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_X86_64</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga450bb34f0bd2c32320a771e4d789ad7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_ALPHA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga09a70e8470acbaa51a65fb264ad16bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_ARM</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga628febc9470197aa352f8016dad24a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_BFIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0f138c49b35a6a59a577165807bbdd47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_CONVEX</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaa2de711cdd8d7c84e8f0137477841f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_E2K</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga510bee8caa4157b4847084ba997275f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_IA64</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gafe790513c5d737dca75dbf755af849a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_LOONGARCH</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga22f7382a3682a533e7a0c553a155e62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_M68K</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga7874f48b75bba92f83b288578fdee7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_MIPS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0f713ee81bc999aba8cb5d387cfa7b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_HPPA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga57b544d6326b7e173678bb9c82989675</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_POWERPC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gac4fcae5db6d5ecb1f878da9a8e56a42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_CUDA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gabd1662c2611f3c6159a9d01e7e99e395</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_PYRAMID</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga49884b4788f50bb0ab4727533f78c40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_RISCV</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gab1655d147cf1bc9e32e1da6b8ac53f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_RS6000</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga6326919fd5ea05f09fe0743d2a950c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_SPARC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga26f2ec079683603790985f7e45aaddbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_SUPERH</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga792872a7c42c6aa9442f70afeae5172c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaede03277d29b2378353e2f24794f5265</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_CLANG</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga4866f2313174db6a067b61d63c174672</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_GNU</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga84aa2b5b51025d52183c06f236113007</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_INTEL</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0d31831f176d24cde1fb95556b50b4f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_NVIDIA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gae7fff818a131b880b357a83bcd16d634</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_MSVC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga5deb8ecba17561da1fd2a34bb000e6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gac522f7e788f608ec355ad390a0fe3de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ENDIAN_BIG</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaf6bc941a5499e1203ce88d31e521598e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ENDIAN_LITTLE</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga5fc2015645e6eb1845fe995e9dda9862</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ENDIAN_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga8132bb6bedcf01aa05cc4f45da438023</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>semver.h</name>
    <path>rolly/global/</path>
    <filename>semver_8h.html</filename>
    <includes id="char__utils_8h" name="char_utils.h" local="yes" import="no" module="no" objc="no">char_utils.h</includes>
    <includes id="version__definitions_8h" name="version_definitions.h" local="yes" import="no" module="no" objc="no">version_definitions.h</includes>
    <includes id="optional_8h" name="optional.h" local="yes" import="no" module="no" objc="no">../types/optional.h</includes>
    <class kind="struct">rolly::version</class>
    <class kind="struct">fmt::formatter&lt; rolly::version &gt;</class>
    <namespace>rolly</namespace>
    <namespace>rolly::literals</namespace>
    <namespace>rolly::comparators</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_SEMVER_CONSTEXPR</name>
      <anchorfile>semver_8h.html</anchorfile>
      <anchor>a5f68fcfa657eb6fe30663458b8ed0634</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>version.h</name>
    <path>rolly/global/</path>
    <filename>version_8h.html</filename>
    <includes id="version__definitions_8h" name="version_definitions.h" local="yes" import="no" module="no" objc="no">version_definitions.h</includes>
    <includes id="semver_8h" name="semver.h" local="yes" import="no" module="no" objc="no">semver.h</includes>
    <class kind="class">rolly::meta::project_meta</class>
    <namespace>rolly</namespace>
    <namespace>rolly::meta</namespace>
  </compound>
  <compound kind="file">
    <name>version_definitions.h</name>
    <path>rolly/global/</path>
    <filename>version__definitions_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_MAJOR</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4c07a7f4f44a9eec2a3b92ebef8ad9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_MINOR</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabc35d3d52e0303eeb8c1405ee12476e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_PATCH</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga637777bfc47867a8af6831a84ba402e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_STRINGIFY2</name>
      <anchorfile>version__definitions_8h.html</anchorfile>
      <anchor>a71ceea7c778380afc96eb931d1474d19</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_STRINGIFY</name>
      <anchorfile>version__definitions_8h.html</anchorfile>
      <anchor>a3e6532e5c38f26d4c75ed57d53d0a287</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_STRING</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3aec6b852a182be7e4f678760707530a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filedevice.h</name>
    <path>rolly/io/</path>
    <filename>filedevice_8h.html</filename>
    <includes id="result_8h" name="result.h" local="yes" import="no" module="no" objc="no">../types/result.h</includes>
    <class kind="class">rolly::io::filedevice</class>
    <namespace>rolly</namespace>
    <namespace>rolly::io</namespace>
  </compound>
  <compound kind="file">
    <name>library.h</name>
    <path>rolly/</path>
    <filename>include_2rolly_2library_8h.html</filename>
    <includes id="export_8h" name="export.h" local="yes" import="no" module="no" objc="no">global/export.h</includes>
    <includes id="pimpl_8h" name="pimpl.h" local="yes" import="no" module="no" objc="no">traits/pimpl.h</includes>
    <includes id="result_8h" name="result.h" local="yes" import="no" module="no" objc="no">types/result.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" import="no" module="no" objc="no">utility.h</includes>
    <class kind="class">rolly::library</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>library.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/</path>
    <filename>src_2oslayer_2library_8h.html</filename>
    <includes id="base_8h" name="base.h" local="yes" import="no" module="no" objc="no">base.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::oslayer</namespace>
  </compound>
  <compound kind="file">
    <name>log.h</name>
    <path>rolly/</path>
    <filename>log_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">global/definitions.h</includes>
  </compound>
  <compound kind="file">
    <name>math.h</name>
    <path>rolly/</path>
    <filename>math_8h.html</filename>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">types/stdint.h</includes>
    <includes id="numbers_8h" name="numbers.h" local="yes" import="no" module="no" objc="no">numbers.h</includes>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>memory.h</name>
    <path>rolly/</path>
    <filename>memory_8h.html</filename>
    <includes id="box_8h" name="box.h" local="yes" import="no" module="no" objc="no">memory/box.h</includes>
    <includes id="deleter_8h" name="deleter.h" local="yes" import="no" module="no" objc="no">memory/deleter.h</includes>
    <includes id="observer__ptr_8h" name="observer_ptr.h" local="yes" import="no" module="no" objc="no">memory/observer_ptr.h</includes>
    <includes id="owner_8h" name="owner.h" local="yes" import="no" module="no" objc="no">memory/owner.h</includes>
    <includes id="propagate__const_8h" name="propagate_const.h" local="yes" import="no" module="no" objc="no">memory/propagate_const.h</includes>
  </compound>
  <compound kind="file">
    <name>box.h</name>
    <path>rolly/memory/</path>
    <filename>box_8h.html</filename>
    <includes id="contracts_8h" name="contracts.h" local="yes" import="no" module="no" objc="no">../contracts.h</includes>
    <includes id="noncopyable_8h" name="noncopyable.h" local="yes" import="no" module="no" objc="no">../traits/noncopyable.h</includes>
    <includes id="ptr_8h" name="ptr.h" local="yes" import="no" module="no" objc="no">../concepts/ptr.h</includes>
    <includes id="optional_8h" name="optional.h" local="yes" import="no" module="no" objc="no">../types/optional.h</includes>
    <class kind="class">rolly::box</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>deleter.h</name>
    <path>rolly/memory/</path>
    <filename>deleter_8h.html</filename>
    <class kind="struct">rolly::deleter</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>observer_ptr.h</name>
    <path>rolly/memory/</path>
    <filename>observer__ptr_8h.html</filename>
    <includes id="contracts_8h" name="contracts.h" local="yes" import="no" module="no" objc="no">../contracts.h</includes>
    <includes id="box_8h" name="box.h" local="yes" import="no" module="no" objc="no">box.h</includes>
    <class kind="class">rolly::observer_ptr</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>owner.h</name>
    <path>rolly/memory/</path>
    <filename>owner_8h.html</filename>
    <includes id="ptr_8h" name="ptr.h" local="yes" import="no" module="no" objc="no">../concepts/ptr.h</includes>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>propagate_const.h</name>
    <path>rolly/memory/</path>
    <filename>propagate__const_8h.html</filename>
    <includes id="ptr_8h" name="ptr.h" local="yes" import="no" module="no" objc="no">../concepts/ptr.h</includes>
    <class kind="class">rolly::propagate_const</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>net.h</name>
    <path>rolly/</path>
    <filename>net_8h.html</filename>
    <includes id="ip__address_8h" name="ip_address.h" local="yes" import="no" module="no" objc="no">net/ip_address.h</includes>
  </compound>
  <compound kind="file">
    <name>ip_address.h</name>
    <path>rolly/net/</path>
    <filename>ip__address_8h.html</filename>
    <namespace>rolly</namespace>
    <namespace>rolly::net</namespace>
    <namespace>rolly::literals</namespace>
  </compound>
  <compound kind="file">
    <name>numbers.h</name>
    <path>rolly/</path>
    <filename>numbers_8h.html</filename>
    <includes id="global_8h" name="global.h" local="yes" import="no" module="no" objc="no">global.h</includes>
    <includes id="num_8h" name="num.h" local="yes" import="no" module="no" objc="no">concepts/num.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::numbers</namespace>
  </compound>
  <compound kind="file">
    <name>qt.h</name>
    <path>rolly/</path>
    <filename>qt_8h.html</filename>
    <includes id="format_8h" name="format.h" local="yes" import="no" module="no" objc="no">qt/format.h</includes>
    <includes id="formatters_8h" name="formatters.h" local="yes" import="no" module="no" objc="no">qt/formatters.h</includes>
    <includes id="literals_8h" name="literals.h" local="yes" import="no" module="no" objc="no">qt/literals.h</includes>
    <includes id="qml_8h" name="qml.h" local="yes" import="no" module="no" objc="no">qt/qml.h</includes>
    <includes id="registrable_8h" name="registrable.h" local="yes" import="no" module="no" objc="no">qt/registrable.h</includes>
  </compound>
  <compound kind="file">
    <name>format.h</name>
    <path>rolly/qt/</path>
    <filename>format_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::qt</namespace>
  </compound>
  <compound kind="file">
    <name>formatters.h</name>
    <path>rolly/qt/</path>
    <filename>formatters_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <class kind="struct">fmt::formatter&lt; QString &gt;</class>
    <class kind="struct">fmt::formatter&lt; QByteArray &gt;</class>
    <class kind="struct">fmt::formatter&lt; QLatin1String &gt;</class>
    <class kind="struct">fmt::formatter&lt; QStringView &gt;</class>
    <class kind="struct">fmt::formatter&lt; QChar &gt;</class>
    <class kind="struct">fmt::formatter&lt; QPoint &gt;</class>
    <class kind="struct">fmt::formatter&lt; QPointF &gt;</class>
    <namespace>rolly</namespace>
    <namespace>rolly::qt</namespace>
    <namespace>fmt</namespace>
  </compound>
  <compound kind="file">
    <name>literals.h</name>
    <path>rolly/qt/</path>
    <filename>literals_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::literals</namespace>
  </compound>
  <compound kind="file">
    <name>qml.h</name>
    <path>rolly/qt/</path>
    <filename>qml_8h.html</filename>
    <includes id="formatters_8h" name="formatters.h" local="yes" import="no" module="no" objc="no">formatters.h</includes>
    <includes id="literals_8h" name="literals.h" local="yes" import="no" module="no" objc="no">literals.h</includes>
    <includes id="optional_8h" name="optional.h" local="yes" import="no" module="no" objc="no">../types/optional.h</includes>
    <includes id="registrable_8h" name="registrable.h" local="yes" import="no" module="no" objc="no">./registrable.h</includes>
    <class kind="class">rolly::qt::qml::module</class>
    <namespace>rolly</namespace>
    <namespace>rolly::qt</namespace>
    <namespace>rolly::qt::qml</namespace>
    <namespace>rolly::qt::qml::detail</namespace>
  </compound>
  <compound kind="file">
    <name>registrable.h</name>
    <path>rolly/qt/</path>
    <filename>registrable_8h.html</filename>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">../types/stdint.h</includes>
    <includes id="version_8h" name="version.h" local="yes" import="no" module="no" objc="no">../global/version.h</includes>
    <includes id="contracts_8h" name="contracts.h" local="yes" import="no" module="no" objc="no">../contracts.h</includes>
    <includes id="qt_2concepts_8h" name="concepts.h" local="yes" import="no" module="no" objc="no">./concepts.h</includes>
    <class kind="class">rolly::qt::qml::registrable</class>
    <namespace>rolly</namespace>
    <namespace>rolly::qt</namespace>
    <namespace>rolly::qt::qml</namespace>
  </compound>
  <compound kind="file">
    <name>rtti.h</name>
    <path>rolly/</path>
    <filename>rtti_8h.html</filename>
    <includes id="export_8h" name="export.h" local="yes" import="no" module="no" objc="no">global/export.h</includes>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">global/definitions.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::rtti</namespace>
  </compound>
  <compound kind="file">
    <name>savefile.h</name>
    <path>rolly/</path>
    <filename>savefile_8h.html</filename>
    <includes id="serialization_8h" name="serialization.h" local="yes" import="no" module="no" objc="no">serialization.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">types/stdint.h</includes>
    <includes id="filedevice_8h" name="filedevice.h" local="yes" import="no" module="no" objc="no">io/filedevice.h</includes>
    <class kind="class">rolly::savefile</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>serialization.h</name>
    <path>rolly/</path>
    <filename>serialization_8h.html</filename>
    <includes id="global_8h" name="global.h" local="yes" import="no" module="no" objc="no">global.h</includes>
    <includes id="type__traits_8h" name="type_traits.h" local="yes" import="no" module="no" objc="no">type_traits.h</includes>
    <includes id="rtti_8h" name="rtti.h" local="yes" import="no" module="no" objc="no">rtti.h</includes>
    <includes id="serialization__error_8h" name="serialization_error.h" local="yes" import="no" module="no" objc="no">exception/serialization_error.h</includes>
    <includes id="tags_8h" name="tags.h" local="yes" import="no" module="no" objc="no">serialization/tags.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::serialization</namespace>
    <concept>rolly::serialization::serializable</concept>
    <concept>rolly::serialization::deserializable</concept>
    <concept>rolly::serialization::serializable_and_deserializable</concept>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_SERIALIZABLE</name>
      <anchorfile>serialization_8h.html</anchorfile>
      <anchor>adaa16f0244b24aeb2882aa99db4c2b1c</anchor>
      <arglist>(T, F)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_SERIALIZABLE_EXPORT</name>
      <anchorfile>serialization_8h.html</anchorfile>
      <anchor>a87870310500db9bd0b641b729b55fdb3</anchor>
      <arglist>(T, F, EXPORT_MACRO)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_DESERIALIZABLE</name>
      <anchorfile>serialization_8h.html</anchorfile>
      <anchor>a45328292d81adebd33fb5a1ad0c7d0d3</anchor>
      <arglist>(T, F)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_DESERIALIZABLE_EXPORT</name>
      <anchorfile>serialization_8h.html</anchorfile>
      <anchor>ad034783d7387cf8886c38c439a22a6c2</anchor>
      <arglist>(T, F, EXPORT_MACRO)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tags.h</name>
    <path>rolly/serialization/</path>
    <filename>tags_8h.html</filename>
    <class kind="struct">rolly::serialization::format::json</class>
    <class kind="struct">rolly::serialization::format::bson</class>
    <class kind="struct">rolly::serialization::format::xml</class>
    <class kind="struct">rolly::serialization::format::cbor</class>
    <class kind="struct">rolly::serialization::format::flexbuffer</class>
    <class kind="struct">rolly::serialization::format::msgpack</class>
    <class kind="struct">rolly::serialization::format::toml</class>
    <class kind="struct">rolly::serialization::format::yaml</class>
    <class kind="struct">rolly::serialization::format::generic</class>
    <namespace>rolly</namespace>
    <namespace>rolly::serialization</namespace>
    <namespace>rolly::serialization::format</namespace>
  </compound>
  <compound kind="file">
    <name>source_location.h</name>
    <path>rolly/</path>
    <filename>source__location_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">global/definitions.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">types/stdint.h</includes>
    <class kind="struct">rolly::source_location</class>
    <class kind="struct">fmt::formatter&lt; rolly::source_location &gt;</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>string_util.h</name>
    <path>rolly/</path>
    <filename>string__util_8h.html</filename>
    <includes id="export_8h" name="export.h" local="yes" import="no" module="no" objc="no">global/export.h</includes>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>traits.h</name>
    <path>rolly/</path>
    <filename>traits_8h.html</filename>
    <includes id="noncopyable_8h" name="noncopyable.h" local="yes" import="no" module="no" objc="no">traits/noncopyable.h</includes>
    <includes id="nonmovable_8h" name="nonmovable.h" local="yes" import="no" module="no" objc="no">traits/nonmovable.h</includes>
    <includes id="pimpl_8h" name="pimpl.h" local="yes" import="no" module="no" objc="no">traits/pimpl.h</includes>
    <includes id="pin_8h" name="pin.h" local="yes" import="no" module="no" objc="no">traits/pin.h</includes>
    <includes id="singleton_8h" name="singleton.h" local="yes" import="no" module="no" objc="no">traits/singleton.h</includes>
  </compound>
  <compound kind="file">
    <name>noncopyable.h</name>
    <path>rolly/traits/</path>
    <filename>noncopyable_8h.html</filename>
    <class kind="struct">rolly::noncopyable</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>nonmovable.h</name>
    <path>rolly/traits/</path>
    <filename>nonmovable_8h.html</filename>
    <class kind="struct">rolly::nonmovable</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>pimpl.h</name>
    <path>rolly/traits/</path>
    <filename>pimpl_8h.html</filename>
    <includes id="propagate__const_8h" name="propagate_const.h" local="yes" import="no" module="no" objc="no">../memory/propagate_const.h</includes>
    <includes id="box_8h" name="box.h" local="yes" import="no" module="no" objc="no">../memory/box.h</includes>
    <namespace>rolly</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_PRIVATE</name>
      <anchorfile>pimpl_8h.html</anchorfile>
      <anchor>a9c6048a4c390e63349e43ea83ed07c12</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_PRIVATE_AS</name>
      <anchorfile>pimpl_8h.html</anchorfile>
      <anchor>a296a83a502b0aa9b389cdd3f0c3974c9</anchor>
      <arglist>(alias)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_PRIVATE_UNIQUE_PTR</name>
      <anchorfile>pimpl_8h.html</anchorfile>
      <anchor>a8b02a4582159e4f88159f7071a5a80e1</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_PRIVATE_UNIQUE_PTR_AS</name>
      <anchorfile>pimpl_8h.html</anchorfile>
      <anchor>a989674862ba11b1d2a878fc77e87e071</anchor>
      <arglist>(alias)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pin.h</name>
    <path>rolly/traits/</path>
    <filename>pin_8h.html</filename>
    <includes id="noncopyable_8h" name="noncopyable.h" local="yes" import="no" module="no" objc="no">noncopyable.h</includes>
    <includes id="nonmovable_8h" name="nonmovable.h" local="yes" import="no" module="no" objc="no">nonmovable.h</includes>
    <class kind="struct">rolly::pin</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>singleton.h</name>
    <path>rolly/traits/</path>
    <filename>singleton_8h.html</filename>
    <includes id="pin_8h" name="pin.h" local="yes" import="no" module="no" objc="no">pin.h</includes>
    <class kind="struct">rolly::singleton</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>type_traits.h</name>
    <path>rolly/</path>
    <filename>type__traits_8h.html</filename>
    <class kind="struct">rolly::remove_cvref</class>
    <class kind="struct">rolly::plain_type</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>rolly/</path>
    <filename>types_8h.html</filename>
    <includes id="angle_8h" name="angle.h" local="yes" import="no" module="no" objc="no">types/angle.h</includes>
    <includes id="fixed__string_8h" name="fixed_string.h" local="yes" import="no" module="no" objc="no">types/fixed_string.h</includes>
    <includes id="point2d_8h" name="point2d.h" local="yes" import="no" module="no" objc="no">types/point2d.h</includes>
  </compound>
  <compound kind="file">
    <name>angle.h</name>
    <path>rolly/types/</path>
    <filename>angle_8h.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">../math.h</includes>
    <includes id="contracts_8h" name="contracts.h" local="yes" import="no" module="no" objc="no">../contracts.h</includes>
    <includes id="num_8h" name="num.h" local="yes" import="no" module="no" objc="no">../concepts/num.h</includes>
    <class kind="struct">rolly::angle</class>
    <class kind="struct">fmt::formatter&lt; rolly::angle&lt; T &gt; &gt;</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>char_reader.h</name>
    <path>rolly/types/detail/</path>
    <filename>char__reader_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../../global/definitions.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">../stdint.h</includes>
    <class kind="struct">rolly::detail::char_or_throw</class>
    <class kind="struct">rolly::detail::symbol</class>
    <class kind="struct">rolly::detail::utf8_reader</class>
    <class kind="struct">rolly::detail::utf16_reader</class>
    <class kind="struct">rolly::detail::utf32_reader</class>
    <class kind="struct">rolly::detail::char_reader&lt; char &gt;</class>
    <class kind="struct">rolly::detail::char_reader&lt; wchar_t &gt;</class>
    <class kind="struct">rolly::detail::char_reader&lt; char8_t &gt;</class>
    <class kind="struct">rolly::detail::char_reader&lt; char16_t &gt;</class>
    <class kind="struct">rolly::detail::char_reader&lt; char32_t &gt;</class>
    <namespace>rolly</namespace>
    <namespace>rolly::detail</namespace>
  </compound>
  <compound kind="file">
    <name>fixed_string.h</name>
    <path>rolly/types/</path>
    <filename>fixed__string_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">./stdint.h</includes>
    <includes id="char__reader_8h" name="char_reader.h" local="yes" import="no" module="no" objc="no">detail/char_reader.h</includes>
    <class kind="struct">rolly::fixed_string</class>
    <class kind="struct">rolly::fixed_string&lt; 0 &gt;</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>guid.h</name>
    <path>rolly/types/</path>
    <filename>include_2rolly_2types_2guid_8h.html</filename>
    <includes id="global_8h" name="global.h" local="yes" import="no" module="no" objc="no">../global.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">./stdint.h</includes>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">rolly/global/definitions.h</includes>
    <class kind="class">rolly::guid</class>
    <class kind="struct">fmt::formatter&lt; rolly::guid &gt;</class>
    <namespace>rolly</namespace>
    <namespace>rolly::literals</namespace>
  </compound>
  <compound kind="file">
    <name>guid.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/android/</path>
    <filename>src_2oslayer_2android_2guid_8h.html</filename>
    <includes id="platform__definitions_8h" name="platform_definitions.h" local="no" import="no" module="no" objc="no">rolly/global/platform_definitions.h</includes>
    <class kind="struct">rolly::oslayer::android::guid_info</class>
    <namespace>rolly</namespace>
    <namespace>rolly::oslayer</namespace>
    <namespace>rolly::oslayer::android</namespace>
  </compound>
  <compound kind="file">
    <name>optional.h</name>
    <path>rolly/types/</path>
    <filename>optional_8h.html</filename>
    <class kind="struct">rolly::nullopt_t</class>
    <class kind="struct">rolly::nullopt_t::do_not_use</class>
    <class kind="class">rolly::bad_optional_access</class>
    <class kind="class">rolly::optional</class>
    <class kind="class">rolly::optional&lt; T &amp; &gt;</class>
    <namespace>rolly</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_IS_TRIVIALLY_COPY_CONSTRUCTIBLE</name>
      <anchorfile>optional_8h.html</anchorfile>
      <anchor>aaa63d17874c7d1b6b715183d21c2be35</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_IS_TRIVIALLY_COPY_ASSIGNABLE</name>
      <anchorfile>optional_8h.html</anchorfile>
      <anchor>a7f33879e981f40bb99f40d8d41701aab</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_IS_TRIVIALLY_DESTRUCTIBLE</name>
      <anchorfile>optional_8h.html</anchorfile>
      <anchor>a09d77a005b8205210f42a7889f854520</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_CXX14</name>
      <anchorfile>optional_8h.html</anchorfile>
      <anchor>aa6df093fd65e6233d8251464e0ed86d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_OPTIONAL_11_CONSTEXPR</name>
      <anchorfile>optional_8h.html</anchorfile>
      <anchor>a871c57934f04050d51dc9f568870b63f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>point2d.h</name>
    <path>rolly/types/</path>
    <filename>point2d_8h.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">../math.h</includes>
    <includes id="num_8h" name="num.h" local="yes" import="no" module="no" objc="no">../concepts/num.h</includes>
    <includes id="any__of_8h" name="any_of.h" local="yes" import="no" module="no" objc="no">../concepts/any_of.h</includes>
    <includes id="size2d_8h" name="size2d.h" local="yes" import="no" module="no" objc="no">./size2d.h</includes>
    <includes id="vector2d_8h" name="vector2d.h" local="yes" import="no" module="no" objc="no">./vector2d.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">./stdint.h</includes>
    <class kind="class">rolly::point2d</class>
    <class kind="struct">fmt::formatter&lt; rolly::point2d&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; rolly::point2d&lt; T &gt; &gt;</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>result.h</name>
    <path>rolly/types/</path>
    <filename>result_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <includes id="contracts_8h" name="contracts.h" local="yes" import="no" module="no" objc="no">../contracts.h</includes>
    <includes id="optional_8h" name="optional.h" local="yes" import="no" module="no" objc="no">optional.h</includes>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>size2d.h</name>
    <path>rolly/types/</path>
    <filename>size2d_8h.html</filename>
    <includes id="num_8h" name="num.h" local="yes" import="no" module="no" objc="no">../concepts/num.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">./stdint.h</includes>
    <class kind="struct">rolly::size2d</class>
    <class kind="struct">fmt::formatter&lt; rolly::size2d&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; rolly::size2d&lt; T &gt; &gt;</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>stdint.h</name>
    <path>rolly/types/</path>
    <filename>stdint_8h.html</filename>
    <namespace>rolly</namespace>
    <namespace>rolly::literals</namespace>
  </compound>
  <compound kind="file">
    <name>u128.h</name>
    <path>rolly/types/</path>
    <filename>u128_8h.html</filename>
    <includes id="bit_8h" name="bit.h" local="yes" import="no" module="no" objc="no">../bit.h</includes>
    <includes id="definitions_8h" name="definitions.h" local="yes" import="no" module="no" objc="no">../global/definitions.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">./stdint.h</includes>
    <includes id="optional_8h" name="optional.h" local="yes" import="no" module="no" objc="no">./optional.h</includes>
    <includes id="char__reader_8h" name="char_reader.h" local="yes" import="no" module="no" objc="no">detail/char_reader.h</includes>
    <class kind="class">rolly::u128</class>
    <class kind="struct">std::hash&lt; rolly::u128 &gt;</class>
    <class kind="struct">fmt::formatter&lt; rolly::u128 &gt;</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>vector2d.h</name>
    <path>rolly/types/</path>
    <filename>vector2d_8h.html</filename>
    <includes id="num_8h" name="num.h" local="yes" import="no" module="no" objc="no">../concepts/num.h</includes>
    <includes id="any__of_8h" name="any_of.h" local="yes" import="no" module="no" objc="no">../concepts/any_of.h</includes>
    <includes id="size2d_8h" name="size2d.h" local="yes" import="no" module="no" objc="no">./size2d.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">./stdint.h</includes>
    <includes id="angle_8h" name="angle.h" local="yes" import="no" module="no" objc="no">./angle.h</includes>
    <class kind="struct">rolly::vector2d</class>
    <class kind="struct">fmt::formatter&lt; rolly::vector2d&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; rolly::vector2d&lt; T &gt; &gt;</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>velocity.h</name>
    <path>rolly/types/</path>
    <filename>velocity_8h.html</filename>
    <includes id="math_8h" name="math.h" local="yes" import="no" module="no" objc="no">../math.h</includes>
    <includes id="contracts_8h" name="contracts.h" local="yes" import="no" module="no" objc="no">../contracts.h</includes>
    <includes id="num_8h" name="num.h" local="yes" import="no" module="no" objc="no">../concepts/num.h</includes>
    <includes id="stdint_8h" name="stdint.h" local="yes" import="no" module="no" objc="no">./stdint.h</includes>
    <class kind="struct">rolly::velocity</class>
    <class kind="struct">fmt::formatter&lt; rolly::velocity&lt; T &gt; &gt;</class>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>utility.h</name>
    <path>rolly/</path>
    <filename>utility_8h.html</filename>
    <includes id="enum_8h" name="enum.h" local="yes" import="no" module="no" objc="no">concepts/enum.h</includes>
    <namespace>rolly</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_ENUM_FLAG</name>
      <anchorfile>utility_8h.html</anchorfile>
      <anchor>af4570514ccc442468408666c070ab793</anchor>
      <arglist>(E)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>base.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/</path>
    <filename>base_8h.html</filename>
    <includes id="definitions_8h" name="definitions.h" local="no" import="no" module="no" objc="no">rolly/global/definitions.h</includes>
    <includes id="platform__definitions_8h" name="platform_definitions.h" local="no" import="no" module="no" objc="no">rolly/global/platform_definitions.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::oslayer</namespace>
    <member kind="define">
      <type>#define</type>
      <name>___os___</name>
      <anchorfile>base_8h.html</anchorfile>
      <anchor>a092e42f33c0bac70710d0faae1e2af8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dlfcn.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/</path>
    <filename>dlfcn_8h.html</filename>
    <includes id="platform__definitions_8h" name="platform_definitions.h" local="no" import="no" module="no" objc="no">rolly/global/platform_definitions.h</includes>
    <includes id="dlfcn_8h" name="dlfcn.h" local="no" import="no" module="no" objc="no">dlfcn.h</includes>
  </compound>
  <compound kind="file">
    <name>dirs.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/linux/</path>
    <filename>dirs_8h.html</filename>
    <includes id="base_8h" name="base.h" local="yes" import="no" module="no" objc="no">../base.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::oslayer</namespace>
    <namespace>rolly::oslayer::linux</namespace>
  </compound>
  <compound kind="file">
    <name>dlfcn_win32.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/win/</path>
    <filename>dlfcn__win32_8h.html</filename>
    <class kind="struct">dl_info</class>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_NOW</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a98a6517467cf7d1dd27d6c6dce78a6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_LAZY</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a5c83709ee3bd7d316f8f47e122f3be20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_GLOBAL</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>ace65454279c135fe5e6168d456c31263</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_LOCAL</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a233010260f7e61c5dab09e2bca10a590</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_DEFAULT</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a58d13c5dcabbb85848fa97b446086247</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTLD_NEXT</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a51d4212b17b1edeb2fc5a48c7c497267</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct dl_info</type>
      <name>Dl_info</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a4c034644624b5d5d171e7cf51ec256cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>dlopen</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a005293776e928f3fc39d132d28f97c74</anchor>
      <arglist>(char const *file, int mode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dlclose</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>af483b6c4400965aa885f9f1a144138a5</anchor>
      <arglist>(void *handle)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>dlsym</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a4d5ab576e4cc592e636fb5416eeda016</anchor>
      <arglist>(void *handle, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>dlerror</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a2bbbe680edd6e3918311f5dbf33b3996</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dladdr</name>
      <anchorfile>dlfcn__win32_8h.html</anchorfile>
      <anchor>a5a8079fe575d5a5bc52fa631b26faeca</anchor>
      <arglist>(void const *addr, Dl_info *info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>known_folder.h</name>
    <path>/home/runner/work/rolly/rolly/src/oslayer/win/</path>
    <filename>known__folder_8h.html</filename>
    <includes id="base_8h" name="base.h" local="yes" import="no" module="no" objc="no">../base.h</includes>
    <namespace>rolly</namespace>
    <namespace>rolly::oslayer</namespace>
    <namespace>rolly::oslayer::win</namespace>
  </compound>
  <compound kind="struct">
    <name>rolly::angle</name>
    <filename>structrolly_1_1angle.html</filename>
    <templarg>concepts::num T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>aec7b848c5a8625409f9b9e0b5d4c41f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>aa2518cb5cba55bcf0c8a49678a753c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a031878b48e011c7b0c8c102742c5a5c5</anchor>
      <arglist>(number_type const value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~angle</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a3a4f73ade57a63ffe68a6524a7fa3370</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a824016237791f783eb183593a37f2e86</anchor>
      <arglist>(angle const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>ad0a923e9985abd7a7bcdc3b927317f12</anchor>
      <arglist>(angle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>ae80c300c05609591447d1683feec06b3</anchor>
      <arglist>(angle const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>aabb72c4891526e01183163b12187fe4a</anchor>
      <arglist>(angle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>ae551913a914bc48948d63dd97cf48936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>in</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a022bec6817fd90bff302f32a167306b0</anchor>
      <arglist>(angle_unit u) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>radians</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>ae7ffbe15601f492e872add7bcc37b8aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>degrees</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a9797955f849c462aa393cc18f252d0c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>positive</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a9e26105429fdbc4309d590994120e2fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>signed_</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>ac2d91e7a996a86e86b1ca2263efd7f7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>angle_to</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a0b8cdfd62687c1819a37bdd2e60b90de</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>angle</type>
      <name>lerp</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a8f55b21aea943f80e505e4e9948713a5</anchor>
      <arglist>(angle const &amp;other, T t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; T, T &gt;</type>
      <name>sin_cos</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a81ad17c93b6d598074a66a6200e3cc4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle&lt; U &gt;</type>
      <name>cast</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a37d4b9669051264b66079ab79e8a7523</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>value</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a9eb56c012f0da4e949ed8bd1604f2405</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr U</type>
      <name>as</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>addeccb43dd0eee8781432706834854e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f32</type>
      <name>as_f32</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>aa7f3fe2b2c77c26929e758f4defa66e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f64</type>
      <name>as_f64</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>af07b4fdd32ef2bca183d1ee273ac0046</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a2d9e5beecc2f5d76a9b1a3b8c1c5b46d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>sin</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a76ce71d93b1ba19c55e0029b3a521ffd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>cos</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>af575bb24ebfd4d8f665a4b9ae6bef70f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>tan</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a0e640f0cb2a94a2b87e694df0b527aef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>asin</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a8631ea2c486fd52354b190db9eac54bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>acos</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a544127c4b741a644eb6b82a020bc9c79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>atan</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a25b8a092ad0e01a4f49ce68e25d9ccf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a386dd1d39e904ff81ef7368cdcbb78d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a72d0ae8d67d2fa5179633684c89b1aaa</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>adf955bec7d8a8a72b8aefa0935bb12b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a88bac2deb6b6c726aaf6a97dcc2c818c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a4b9865b9a1a33aece957fc04d3e5d3dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator number_type</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a1ba273cd6a91e07551108b1734cf8441</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>aae129155cb32af4f41e233a7d19eff46</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a930d23fbdb1ddfc391c14c54a0356ca0</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a8ec32889d2c8ce4ed5dc164ccca7163a</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>aaf2a83a3a2bca032874f368a8a5d6169</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a218ff10c0a10f42ec81d552060892e4e</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>ae2b2bb6774dd2c6663b0a1bafc5c4697</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a4eb55a18e003baa5f94e3b8550c374a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a6d3e1d5fe0bba6c72f2eae5aadeb6140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>ab2ffcb479d3262b146326c6f330a25a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>abf8ea5656dd8a2319d15f39165e99f3c</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>aaaa885097baf487ef6e987b0ff377acf</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>ab74674eeca76107b4c425c68368a2302</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>ab194e90b0141a61238518a3b6c40dffd</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>aef11183aeb4df6454b6184e5a6796d0a</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a2cd5d7e6f1e9ab3ba0f0fe090519410e</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a1b9f72ed41cb4483fbb2f9462203558f</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a44390ca639aaa374a9bbcccc09690033</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a852be71041828b2cdcde339163908acd</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a037f122544a842f383fc635dbd43c3d4</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a544913ec49eb052cf0a800b6a1bbefaf</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>ad2cc7fbde4bf978534c27856db7f3fd5</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a74ed0e3dd5a76f336e6c4b066ae7573e</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a67cd88a054b044fad66cee4097d3db95</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a7f6128ce66f99e7dcfa73a35c08f13fe</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>abaa27045b8da9ddf01c137369c371f2e</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>from_radians</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a7e2ae21b8f0bf6033b1e471b0b2345f2</anchor>
      <arglist>(number_type radians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>from_degrees</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a1881bc03c3013a57a3a33dd12a992322</anchor>
      <arglist>(number_type degrees)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>from</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>acc5d5a437d9baf3529494424cdbd8dea</anchor>
      <arglist>(number_type value, angle_unit u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>zero</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a970938aedefd64d8d95bf3ec59f4e797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>pi</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a39900d5f7f6c42fdc873df42099edb9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>two_pi</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>acea7c62966da35df5f35ac345f8d4875</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>half_pi</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>af8c2f33682b257e05e32e9849376bfb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>third_pi</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a7b4864409403672af6c5d814fadfca64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>quarter_pi</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a7c2195043391c6c3dc614cf0c30388d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structrolly_1_1angle.html</anchorfile>
      <anchor>a478b39b84b04ee9c7dd3e21edce24c27</anchor>
      <arglist>(std::ostream &amp;os, angle const &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::application_dirs</name>
    <filename>classrolly_1_1application__dirs.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>ac5a84dda85a232ef5feff02e6a678df2</anchor>
      <arglist></arglist>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="ac5a84dda85a232ef5feff02e6a678df2a0fea6a13c52b4d4725368f24b045ca84">cache</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="ac5a84dda85a232ef5feff02e6a678df2a2245023265ae4cf87d02c8b6ba991139">config</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="ac5a84dda85a232ef5feff02e6a678df2a63e5ccc32239b155c8691da2de09d8f1">config_local</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="ac5a84dda85a232ef5feff02e6a678df2a8d777f385d3dfec8815d20f7496026dc">data</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="ac5a84dda85a232ef5feff02e6a678df2a109d0fabf7fadeb851631940a8ce6e34">data_local</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="ac5a84dda85a232ef5feff02e6a678df2a1ce027fe3518cc64ef3570b50a9a7c10">preferences</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="ac5a84dda85a232ef5feff02e6a678df2ab4a619251c5c397f26d05c9b0e7bf97a">runtime</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="ac5a84dda85a232ef5feff02e6a678df2a9ed39e2ea931586b6a985a6942ef573e">state</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>application_dirs</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>abe0c247d713d25340cd33837603ec6e3</anchor>
      <arglist>(std::string_view qualifier, std::string_view vendor, std::string_view app)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>application_dirs</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>abd9ab6aa45b9db12acb4f10c7eafa41a</anchor>
      <arglist>(meta::project_meta const &amp;meta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a4895b831de642c6e7da124dfd26a0069</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a3f911786f258db947ee891bf6bea4f82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>get</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a1675ec62c79923261fa2100028189b2f</anchor>
      <arglist>(dir d) const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>operator[]</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>ae31253b843d8b93c3bdb58fe947a3568</anchor>
      <arglist>(dir d) const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>project_path</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>ab692009e91f9ca7946c04e0e454ab592</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>cache_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>ad9d523b6333b3f7031e4a023d739878b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>config_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a4cab5fbe7a35d3ea5cd5f1e9e8a145f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>config_local_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a0cfea1abb8b39337758d5b14c262771a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>data_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a668aba9ea3c31ba7187bd02cc1a0d8a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>data_local_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a9ba4bebc5e72a830d438a7be762f3403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>preference_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a64972d2bdd66fbc1d34faf114cf1a383</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::filesystem::path &gt; const &amp;</type>
      <name>runtime_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a36165752f2232bb5508394e11f68de94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::filesystem::path &gt; const &amp;</type>
      <name>state_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a0c63c7859499e7e22e5c5990a5727afd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::bad_optional_access</name>
    <filename>classrolly_1_1bad__optional__access.html</filename>
    <base>std::exception</base>
    <member kind="function">
      <type></type>
      <name>bad_optional_access</name>
      <anchorfile>classrolly_1_1bad__optional__access.html</anchorfile>
      <anchor>abbf44f45584bc1db3e8aebabdc903c46</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>what</name>
      <anchorfile>classrolly_1_1bad__optional__access.html</anchorfile>
      <anchor>aa01a0a7b69b2a6042ce909eed708bbf0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::box</name>
    <filename>classrolly_1_1box.html</filename>
    <templarg>typename T</templarg>
    <base protection="private">rolly::noncopyable</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>acd6bbec9838af2f3f93f0f80041cf064</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a4bf2c8d735b04e99c4af10a6a4748914</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>box</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a82cfe3a79833eac8da42691512308838</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~box</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a5a217f62519a7207ef80a38be9f20632</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>box</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>aaf75334407c98cbebb5c8664b8dc2a7d</anchor>
      <arglist>(box &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>box</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a62ec5a7124fe52e2d31ebbd441fca818</anchor>
      <arglist>(box&lt; U &gt; &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>box&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a16e2d6be38e5f5e5404f7669575fbd1f</anchor>
      <arglist>(box&lt; U &gt; &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a326da07902fd5bf53982c333d43e5ed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a3eea13c8d9915c832e40d91ed461c01c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ptr_mut</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a1c8f2bf10f7777419c388caf37fe5308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T const *</type>
      <name>ptr</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a5cc9bb1dc9d5a8b95af6ba343bc294cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>ref_mut</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>af2b940a009069a04fe8bb4c6660b39bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>ref</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>af4c7a16ed47c1be1d0dba9250d69cb1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>aed8ab617fe39c426a89041b8f6dccb82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a0df2be5901f96066b49cac49911e8554</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>ae2de626f9299104436c9c8a7ed01db10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a400b625af7b300c12fd80c0c2e3364ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt; &amp;</type>
      <name>as_unique_ptr</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a34c25e427e083a68780d0a701b3c817f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt; const &amp;</type>
      <name>as_unique_ptr</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>ad33d09f72e1f4b9f93f6e28ccdf89f0a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>leak</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>aaf556e7e36459659071a12eff6c432dd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; U &amp; &gt;</type>
      <name>downcast</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>ae0063de393520dbeb26dc2d21aacc0b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>as</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>af5b734c09d62d5509ef601895e19f34e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>U const *</type>
      <name>as</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>ac8f46ad35f7349d01d802dc7a4005ce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a025397721de27d403bf4d207aae1be19</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static box&lt; T &gt;</type>
      <name>make</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>ae0c0fb271a5497e7865fb6c91cb4b562</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static box&lt; T &gt;</type>
      <name>make</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>afb0848d642c88f14c3925151ab1c6cd7</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; ptr) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>box&lt; T &gt;</type>
      <name>make_box</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a3760e8162b1f9666221102a3c86866e9</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>ab5c7852b2e49020a194a3a07be285b9e</anchor>
      <arglist>(box&lt; T1 &gt; const &amp;a, box&lt; T2 &gt; const &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::bson</name>
    <filename>structrolly_1_1serialization_1_1format_1_1bson.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::cbor</name>
    <filename>structrolly_1_1serialization_1_1format_1_1cbor.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::char_or_throw</name>
    <filename>structrolly_1_1detail_1_1char__or__throw.html</filename>
    <templarg>typename T</templarg>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>af996afa7a9cf86e704b522e3c0e07f36</anchor>
      <arglist>(T const *&amp;it, T const *begin, T const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a50745bf121113a0d452a7d2ca8b7d53c</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::char_reader</name>
    <filename>structrolly_1_1detail_1_1char__reader.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::char_reader&lt; char &gt;</name>
    <filename>structrolly_1_1detail_1_1char__reader_3_01char_01_4.html</filename>
    <base>utf8_reader&lt; char &gt;</base>
    <base>char_or_throw&lt; char &gt;</base>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1char__reader_3_01char_01_4.html</anchorfile>
      <anchor>a8fd232c1974e1c9fd1bb23943b5c530a</anchor>
      <arglist>(char const *&amp;it, char const *end, bool &amp;error, u32 &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf8_next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>a4eb15b20269e7952f374397fc59776ab</anchor>
      <arglist>(char const *&amp;it, char const *end, bool &amp;error, u32 &amp;error_symbol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf8_code_point</name>
      <anchorfile>structrolly_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>ae71c3c03ac99df70ccf5342d670e65ab</anchor>
      <arglist>(uint8_t byte, bool &amp;correct) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr u32</type>
      <name>trailing_utf8_code_point</name>
      <anchorfile>structrolly_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>aa12171b672ea0528fedf33e4fdfc4906</anchor>
      <arglist>(char const *&amp;it, char const *end, bool &amp;correct) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>af996afa7a9cf86e704b522e3c0e07f36</anchor>
      <arglist>(char const *&amp;it, char const *begin, char const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a50745bf121113a0d452a7d2ca8b7d53c</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::char_reader&lt; char16_t &gt;</name>
    <filename>structrolly_1_1detail_1_1char__reader_3_01char16__t_01_4.html</filename>
    <base>utf16_reader&lt; char16_t &gt;</base>
    <base>char_or_throw&lt; char16_t &gt;</base>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1char__reader_3_01char16__t_01_4.html</anchorfile>
      <anchor>ae126033e44c837fe3fdcac0c1a0aeb48</anchor>
      <arglist>(char16_t const *&amp;it, char16_t const *end, bool &amp;error, u32 &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf16_next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>a49339e1e3b8bf16f147ef26be03127c4</anchor>
      <arglist>(char16_t const *&amp;it, char16_t const *end, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf16_code_point</name>
      <anchorfile>structrolly_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>aba6ac2e9ef09ac43ef510ae45955d105</anchor>
      <arglist>(uint16_t value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>af996afa7a9cf86e704b522e3c0e07f36</anchor>
      <arglist>(char16_t const *&amp;it, char16_t const *begin, char16_t const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a50745bf121113a0d452a7d2ca8b7d53c</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::char_reader&lt; char32_t &gt;</name>
    <filename>structrolly_1_1detail_1_1char__reader_3_01char32__t_01_4.html</filename>
    <base>utf32_reader&lt; char32_t &gt;</base>
    <base>char_or_throw&lt; char32_t &gt;</base>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1char__reader_3_01char32__t_01_4.html</anchorfile>
      <anchor>a3fd85fc406982f8183e3efcf1ff2737d</anchor>
      <arglist>(char32_t const *&amp;it, char32_t const *end, bool &amp;error, u32 &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf32_next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1utf32__reader.html</anchorfile>
      <anchor>a1ddec526755b94f39e3025df4a87520c</anchor>
      <arglist>(char32_t const *&amp;it, char32_t const *, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>af996afa7a9cf86e704b522e3c0e07f36</anchor>
      <arglist>(char32_t const *&amp;it, char32_t const *begin, char32_t const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a50745bf121113a0d452a7d2ca8b7d53c</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::char_reader&lt; char8_t &gt;</name>
    <filename>structrolly_1_1detail_1_1char__reader_3_01char8__t_01_4.html</filename>
    <base>utf8_reader&lt; char8_t &gt;</base>
    <base>char_or_throw&lt; char8_t &gt;</base>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1char__reader_3_01char8__t_01_4.html</anchorfile>
      <anchor>a912f595be2d85cf8bb9c0e05539a986e</anchor>
      <arglist>(char8_t const *&amp;it, char8_t const *end, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf8_next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>a4eb15b20269e7952f374397fc59776ab</anchor>
      <arglist>(char8_t const *&amp;it, char8_t const *end, bool &amp;error, u32 &amp;error_symbol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf8_code_point</name>
      <anchorfile>structrolly_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>ae71c3c03ac99df70ccf5342d670e65ab</anchor>
      <arglist>(uint8_t byte, bool &amp;correct) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr u32</type>
      <name>trailing_utf8_code_point</name>
      <anchorfile>structrolly_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>aa12171b672ea0528fedf33e4fdfc4906</anchor>
      <arglist>(char8_t const *&amp;it, char8_t const *end, bool &amp;correct) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>af996afa7a9cf86e704b522e3c0e07f36</anchor>
      <arglist>(char8_t const *&amp;it, char8_t const *begin, char8_t const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a50745bf121113a0d452a7d2ca8b7d53c</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::char_reader&lt; wchar_t &gt;</name>
    <filename>structrolly_1_1detail_1_1char__reader_3_01wchar__t_01_4.html</filename>
    <base>utf16_reader&lt; wchar_t &gt;</base>
    <base>utf32_reader&lt; wchar_t &gt;</base>
    <base>char_or_throw&lt; wchar_t &gt;</base>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1char__reader_3_01wchar__t_01_4.html</anchorfile>
      <anchor>a28388656b1777cc89dde95045f903c03</anchor>
      <arglist>(wchar_t const *&amp;it, wchar_t const *end, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf16_next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>a49339e1e3b8bf16f147ef26be03127c4</anchor>
      <arglist>(wchar_t const *&amp;it, wchar_t const *end, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf16_code_point</name>
      <anchorfile>structrolly_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>aba6ac2e9ef09ac43ef510ae45955d105</anchor>
      <arglist>(uint16_t value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf32_next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1utf32__reader.html</anchorfile>
      <anchor>a1ddec526755b94f39e3025df4a87520c</anchor>
      <arglist>(wchar_t const *&amp;it, wchar_t const *, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>next</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>af996afa7a9cf86e704b522e3c0e07f36</anchor>
      <arglist>(wchar_t const *&amp;it, wchar_t const *begin, wchar_t const *end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr void</type>
      <name>has_throw</name>
      <anchorfile>structrolly_1_1detail_1_1char__or__throw.html</anchorfile>
      <anchor>a50745bf121113a0d452a7d2ca8b7d53c</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::compile_time_error</name>
    <filename>classrolly_1_1compile__time__error.html</filename>
    <base>std::exception</base>
    <member kind="function">
      <type></type>
      <name>compile_time_error</name>
      <anchorfile>classrolly_1_1compile__time__error.html</anchorfile>
      <anchor>a8356d3664fe5adb4f17becb69ba939b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compile_time_error</name>
      <anchorfile>classrolly_1_1compile__time__error.html</anchorfile>
      <anchor>a50ffd09c71d2040741249d03bdeaa163</anchor>
      <arglist>(std::string_view message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compile_time_error</name>
      <anchorfile>classrolly_1_1compile__time__error.html</anchorfile>
      <anchor>a24d83cdaf4993733d3c2a9629e2b408b</anchor>
      <arglist>(std::string_view message, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~compile_time_error</name>
      <anchorfile>classrolly_1_1compile__time__error.html</anchorfile>
      <anchor>a51554e8744af5df5a9a464dc36381236</anchor>
      <arglist>() noexcept override=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compile_time_error</name>
      <anchorfile>classrolly_1_1compile__time__error.html</anchorfile>
      <anchor>a4258db7a49f6425e0fa701bd249b58d7</anchor>
      <arglist>(compile_time_error const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compile_time_error</name>
      <anchorfile>classrolly_1_1compile__time__error.html</anchorfile>
      <anchor>ae762e564d83cd1b64e8aa920f787a021</anchor>
      <arglist>(compile_time_error &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>compile_time_error &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1compile__time__error.html</anchorfile>
      <anchor>a10bb614543cf15a4f156408b63d6f7a7</anchor>
      <arglist>(compile_time_error const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>compile_time_error &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1compile__time__error.html</anchorfile>
      <anchor>ab1af88a312eba896749960e0bcf6fa91</anchor>
      <arglist>(compile_time_error &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>what</name>
      <anchorfile>classrolly_1_1compile__time__error.html</anchorfile>
      <anchor>a08d7ba2433c39abe99096e38f455c96d</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::configuration_file</name>
    <filename>classrolly_1_1configuration__file.html</filename>
    <templarg>typename F</templarg>
    <templarg>typename T</templarg>
    <base>rolly::io::filedevice</base>
    <member kind="function">
      <type></type>
      <name>configuration_file</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a19a15c9f2c4ac90f4421c93b648d4085</anchor>
      <arglist>(std::filesystem::path path, saving_policy policy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>configuration_file</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a3b5960873047c95dc4e42785699dde5a</anchor>
      <arglist>(std::string_view filename, std::filesystem::path const &amp;folder, saving_policy policy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>configuration_file</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>ab13d7acf67d31b8051f3d5ec27bbfa02</anchor>
      <arglist>(configuration_file const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>configuration_file</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a92500eb06f06b5e8d60e865d46d84b87</anchor>
      <arglist>(configuration_file &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~configuration_file</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>ab4ea1dd62c5890895b7851dbf9e98c60</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a3c8db1974b296d2df4145f7e6b413ce4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>enum saving_policy</type>
      <name>saving_policy</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a8e5a946e465634705983df8314d84bff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>values</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a3f5f7be4b2a9cc13a26023a7b460bac0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>values_mut</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a82a2f6520341d7fbaeaca0378fc61890</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>default_values</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>ac9937c8175a947b2770942032039341e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>default_values_mut</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>abe88780509c782a13e0f3b824e74f3d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a86f4503b3c0f77b69d6413098b86703f</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>aa477e6a2bd1df01807ea6d6db1f52d90</anchor>
      <arglist>() const noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revert_to_default</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a19379feeae3fbf9e2637d75b58863417</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a1459b4dfa15246feb0414ad6ff21c6a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>operator()</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a63d32d824a1f4355ce8722397d193f01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>afa7705b9f09e7e442651fe55f837dcf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>configuration_file &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>adde973ff3a9da98d536e34b13bbf828b</anchor>
      <arglist>(configuration_file const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>configuration_file &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a6e1cb7362884eb0cbe085751616a0f54</anchor>
      <arglist>(configuration_file &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>path</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ab6b9a3676acab419138bbca59f4a777f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>suffixed_path</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>af6dcc07e9f5281abdade568ce7ab8205</anchor>
      <arglist>(std::string_view suffix) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a2e96520de8f987916ee5a3c7a141f1d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_regular_file</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a07be68ea9ba88479fa902c5899ad2d67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a28ddc790f54e853b15755ac811ad6be6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result&lt; std::string &gt;</type>
      <name>try_read</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>abccd939bbde9e887123ec875727af2c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a4b17c887159d7176978bee956f586505</anchor>
      <arglist>(std::string_view content) const noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>try_write</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ac57ad0eda7cfe2ff74297d546734d7fb</anchor>
      <arglist>(std::string_view content) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>read_from</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a00fc91de2b013833a613e88dcb68bd10</anchor>
      <arglist>(std::filesystem::path const &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result&lt; std::string &gt;</type>
      <name>try_read_from</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>abf22cf0429e4b6f99a3e001263ff170a</anchor>
      <arglist>(std::filesystem::path const &amp;path) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write_to</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a5002f02e0a1ecc295d82066a59d224a5</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept(false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result</type>
      <name>try_write_to</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ae08cfb28110f688ed1f8fe6e74c4e379</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>write_permissions</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ac5e6555c28008ac586b0d28b5a6a55a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::const_overload_t</name>
    <filename>structrolly_1_1const__overload__t.html</filename>
    <templarg>typename... Args</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structrolly_1_1const__overload__t.html</anchorfile>
      <anchor>af5a797023ff0e3fc3b3f0d3115242e17</anchor>
      <arglist>(R(T::*ptr)(Args...) const) const noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>of</name>
      <anchorfile>structrolly_1_1const__overload__t.html</anchorfile>
      <anchor>a30ea7bf22d8e56a3f3d708debcdf9c37</anchor>
      <arglist>(R(T::*ptr)(Args...) const) noexcept -&gt; decltype(ptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::contracts::contract_violation</name>
    <filename>structrolly_1_1contracts_1_1contract__violation.html</filename>
    <member kind="variable">
      <type>contract_type</type>
      <name>type</name>
      <anchorfile>structrolly_1_1contracts_1_1contract__violation.html</anchorfile>
      <anchor>aeb4887c84da4a3bd31aaf0e0c9d01a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>message</name>
      <anchorfile>structrolly_1_1contracts_1_1contract__violation.html</anchorfile>
      <anchor>a4c27237ebd4ffa37207966bb22c46b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_location</type>
      <name>location</name>
      <anchorfile>structrolly_1_1contracts_1_1contract__violation.html</anchorfile>
      <anchor>a298f5d999a536ee3ade6c76ecf5e9c9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::deleter</name>
    <filename>structrolly_1_1deleter.html</filename>
    <templarg>typename R</templarg>
    <templarg>typename T</templarg>
    <templarg>R(*)(T) F</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structrolly_1_1deleter.html</anchorfile>
      <anchor>aa1a115faaff394db4b5e8a76b46f2862</anchor>
      <arglist>(U &amp;ref) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::deserialization_error</name>
    <filename>classrolly_1_1deserialization__error.html</filename>
    <templarg>typename T</templarg>
    <base>std::runtime_error</base>
    <member kind="function">
      <type></type>
      <name>deserialization_error</name>
      <anchorfile>classrolly_1_1deserialization__error.html</anchorfile>
      <anchor>a567abb1b2bc66493605dccf563bc7d14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>deserialization_error</name>
      <anchorfile>classrolly_1_1deserialization__error.html</anchorfile>
      <anchor>a7fb49dfe4a51736f866abcde86d3d1ce</anchor>
      <arglist>(std::string_view message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::dirs</name>
    <filename>classrolly_1_1dirs.html</filename>
    <member kind="function">
      <type></type>
      <name>dirs</name>
      <anchorfile>classrolly_1_1dirs.html</anchorfile>
      <anchor>a7d75a77b728e9b73350196c76c411004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~dirs</name>
      <anchorfile>classrolly_1_1dirs.html</anchorfile>
      <anchor>a21aeb26e3bfb3f7ef6e6e38233a32c62</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dirs</name>
      <anchorfile>classrolly_1_1dirs.html</anchorfile>
      <anchor>aedbe7ca36270c242f3c843b57ddf95fe</anchor>
      <arglist>(dirs const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dirs</name>
      <anchorfile>classrolly_1_1dirs.html</anchorfile>
      <anchor>ab0432e1dc2f5311c5c23fd1b7ddf6220</anchor>
      <arglist>(dirs &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>dirs &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1dirs.html</anchorfile>
      <anchor>ad90f8c0bc03485a4512d5caecba7d268</anchor>
      <arglist>(dirs const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>dirs &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1dirs.html</anchorfile>
      <anchor>ae6959c8656acd72fb2c5ae5a0069776d</anchor>
      <arglist>(dirs &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>user_home</name>
      <anchorfile>classrolly_1_1dirs.html</anchorfile>
      <anchor>ad62dbb455ae5657c1bf2a6c608dd315f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dl_info</name>
    <filename>structdl__info.html</filename>
    <member kind="variable">
      <type>char const  *</type>
      <name>dli_fname</name>
      <anchorfile>structdl__info.html</anchorfile>
      <anchor>a6aa5214c9408aa874e86148a1483eb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>dli_fbase</name>
      <anchorfile>structdl__info.html</anchorfile>
      <anchor>aaa4f56a92441a0e19e051d2d19c59c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const  *</type>
      <name>dli_sname</name>
      <anchorfile>structdl__info.html</anchorfile>
      <anchor>a5a72088007a155d3e8061d7830f6baae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>dli_saddr</name>
      <anchorfile>structdl__info.html</anchorfile>
      <anchor>a3f8467e8bb3dadfbfe220de88769f07f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::nullopt_t::do_not_use</name>
    <filename>structrolly_1_1nullopt__t_1_1do__not__use.html</filename>
  </compound>
  <compound kind="class">
    <name>rolly::io::filedevice</name>
    <filename>classrolly_1_1io_1_1filedevice.html</filename>
    <member kind="function">
      <type></type>
      <name>filedevice</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>abf7ef3da405801cbd60b84b0d0ab06ad</anchor>
      <arglist>(std::filesystem::path path)</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>path</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ab6b9a3676acab419138bbca59f4a777f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>suffixed_path</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>af6dcc07e9f5281abdade568ce7ab8205</anchor>
      <arglist>(std::string_view suffix) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a2e96520de8f987916ee5a3c7a141f1d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_regular_file</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a07be68ea9ba88479fa902c5899ad2d67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a28ddc790f54e853b15755ac811ad6be6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result&lt; std::string &gt;</type>
      <name>try_read</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>abccd939bbde9e887123ec875727af2c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a4b17c887159d7176978bee956f586505</anchor>
      <arglist>(std::string_view content) const noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>try_write</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ac57ad0eda7cfe2ff74297d546734d7fb</anchor>
      <arglist>(std::string_view content) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>read_from</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a00fc91de2b013833a613e88dcb68bd10</anchor>
      <arglist>(std::filesystem::path const &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result&lt; std::string &gt;</type>
      <name>try_read_from</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>abf22cf0429e4b6f99a3e001263ff170a</anchor>
      <arglist>(std::filesystem::path const &amp;path) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write_to</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a5002f02e0a1ecc295d82066a59d224a5</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept(false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result</type>
      <name>try_write_to</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ae08cfb28110f688ed1f8fe6e74c4e379</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>write_permissions</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ac5e6555c28008ac586b0d28b5a6a55a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::fixed_string</name>
    <filename>structrolly_1_1fixed__string.html</filename>
    <templarg>std::size_t N</templarg>
    <member kind="typedef">
      <type>char</type>
      <name>value_type</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a5d74b6b636de410a9f2c8eb2962ea47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  *</type>
      <name>const_pointer</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a7495ef6a01e1313e5f60303a6aa8fc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>acc97dea46cb7edde73ddf19b11744b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_pointer</type>
      <name>const_iterator</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>aba16a01ee8c90b3db50c320460d450f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>abdaa2c1e4717bb7a5d25c2aa24587992</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a3afc31b99bf0474020eba4afcad1b217</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a68028cfae547d46c68c69a6543982a96</anchor>
      <arglist>(T const (&amp;data)[N+1]) noexcept(noexcept(detail::char_reader&lt; T &gt;::has_throw()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>ad69559994fa3cbbd3c7bb23668d749cf</anchor>
      <arglist>(T const (&amp;data)[N+1], bool &amp;error) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a52e709a92656b7f93db18a4b8cdb6704</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a5a92a4dfca4172fc0e16a91fe3738347</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>aa4973f22a068bddc6f43f6d6a797e8cb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a98b70b8e2af0d0ea2fbc83d77ffe7ec0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a9d687b7ff258ea42e067480555ba228d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a3116b191e2c9261a59deadd68e74abb3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>ac2c7062be4ecaca0c9537e9c3dbad741</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>ae053ce1db7e91d1c5f672c8ead2480ef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>af688c11b6d7ce08b8e245cfaf4205de5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>size</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a5716df9ed853a59834034875bb7217eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>capacity</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>ac7237d91a08f60f7b4dafff32244b618</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>ad041f660b38479a223f64a95c731d013</anchor>
      <arglist>(std::size_t const n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a6bd0795cc4e61299bd5ee428cdc7d551</anchor>
      <arglist>(std::size_t n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>front</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>aa9e250b8bec12607bbe38c87afed7583</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>back</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a96cd8a7cba985a1d57605a3475c2d723</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>aee328160885e6f382c978a324926deed</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a612844d8679eb9e9e1fcba41a3cec59f</anchor>
      <arglist>(fixed_string&lt; N2 &gt; const &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>hash</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>aeda05ec5988db75c91983f117f76df47</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a45152da45315b4263d7be82a91816c74</anchor>
      <arglist>(fixed_string &amp;other) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>abb2052b7d20b7af8b08e80584d376c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>_data</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a10549baac749dd504a6862b35b8eed57</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>max_length</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>aafc56aa722b8a9c92a10400471316a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>ae28feab2b8b12f399fde8628fc2ab9ee</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a0a9bb85d084159cacc0d21731ec91368</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>aa7dd93bcdcaf4e5a0c5e8c4b26587002</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a724539a6b81f3604e7444672bc4c6958</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a1f87e55119aabe4d4d98130e06871bf3</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a43a4d621e2b8ef18c1fb1c8a6672276f</anchor>
      <arglist>(fixed_string&lt; N1 &gt; const &amp;lhs, fixed_string&lt; N2 &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr fixed_string&lt; N - 1 &gt;</type>
      <name>make_fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a0c2415eac14858f828fed325da7a75ac</anchor>
      <arglist>(T const(&amp;data)[N]) noexcept(noexcept(fixed_string&lt; N - 1 &gt;(data)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr fixed_string&lt; N - 1 &gt;</type>
      <name>make_fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string.html</anchorfile>
      <anchor>a4e68bfdf194edf83a741545e433f76e3</anchor>
      <arglist>(T const(&amp;data)[N], bool &amp;code) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::fixed_string&lt; 0 &gt;</name>
    <filename>structrolly_1_1fixed__string_3_010_01_4.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>value_type</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a4e603df3916e0ae2c0cd04f947729768</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  *</type>
      <name>const_pointer</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>acee63c753fc6e8b6a8831a8a7b2ac600</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a0c7f550c297b2b6262e65b73ac63ccda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_pointer</type>
      <name>const_iterator</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a3f3f9a9119be84f8ba69c4711c2d21a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a906f70be590a952b6f299fdfcd6c56de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ad3dc24b7d9b0e8c58d23fb2becb6f048</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a712625ca362bb64e03f68f5ddda4c865</anchor>
      <arglist>(char const *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a57f4b111f2f00f7624700473f6c44700</anchor>
      <arglist>(wchar_t const *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>aa0a1642a8fc9ca4008da39b1465f3d37</anchor>
      <arglist>(char16_t const *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ac6e49ae613f55b05d6124a6353cb2066</anchor>
      <arglist>(char32_t const *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ac99e4dc38ba76ba0937aaeebd7863433</anchor>
      <arglist>(char const *, bool &amp;code) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a507c9fca26ebdfae2ec1c3ff2bcbc1ce</anchor>
      <arglist>(wchar_t const *, bool &amp;code) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>aefce3103e3a2190fb56516f6e42370a7</anchor>
      <arglist>(char16_t const *, bool &amp;code) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a9a6029d3bb90acc1421ffabb843fcb4e</anchor>
      <arglist>(char32_t const *, bool &amp;code) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>aab1981fbcc2d2f6de54cdef6b4348619</anchor>
      <arglist>(const char8_t *) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>fixed_string</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>adc0cfa4a0563a0cdd03a784ac6f7ffa6</anchor>
      <arglist>(char8_t const *, bool &amp;code) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a61a5dddc083551d9f7516326ab1c7dbe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ae794c5a9a63a84803c9320558ce1a512</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a247ae33385e662b62d8a88dce066365f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a282759e184f7442993f1fecee9beeaba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a54ce0e8dc4008fa5b376e1328a30c3cb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a2741f0545e5830e10fc22755b66ae4e1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a396bb9186f37fde6807f65eab55f91ad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ac1e01ac7c5fa08b5080660d45278d4b6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ae70942ebc1d06f0782c0d0f37f6de9db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>size</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a29a6940fa7a8f7392b004676fcc78e12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>capacity</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ab2ffe1625a7372972c05e2f745cacd31</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ac41fede54e15a2dcec1c4a10660b73a5</anchor>
      <arglist>(std::size_t n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a948bff561c7406a2a5d7fae1bcdc07bc</anchor>
      <arglist>(std::size_t) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>front</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>af72663698e39aae6a1e537f4a716e2e2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>back</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a13b88655bb92b2b67cb0406ecd8f7f5e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a56d9dd051c8d1027d1a3975e9d13641b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>ac4804d807efaa8a5eec55b2eb15fba95</anchor>
      <arglist>(fixed_string&lt; N2 &gt; const &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>hash</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a968292e04b6a0f20318909e9720295c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>a2ce6127308f4ac5aa54315f57c5652a7</anchor>
      <arglist>(fixed_string &amp;other) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_length</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>acb639fdcc45c3b152bc586db85f0d933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>length</name>
      <anchorfile>structrolly_1_1fixed__string_3_010_01_4.html</anchorfile>
      <anchor>affeb2725e0b48a295b8e7390edb146fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::flexbuffer</name>
    <filename>structrolly_1_1serialization_1_1format_1_1flexbuffer.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QByteArray &gt;</name>
    <filename>structfmt_1_1formatter_3_01_q_byte_array_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_byte_array_01_4.html</anchorfile>
      <anchor>ad9da85c89b54fd12642ee8fc34465859</anchor>
      <arglist>(ParseContext &amp;ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_byte_array_01_4.html</anchorfile>
      <anchor>aec1e412960fae1e5f0105926fb4173ba</anchor>
      <arglist>(QByteArray const &amp;s, FormatContext &amp;ctx)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QChar &gt;</name>
    <filename>structfmt_1_1formatter_3_01_q_char_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_char_01_4.html</anchorfile>
      <anchor>a8ac4993bdc531c10da68ea6f8f8b0744</anchor>
      <arglist>(ParseContext &amp;ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_char_01_4.html</anchorfile>
      <anchor>a875df7f85de53273343712a9fa048eb7</anchor>
      <arglist>(QChar const &amp;s, FormatContext &amp;ctx)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QLatin1String &gt;</name>
    <filename>structfmt_1_1formatter_3_01_q_latin1_string_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_latin1_string_01_4.html</anchorfile>
      <anchor>a2e5fa514326c78a1666d6106726b139b</anchor>
      <arglist>(ParseContext &amp;ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_latin1_string_01_4.html</anchorfile>
      <anchor>a8728deef45ee5aef1b7d33ee88021df7</anchor>
      <arglist>(QLatin1String const &amp;s, FormatContext &amp;ctx)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QPoint &gt;</name>
    <filename>structfmt_1_1formatter_3_01_q_point_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_point_01_4.html</anchorfile>
      <anchor>ae7ebd6fc0ffad005f4023e3a7605cbc7</anchor>
      <arglist>(ParseContext &amp;ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_point_01_4.html</anchorfile>
      <anchor>a31f237d23921707e41aa42f5ea1c35c1</anchor>
      <arglist>(QPoint const &amp;s, FormatContext &amp;ctx)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QPointF &gt;</name>
    <filename>structfmt_1_1formatter_3_01_q_point_f_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_point_f_01_4.html</anchorfile>
      <anchor>a36cbf31b3227145c83d9bc752a0aaf1d</anchor>
      <arglist>(ParseContext &amp;ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_point_f_01_4.html</anchorfile>
      <anchor>a9e21129ac87f0fd49d6399d6ce7ba2b9</anchor>
      <arglist>(QPointF const &amp;s, FormatContext &amp;ctx)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QString &gt;</name>
    <filename>structfmt_1_1formatter_3_01_q_string_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_string_01_4.html</anchorfile>
      <anchor>ada526eccbaf252b79c2443b14ea9f77a</anchor>
      <arglist>(ParseContext &amp;ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_string_01_4.html</anchorfile>
      <anchor>aba7d1699603f75e1f19c3242a4e8da25</anchor>
      <arglist>(QString const &amp;s, FormatContext &amp;ctx)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QStringView &gt;</name>
    <filename>structfmt_1_1formatter_3_01_q_string_view_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_string_view_01_4.html</anchorfile>
      <anchor>af19b2d4c4189b019a49a066066e6d0e7</anchor>
      <arglist>(ParseContext &amp;ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01_q_string_view_01_4.html</anchorfile>
      <anchor>a84b093bbb11179fb9587f5387f0ccf40</anchor>
      <arglist>(QStringView const &amp;s, FormatContext &amp;ctx)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::angle&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1angle_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1angle_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a05f92b86f186ed9e78397a6bb83c1499</anchor>
      <arglist>(format_parse_context &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1angle_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>aa62380216113aad983589b69ab2d2cdd</anchor>
      <arglist>(rolly::angle&lt; T &gt; const &amp;val, format_context &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::guid &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1guid_01_4.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1guid_01_4.html</anchorfile>
      <anchor>a8ff5d5d81b76f907a6eba64a6b9a63cc</anchor>
      <arglist>(rolly::guid const &amp;v, FormatContext &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::point2d&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1point2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1point2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>ade2bfc4f430cc965e881dc4436925a09</anchor>
      <arglist>(format_parse_context &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1point2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a7403180e0903bb1fa3635fc95da46435</anchor>
      <arglist>(rolly::point2d&lt; T &gt; const &amp;val, format_context &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::size2d&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1size2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1size2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a1b17d95983e3034b78af1a131ae86bca</anchor>
      <arglist>(format_parse_context &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1size2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>aee7d8f2554c3fc1dcf2496f36fc81bae</anchor>
      <arglist>(rolly::size2d&lt; T &gt; const &amp;val, format_context &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::source_location &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1source__location_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::u128 &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1u128_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::vector2d&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1vector2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1vector2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>add2fdd81bb3d5c5443d7b2206c8f39eb</anchor>
      <arglist>(format_parse_context &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1vector2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a343fc15ed5befc5a75c59e522c00cb66</anchor>
      <arglist>(rolly::vector2d&lt; T &gt; const &amp;val, format_context &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::velocity&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1velocity_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>parse</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1velocity_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>ad857af0892970c1a5108fdfe679ca8c0</anchor>
      <arglist>(format_parse_context &amp;ctx)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1velocity_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a1740bf8e28348efc763af6a7e11eaea7</anchor>
      <arglist>(rolly::velocity&lt; T &gt; const &amp;val, format_context &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::version &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1version_01_4.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01rolly_1_1version_01_4.html</anchorfile>
      <anchor>aef301f1dfe8f3aaf1f2735a0a8be70da</anchor>
      <arglist>(rolly::version const &amp;v, FormatContext &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::generic</name>
    <filename>structrolly_1_1serialization_1_1format_1_1generic.html</filename>
  </compound>
  <compound kind="class">
    <name>rolly::guid</name>
    <filename>classrolly_1_1guid.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>guid</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>adcc8e590c79de3abecac5a8633f84c98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~guid</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a55adb0870d67890856817221d8e85f9c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>guid</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>ac5f998fbabe52c1aba3721cf9f8e27cd</anchor>
      <arglist>(std::array&lt; u8, 16 &gt; const &amp;bytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>guid</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a896e629715e54b3ecf2f21925785e597</anchor>
      <arglist>(std::array&lt; std::byte, 16 &gt; const &amp;bytes)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>guid</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a7dad1b71713575f60bf178f7ff67ea02</anchor>
      <arglist>(std::string_view const str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>guid</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a8a273b358d8110f27d657062cbdfd204</anchor>
      <arglist>(guid const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>guid</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a165bd46cc165d2fd7ad49d1c7a5a03a6</anchor>
      <arglist>(guid &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>guid &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>ae733270d1b232490ad20a2a90c85ef7a</anchor>
      <arglist>(guid const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>guid &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>af157bcd09135ee2ba4de7a1a4ba36a4d</anchor>
      <arglist>(guid &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a0c0e3e1ef595b1fc18454cdd8bc4a557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a33c95ba912ba6eb4fcb073b6990e0de6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; u8, 16 &gt; const &amp;</type>
      <name>bytes</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a49cc7f1973efe73c9fbd67fd42edbaa8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; u8, 16 &gt; &amp;</type>
      <name>bytes_mut</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a135f9118d8320a4db9db65eaffede18e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>u64</type>
      <name>to_u64</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a6c597c53ddac169a37a432ca122e4eab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a87d442c6b7e0edac7e7f79182f2a4ba3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a903b868e591425b697231b5a4321293b</anchor>
      <arglist>(guid const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>aafe968c38f96cab094fc0d13eea6989a</anchor>
      <arglist>(guid const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr guid</type>
      <name>empty</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>ac9f22c2abdd173662a172e8a826d1e12</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guid</type>
      <name>random</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>ac9644f0e224bab5cd63fce3bbd7d58c7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>short_guid_string_length</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a5cf79e4ef58206d452c7ff1fac76cd31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>long_guid_string_length</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a892cc6569790b872a63c8673ce2eb22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>ae74c4f98fab3ca71a3ac198dc50ef59d</anchor>
      <arglist>(guid const &amp;lhs, guid const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrolly_1_1guid.html</anchorfile>
      <anchor>a5c9dd19c8a05fda7b13200b0bcd7ffe9</anchor>
      <arglist>(std::ostream &amp;os, guid const &amp;guid)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::oslayer::android::guid_info</name>
    <filename>structrolly_1_1oslayer_1_1android_1_1guid__info.html</filename>
    <member kind="function">
      <type>guid_info</type>
      <name>from_env</name>
      <anchorfile>structrolly_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>affdc8cb36c3997bad5e2b5d40e82103b</anchor>
      <arglist>(JNIEnv *env) const</arglist>
    </member>
    <member kind="variable">
      <type>JNIEnv *</type>
      <name>env</name>
      <anchorfile>structrolly_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>a21bc09c0d79b4b50a37c26c86d6ab200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass</type>
      <name>uuid_class</name>
      <anchorfile>structrolly_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>a81d7202f744042bd935886fa58837121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID</type>
      <name>new_guid_method</name>
      <anchorfile>structrolly_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>ae1e71e8cda42cf94ac166e3389904fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID</type>
      <name>most_significant_bits_method</name>
      <anchorfile>structrolly_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>aa7db34dccefdf1db3aae4b878db69800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID</type>
      <name>least_significant_bits_method</name>
      <anchorfile>structrolly_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>a691827642f9c23269f7e1a9fea096841</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::thread::id</type>
      <name>init_thread_id</name>
      <anchorfile>structrolly_1_1oslayer_1_1android_1_1guid__info.html</anchorfile>
      <anchor>ab4074d0fbeb9924582b3accc40b94e87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rolly::point2d&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rolly_1_1point2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01rolly_1_1point2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>ad715f0611bf67e39ae826ea083639d73</anchor>
      <arglist>(rolly::point2d&lt; T &gt; const &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rolly::size2d&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rolly_1_1size2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01rolly_1_1size2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>aa68c8d21c09a783d2ee5d076dac8b8a7</anchor>
      <arglist>(rolly::size2d&lt; T &gt; const &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rolly::u128 &gt;</name>
    <filename>structstd_1_1hash_3_01rolly_1_1u128_01_4.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01rolly_1_1u128_01_4.html</anchorfile>
      <anchor>a9f007f9bee51c0a6b842aeeb2e47bc0a</anchor>
      <arglist>(rolly::u128 const &amp;value) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rolly::vector2d&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rolly_1_1vector2d_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01rolly_1_1vector2d_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a361e8cb2d2bbca72984605bad5ddba11</anchor>
      <arglist>(rolly::vector2d&lt; T &gt; const &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::is_any_of</name>
    <filename>structrolly_1_1is__any__of.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename... U</templarg>
    <base>disjunction&lt; std::is_same&lt; T, U &gt;... &gt;</base>
  </compound>
  <compound kind="struct">
    <name>rolly::is_num</name>
    <filename>structrolly_1_1is__num.html</filename>
    <templarg>typename T</templarg>
    <base>integral_constant&lt; bool, std::is_integral_v&lt; plain_type_t&lt; T &gt; &gt; or std::is_floating_point_v&lt; plain_type_t&lt; T &gt; &gt; &gt;</base>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_num_v</name>
      <anchorfile>structrolly_1_1is__num.html</anchorfile>
      <anchor>a23272b2567f5687eaec97876db4f96c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::is_qgadget</name>
    <filename>structrolly_1_1is__qgadget.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename</templarg>
    <base>std::false_type</base>
  </compound>
  <compound kind="struct">
    <name>rolly::is_qgadget&lt; T, std::void_t&lt; decltype(T::staticMetaObject)&gt; &gt;</name>
    <filename>structrolly_1_1is__qgadget_3_01_t_00_01std_1_1void__t_3_01decltype_07_t_1_1static_meta_object_08_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>rolly::is_qobject</name>
    <filename>structrolly_1_1is__qobject.html</filename>
    <templarg>typename T</templarg>
    <base>integral_constant&lt; bool, std::is_base_of_v&lt;::QObject, T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::json</name>
    <filename>structrolly_1_1serialization_1_1format_1_1json.html</filename>
  </compound>
  <compound kind="class">
    <name>rolly::library</name>
    <filename>classrolly_1_1library.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>load_hint</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>adb02799e19715c2c75f2323ee178d672</anchor>
      <arglist></arglist>
      <enumvalue file="classrolly_1_1library.html" anchor="adb02799e19715c2c75f2323ee178d672a334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="classrolly_1_1library.html" anchor="adb02799e19715c2c75f2323ee178d672a876bbde99776dafa22e5dd531aeeb3ca">resolve_all_symbols</enumvalue>
      <enumvalue file="classrolly_1_1library.html" anchor="adb02799e19715c2c75f2323ee178d672a32b835e2209e19d28680b9e4042c69ce">export_external_symbols</enumvalue>
      <enumvalue file="classrolly_1_1library.html" anchor="adb02799e19715c2c75f2323ee178d672a39e4a9c1579d162561eb7ece8a3c04b5">load_archive_member</enumvalue>
      <enumvalue file="classrolly_1_1library.html" anchor="adb02799e19715c2c75f2323ee178d672a1d0f630f209180de7902a58f075f00c2">prevent_unload</enumvalue>
      <enumvalue file="classrolly_1_1library.html" anchor="adb02799e19715c2c75f2323ee178d672ad8fd587ca0ea9894c84dc614e0e2aa0e">deep_bind</enumvalue>
    </member>
    <member kind="typedef">
      <type>void(*)()</type>
      <name>function_pointer_type</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a6d1a53e290deef8b13a75c129b1f5a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>library</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>af3039a27a8e1b7e938fac724cf25d38b</anchor>
      <arglist>(std::filesystem::path path, library::load_hint hints=library::load_hint::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>library</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a36f3486b712a936ab9e49b6ce916101f</anchor>
      <arglist>(library const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>library &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a52760e06eb1a149d3d6e37cb69dc52d0</anchor>
      <arglist>(library const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>library</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>ae7991f5cf97815e839921967bef6b9f3</anchor>
      <arglist>(library &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>library &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a1958ec245ee38884d70e76b9e24f087a</anchor>
      <arglist>(library &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~library</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a8925344bfe4bf18492ab80c3f4c80434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>path</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a2c5643828980181372b5b89130ce8b81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a86235718271d1a3558ac87dda9f24eef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>load_hint</type>
      <name>load_hints</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a8a1ca04c45b29267f158b1e4ed1a2876</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loaded</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a66b814ef9deaa18abcf790e002fa2eaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a47165f9a09a0d4b5f43363d372a3914c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>load</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a354170b7bbf8861c22f3a6ba87b42edb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>unload</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>ac55b68bf0ff39e4bce176254de85d479</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>result&lt; library::function_pointer_type &gt;</type>
      <name>resolve</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>ade0f3003f81be6be11f901b0c1d0608a</anchor>
      <arglist>(std::string_view symbol) noexcept</arglist>
    </member>
    <member kind="function">
      <type>result&lt; library::function_pointer_type &gt;</type>
      <name>operator[]</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a02bb0bae9930c76def48c34b7aa03c3b</anchor>
      <arglist>(std::string_view const symbol) noexcept</arglist>
    </member>
    <member kind="function">
      <type>result&lt; F &gt;</type>
      <name>resolve_cast</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a4d6180c2f32a82e7febb45b9cd803f8a</anchor>
      <arglist>(std::string_view const symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_library</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>ace2a3111ff95fa665a36e240610abdcd</anchor>
      <arglist>(std::filesystem::path const &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>constexpr rolly::library::load_hint</type>
      <name>operator|</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a5bc7d7e8ea7654f6540a4cc9f033cca0</anchor>
      <arglist>(rolly::library::load_hint const lhs, rolly::library::load_hint const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rolly::library::load_hint</type>
      <name>operator&amp;</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a43e9a5be2eafb9c8411cb74bfa24d1af</anchor>
      <arglist>(rolly::library::load_hint const lhs, rolly::library::load_hint const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rolly::library::load_hint</type>
      <name>operator^</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a3c9e5cd501afd0a4a80872616dbab981</anchor>
      <arglist>(rolly::library::load_hint const lhs, rolly::library::load_hint const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rolly::library::load_hint</type>
      <name>operator~</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a29df4ec41e869c422d0c6c74364228b7</anchor>
      <arglist>(rolly::library::load_hint const value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rolly::library::load_hint &amp;</type>
      <name>operator|=</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>af06162cbed5853027e8fd7ad427a6d66</anchor>
      <arglist>(rolly::library::load_hint &amp;lhs, rolly::library::load_hint const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rolly::library::load_hint &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>ad74b86e33410aebc36984501ef002c38</anchor>
      <arglist>(rolly::library::load_hint &amp;lhs, rolly::library::load_hint const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rolly::library::load_hint &amp;</type>
      <name>operator^=</name>
      <anchorfile>classrolly_1_1library.html</anchorfile>
      <anchor>a17a86462999a2526980d2968d84072ba</anchor>
      <arglist>(rolly::library::load_hint &amp;lhs, rolly::library::load_hint const rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::qt::qml::module</name>
    <filename>classrolly_1_1qt_1_1qml_1_1module.html</filename>
    <member kind="typedef">
      <type>version</type>
      <name>version_type</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1module.html</anchorfile>
      <anchor>ace448c1a9f1802a2c97df4b06f72c48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>module</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1module.html</anchorfile>
      <anchor>a0f2dc1320a9a06e3c38e7ed1fd510753</anchor>
      <arglist>(std::string name, version_type version={1, 0, 0}) noexcept</arglist>
    </member>
    <member kind="function">
      <type>module &amp;</type>
      <name>component</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1module.html</anchorfile>
      <anchor>a67f355c10a310b8094a8616e906c855f</anchor>
      <arglist>(optional&lt; std::string_view &gt; name=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>module &amp;</type>
      <name>singleton</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1module.html</anchorfile>
      <anchor>a130fb4eda70e0ce16ae429b9284ab943</anchor>
      <arglist>(T *instance, optional&lt; std::string_view &gt; name=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>module &amp;</type>
      <name>singleton</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1module.html</anchorfile>
      <anchor>abdf2aa39567d8e33f7f996c50f785006</anchor>
      <arglist>(optional&lt; std::string_view &gt; name=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>module &amp;</type>
      <name>file</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1module.html</anchorfile>
      <anchor>ad238d807eb04887b1bc962eb25c8a268</anchor>
      <arglist>(std::string_view url, optional&lt; std::string_view &gt; name=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>module &amp;</type>
      <name>uncreatable</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1module.html</anchorfile>
      <anchor>a56fc122b6b01b55e8e488232d29f6ff1</anchor>
      <arglist>(optional&lt; std::string_view &gt; name=nullopt, optional&lt; std::string_view &gt; reason=nullopt)</arglist>
    </member>
    <member kind="function">
      <type>module &amp;</type>
      <name>push</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1module.html</anchorfile>
      <anchor>aba2cff1809b68e746fa2fe764ca4d458</anchor>
      <arglist>(registrable &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>module &amp;</type>
      <name>push_all</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1module.html</anchorfile>
      <anchor>aa6f8bc261cb7f87851f7799477956978</anchor>
      <arglist>(std::list&lt; registrable &gt; &amp;&amp;r)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::msgpack</name>
    <filename>structrolly_1_1serialization_1_1format_1_1msgpack.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::non_const_overload_t</name>
    <filename>structrolly_1_1non__const__overload__t.html</filename>
    <templarg>typename... Args</templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structrolly_1_1non__const__overload__t.html</anchorfile>
      <anchor>a684609c6c496b1db1954e9fd6666d53e</anchor>
      <arglist>(R(T::*ptr)(Args...)) const noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>of</name>
      <anchorfile>structrolly_1_1non__const__overload__t.html</anchorfile>
      <anchor>a90a783883ea937322037c6eedcfd13fc</anchor>
      <arglist>(R(T::*ptr)(Args...)) noexcept -&gt; decltype(ptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::noncopyable</name>
    <filename>structrolly_1_1noncopyable.html</filename>
    <member kind="function">
      <type></type>
      <name>noncopyable</name>
      <anchorfile>structrolly_1_1noncopyable.html</anchorfile>
      <anchor>ac93f716f1cb3eb874fc04f3d0ff91132</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~noncopyable</name>
      <anchorfile>structrolly_1_1noncopyable.html</anchorfile>
      <anchor>aa27ac682f6bea86abd459b40415f303c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>noncopyable</name>
      <anchorfile>structrolly_1_1noncopyable.html</anchorfile>
      <anchor>ad820d6ed24725312e496428337171d4b</anchor>
      <arglist>(noncopyable const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>noncopyable &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1noncopyable.html</anchorfile>
      <anchor>ad28ba5efce09cfafd843b44d5078ac99</anchor>
      <arglist>(noncopyable const &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::nonmovable</name>
    <filename>structrolly_1_1nonmovable.html</filename>
    <member kind="function">
      <type></type>
      <name>nonmovable</name>
      <anchorfile>structrolly_1_1nonmovable.html</anchorfile>
      <anchor>a7f3bd08837ed5b6bf1779f52087ee7d9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~nonmovable</name>
      <anchorfile>structrolly_1_1nonmovable.html</anchorfile>
      <anchor>ab7c96db2c14e39a9ee60954f0bf0d0fe</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nonmovable</name>
      <anchorfile>structrolly_1_1nonmovable.html</anchorfile>
      <anchor>abed9d7deff9678e979461b252408185a</anchor>
      <arglist>(nonmovable &amp;&amp;) noexcept=delete</arglist>
    </member>
    <member kind="function">
      <type>nonmovable &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1nonmovable.html</anchorfile>
      <anchor>a415e493b6bcb25de3a24d91bb3455aeb</anchor>
      <arglist>(nonmovable &amp;&amp;) noexcept=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::nullopt_t</name>
    <filename>structrolly_1_1nullopt__t.html</filename>
    <class kind="struct">rolly::nullopt_t::do_not_use</class>
    <member kind="function">
      <type>constexpr</type>
      <name>nullopt_t</name>
      <anchorfile>structrolly_1_1nullopt__t.html</anchorfile>
      <anchor>aa59f6caeb935135dbd2557e6e02723ea</anchor>
      <arglist>(do_not_use, do_not_use) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::observer_ptr</name>
    <filename>classrolly_1_1observer__ptr.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>ac164697c9d0487ea4fc321fa53812897</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>ae8b6c6207c2b3a2a1eac3c237800d022</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const  *</type>
      <name>const_pointer</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>aa49026a2abe84d5ec221069320ad6ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>aaec47105a8ae48c5a5453494d5cebf6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a9e4b17a5be584c06ffe005c50a6ab12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a3be624b0111d3d08f91d67fa51a6488b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a304d2e2519769eac5d99ec4810a7c59b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a15c993c06b63db870205e4452c16ca03</anchor>
      <arglist>(std::nullptr_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a0b5c84f22a4a3552a432fced385907b4</anchor>
      <arglist>(pointer ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>aed9bb2c2f3d1cf381a35cba7cd87991e</anchor>
      <arglist>(observer_ptr&lt; U &gt; const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>ad74b5d04f1c73c54a2e6c626341bbb3c</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a5580eaeba8212f3005ddd3b675df80eb</anchor>
      <arglist>(box&lt; U &gt; const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>get</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>abf9bcccf4163eae8e980c3968a904c8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>ref</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a13fd03ab27073849bd8aeacfa73669e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>ref</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a749a1d5accca6272d87d404f3faea2cd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>abcf0ae6603f17eccf74b1f9a7bfe410e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a9ff6e5f9b41fb1ffbeee1156b12aba8a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a35ec87137169bec7507f86f7ac839a07</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator pointer</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a81c98dd65b9517ae695cf804f6e80d94</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>release</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a9646ad6b2038eb02df08226142b704aa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>reset</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a24144d2e3181a0a791d96de3ec862474</anchor>
      <arglist>(pointer ptr=nullptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>ab78d20fffb4386c50e6f7245096e326b</anchor>
      <arglist>(observer_ptr &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::optional</name>
    <filename>classrolly_1_1optional.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>aabdc3ebf0dea6b639db14863b1dba3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>adfb00ffdb63600af18160f309f68b422</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a77d41a26be18ffb62998753713230c0f</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>af0d85dd522790a991c2b060d2a2322bc</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ab8510c41ac278d6bbdfb9fdcefd07195</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ad2cf2ee6b08cab67cda970bcddbeb532</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a58809847b460de00e367516f26a3618d</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2b149948c30c58b677cb81158eb3015c</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a99a1264e439812d2110cfa9808dd107e</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>abc58cf3696e9308748407ee2aa4326df</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ab988995377418c5e270931562be1ca0e</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a98f63906daf984ee98336774a9a079f9</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2af6a5a159028a4c8072ba3d2c5546f2</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a5524b7827537e4d1ec8831d33d4f5fb3</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a5524b7827537e4d1ec8831d33d4f5fb3</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a4f7b44bcb73bcb1dada170e6ffe14a58</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a4f7b44bcb73bcb1dada170e6ffe14a58</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a77c95aa00b2a7b2b6857ea56b43025f0</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a77c95aa00b2a7b2b6857ea56b43025f0</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a4139ebc282f91b81f4c512b2a484bfae</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a4139ebc282f91b81f4c512b2a484bfae</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a37e651b1f028177e145f987ab3b5652a</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ae8b8144c3c0ccc4edf7d8cf3f0346ecd</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a6f9cbeed180c91e3b6cc4546607de24f</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a522e1d5b74877f314e04f981a7e958b7</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ab7adccc4de5317eec0d2ea2c22a68356</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a1aa74df347ba8061cdf286c86655aa19</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>af81ac0b7825d5c9544d4f5e18db3541b</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a0e811edf4e8555640bc17afd88b5ed41</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; typename std::decay&lt; U &gt;::type &gt;</type>
      <name>conjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>acfdbd05f08c9767c3cf8446450c68121</anchor>
      <arglist>(U &amp;&amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ab4e9801013abcbd13c7f4465dc179727</anchor>
      <arglist>(optional const &amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a17a73a56fce5d7b06665012db06ec54d</anchor>
      <arglist>(optional const &amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2eb43d5b8dc2d8cd5409d20181a1d50f</anchor>
      <arglist>(optional const &amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a311a730cfb8a382c2e32b645c1816cdb</anchor>
      <arglist>(optional const &amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a1306c8e57f5f95e7ed1522972b9e68e5</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2613efd150fce211972443d22ea319b6</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a0ab4c6b049e378f1010e5ac703cf1e5b</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2b6dd8afffee1aeb8cd2349123645c25</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>take</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a4b5822642c56fdd8ae58227c3cbfa70a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>abd3a8d019b6608608eb8ab25d160d4a7</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a6da96b495b28fd4db0e7365398ab0966</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>adcd13264e368aca46cfd6f25ecefe471</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>add4abb39a899311e65a700fcc36d22b8</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a1bbeff8aa6b8c2d74ba8fed897e63d54</anchor>
      <arglist>(detail::enable_if_t&lt; std::is_constructible&lt; T, Args... &gt;::value, std::in_place_t &gt;, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>addb45dc2873cdf04b99a4519b7adc014</anchor>
      <arglist>(detail::enable_if_t&lt; std::is_constructible&lt; T, std::initializer_list&lt; U &gt; &amp;, Args &amp;&amp;... &gt;::value, std::in_place_t &gt;, std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a388b7bbddb0b04303c03b8cfea077681</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a388b7bbddb0b04303c03b8cfea077681</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>aea2ac6d38350fc152f3419df60c6c9e7</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>aea2ac6d38350fc152f3419df60c6c9e7</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a38735480e194c89abc7bdf2f3c12fda9</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a38735480e194c89abc7bdf2f3c12fda9</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>acceafd00f24d1b7789a5d7252a668cd1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a95c9b7a7e1972a9984327709af7d6013</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a600f7d7d217bf861dce795d0fccabf09</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>af73d9cd624c7bd832e65fd7d1278150d</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ae81f4c50a185993a0d23783141fb8e8b</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>afc2b21aa4af8e989baa4acc4313eb320</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a50c3cf00d771bfb675ad6acf9e521a2c</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>emplace</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ab7abb2fb6521e01c7a1b9433b772242b</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>detail::enable_if_t&lt; std::is_constructible&lt; T, std::initializer_list&lt; U &gt; &amp;, Args &amp;&amp;... &gt;::value, T &amp; &gt;</type>
      <name>emplace</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>add73d65bf0c6b582ac18484ca75ca6cc</anchor>
      <arglist>(std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a7948e929387053b09fcb7cbdfcd54dc1</anchor>
      <arglist>(optional &amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value &amp;&amp;detail::is_nothrow_swappable&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a21fafea579fb8248bf56cae83d572668</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>acbb247aed542632c0ec047dcafe388d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2bf6b6e1943636c6f4a0c6c3bff4e9c7</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>abf52b6b41de42f77d1496c611d57c148</anchor>
      <arglist>() const &amp;</arglist>
    </member>
    <member kind="function">
      <type>T &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a8800981ff8ea6c46684e81f359394c21</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a42cc8e3cd09e46d73fb0fb30ee4485fd</anchor>
      <arglist>() const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_value</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>abace8eb1013ae478da1739a7c6e5b91e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a8b14d58cc558b71dcfc8168f5c6a413b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>value</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ac4ace6ebb266b0cb41495f75b25b89e9</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a176014abe65082838171e446a82a2762</anchor>
      <arglist>() const &amp;</arglist>
    </member>
    <member kind="function">
      <type>T &amp;&amp;</type>
      <name>value</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a5ef0d0a88b430c68161bfe4fcae27a72</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;&amp;</type>
      <name>value</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ac23eab6d7f54919245b97c70885fb4c8</anchor>
      <arglist>() const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>acd29214f659b6a764877c25cf89a9dd7</anchor>
      <arglist>(U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a7c4d932681e2ff311f615371e9b0b069</anchor>
      <arglist>(U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a5b9712a2950cd4aff17bda6561542e7a</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::optional&lt; T &amp; &gt;</name>
    <filename>classrolly_1_1optional_3_01_t_01_6_01_4.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>value_type</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>acdb6575419a5365871cec8147eece1fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ae346cc48a91c2d16523e7b0a823a4a17</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>afa88c24a780867a5d958e2d1be8c1793</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a9f13705f4782c4479069b9d193d9f1a5</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a94bfcf981d90287ecd89497d07420d9d</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ad2884c120895b19663e854fb54bd5a9b</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>afe569af537814ca8db786f080bc3c50b</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a33d40ab8f1dfe1c5ff73b16372029f29</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a284308363f8be12e8fdbe9885e45d4da</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ae17281241d8d1c8b056d4eca7450b133</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a8e382a0e2f035922fb2e1ef5d892b699</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>adeb05a1cc463685e47090cfacda16e42</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ad0f4993b69787640e1e8cf1658a87448</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a0145894998bf0ccf35c50de7be15b670</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a0145894998bf0ccf35c50de7be15b670</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a174337c24f658150912c6526fbb345cd</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a174337c24f658150912c6526fbb345cd</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a101d505131b4dfa8a6738d10944ee675</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a101d505131b4dfa8a6738d10944ee675</anchor>
      <arglist>(F &amp;&amp;f) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a3830ed19d86c8b5498e0a85b914a1360</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a3830ed19d86c8b5498e0a85b914a1360</anchor>
      <arglist>(F &amp;&amp;f) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a212d3761396295c66a844a857c5e6bdc</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a31529313c41b7e14c68fcb1b1a6ae065</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a293799643ae99d85cc010d24855967ba</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a7c1b39c37bb2c177c956a102f83a6ac3</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a6902a34ae2d399cbd9d99d5906cb9500</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a6d89e18f76f1f98c181577323a8ea5c6</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a87b4393c318d2508ba07dd0eb1b94b67</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a3073a53b6bf253072cad442e48979410</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; typename std::decay&lt; U &gt;::type &gt;</type>
      <name>conjunction</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a92bd409814de2d523b30a0faec03ec1e</anchor>
      <arglist>(U &amp;&amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>abb4d02a013fd281e4e7c7fd225e6480f</anchor>
      <arglist>(optional const &amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a7c32983e8ebe8f8c8d90cf1e71c27293</anchor>
      <arglist>(optional const &amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a63bcf34cc85ea067fd0a5663fe477e7b</anchor>
      <arglist>(optional const &amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>af19220cb44e32ce4e577e7080af384f7</anchor>
      <arglist>(optional const &amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>aeae8dc43f4aea30f24d19c05eef68d92</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab9d17c46a0c6d2aa0d8f5f7648683cf1</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a33207bafddae230f209c09028f70e531</anchor>
      <arglist>(optional &amp;&amp;rhs) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a17f667e009ac22131e5c6e9b6fb8161d</anchor>
      <arglist>(optional &amp;&amp;rhs) const &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>take</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>aad29898024499873f3e161f1f816a206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a5812b7b052d3bcc951a48fbdc16a0b21</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a7212540f02f7be3355fab6aee7695ddb</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ac5c45ccc430f57d8e545d2001e2cd2af</anchor>
      <arglist>(optional const &amp;rhs) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ad5e6fb31fbdd3475a0fcfdf447aa5b19</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a85cb92ba8978709112ce1d7bd250752d</anchor>
      <arglist>(U &amp;&amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a3d84b5fe702847d6ea18895ecd1b78af</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a41a58e54b39ce2c5f3098cf95578a4e0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a7e07675db49ec496461f0292850352ef</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a1663ea5e00203fee7f881c5088366b57</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>aa83c305624f3b7181d2844ae6b775b83</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a61bc1b19c1ecbce3baa4cd0129770155</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>emplace</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ad613bcc1bdbe91340ae8c0e8924d918e</anchor>
      <arglist>(U &amp;&amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a0509db2d7bbbfe8fa4f677eb623835e2</anchor>
      <arglist>(optional &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab27e29b616a6e31a824c689dc8356451</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ad08a1e83b8f2feb5b8672ec9b23393ac</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>aea8ce64cbb4726ecc1b626895724531f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ab5e920e5bcae7def14f60df418bcecb8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_value</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a8beaddc96cec42b48759ce99249f15e2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>add044b41d5495fe7217ad627ce16cfd2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>value</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>aec0c3d036f8dc7d46e50370b738e6695</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>a0502a3b321a51d98a663dfe329423623</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>ada38f5c8d9854ca4d68039bdfb830162</anchor>
      <arglist>(U &amp;&amp;u) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_or</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>aa59a2ddf97ed23924d6ee565ac786551</anchor>
      <arglist>(U &amp;&amp;u) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classrolly_1_1optional_3_01_t_01_6_01_4.html</anchorfile>
      <anchor>af4c2df5580cb800739bd5e7421c35783</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::overload_t</name>
    <filename>structrolly_1_1overload__t.html</filename>
    <templarg>typename... Args</templarg>
    <base>const_overload_t&lt; Args... &gt;</base>
    <base>non_const_overload_t&lt; Args... &gt;</base>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structrolly_1_1overload__t.html</anchorfile>
      <anchor>a85c746af57f90d8f9ab3c73257bbca54</anchor>
      <arglist>(R(*ptr)(Args...)) const noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structrolly_1_1const__overload__t.html</anchorfile>
      <anchor>af5a797023ff0e3fc3b3f0d3115242e17</anchor>
      <arglist>(R(T::*ptr)(Args...) const) const noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structrolly_1_1non__const__overload__t.html</anchorfile>
      <anchor>a684609c6c496b1db1954e9fd6666d53e</anchor>
      <arglist>(R(T::*ptr)(Args...)) const noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>of</name>
      <anchorfile>structrolly_1_1overload__t.html</anchorfile>
      <anchor>af8ab42467cd8d6a93a7c61343bfe93a1</anchor>
      <arglist>(R(*ptr)(Args...)) noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>of</name>
      <anchorfile>structrolly_1_1const__overload__t.html</anchorfile>
      <anchor>a30ea7bf22d8e56a3f3d708debcdf9c37</anchor>
      <arglist>(R(T::*ptr)(Args...) const) noexcept -&gt; decltype(ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>of</name>
      <anchorfile>structrolly_1_1non__const__overload__t.html</anchorfile>
      <anchor>a90a783883ea937322037c6eedcfd13fc</anchor>
      <arglist>(R(T::*ptr)(Args...)) noexcept -&gt; decltype(ptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::pin</name>
    <filename>structrolly_1_1pin.html</filename>
    <base>rolly::noncopyable</base>
    <base>rolly::nonmovable</base>
  </compound>
  <compound kind="struct">
    <name>rolly::plain_type</name>
    <filename>structrolly_1_1plain__type.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>remove_cvref_t&lt; std::remove_pointer_t&lt; T &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structrolly_1_1plain__type.html</anchorfile>
      <anchor>ae95b27c20a3e35b84113efb8702f9dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_const_t&lt; type &gt;</type>
      <name>const_type</name>
      <anchorfile>structrolly_1_1plain__type.html</anchorfile>
      <anchor>a197683d8165b9338c99302285f308cdc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::point2d</name>
    <filename>structrolly_1_1point2d.html</filename>
    <templarg>concepts::num T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a6ffa0a5bd0ed9e68b66af645a616eb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size2d&lt; number_type &gt;</type>
      <name>size2d_type</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a58e5dd19dd7414fdc0334620836010d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector2d&lt; number_type &gt;</type>
      <name>vector2d_type</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a8180a9190bc6fedd4a9f514d38841dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a4f864677cc7e88d0a837a96889852f0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>aad2fce18a8c5b25e581bd8b9c2919f07</anchor>
      <arglist>(number_type x, number_type y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>ad849e766a788a83112aad8e0c125608e</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a6c2e20dce76b3bf697d6224373044a36</anchor>
      <arglist>(size2d_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a38efcd2f3e918860c2105c8ae2144659</anchor>
      <arglist>(vector2d&lt; number_type &gt; const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a14a7fda7312a89587ec6c23aab423122</anchor>
      <arglist>(F &amp;&amp;fn) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>zip</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a527109bf2e1f6a0509ebdaba52de65c7</anchor>
      <arglist>(point2d const &amp;other, F &amp;&amp;fn) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d_type</type>
      <name>to_size2d</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a500264453b167997a2a6ab37178b88f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; number_type &gt;</type>
      <name>to_vector2d</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>af5e6214c9409a5246643777dbdd2669e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>to_f32</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a910fa609ee187c7fbbe77d1522b739b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; f64 &gt;</type>
      <name>to_f64</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>af4774b1045a64a4c5f76938db53dccf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; u32 &gt;</type>
      <name>to_u32</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>ad60ca904ceb61a69e032670b40aaa51c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; u64 &gt;</type>
      <name>to_u64</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a90383455a61dd7e137f865e89142bf8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; usize &gt;</type>
      <name>to_usize</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a57c1dfd3a13562605c6461e9fe060835</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; i32 &gt;</type>
      <name>to_i32</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>aa9c11144e4c122ff500fd7b93a85ad82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; i64 &gt;</type>
      <name>to_i64</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a16a03b28e7663df1f0c520943ca07a8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; isize &gt;</type>
      <name>to_isize</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a9c7fcccf726750193d4c0fdf4265217a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>div_euclid</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a9c208e2aedab5e586798a524420c7193</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>rem_euclid</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>abbfe14e45cfc2e9afe5c6e0a621d0f2c</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a86a5af701557d9f97bac388dcc73f219</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>aafc78dfd35373db11d274ffc8fd9dbe5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a0e0146a378133bdbf5265ded81b153f6</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>ab0650148dd522fb9e8bd009dc43f41dc</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a00b20656b58dd6d6e587d4e0e1d5a52a</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a0ec99b91cb78f5ed025c7b72294bd384</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a5424be9c662407ef8ead55981e5ffcce</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a6b006f71a383cb75191d714f53b0ba4f</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>x</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>abe9121d072871919be9fd47b0ba965b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>y</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>aa4a59f3abd88d855ae565657df95933f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>x_mut</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>ac8332fbdd16908b01c989ff8ec6ae6b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>y_mut</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a377fc421969aa4a4d7ad076fef2a774a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>inverted</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>acbf6255a805df94c08c26fff5e4c6c1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>ae1f46f2beed86dc23c530fd6736a482e</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a38e740b5be0858210a63266447c3deb4</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a67365a6a98029c3d915c5d6fc77a0926</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>ab3b7e21ccc46196eecee41c50d60bc30</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a1ee691cfb1097f6a7c068710141231dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; number_type, 2 &gt;</type>
      <name>to_array</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>acd5d6ff3b4420931ff40cc4c24af72cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::tuple&lt; number_type, number_type &gt;</type>
      <name>to_tuple</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>afcc80373a6d01152186ae74806cf2197</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; number_type, number_type &gt;</type>
      <name>to_pair</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a3c1cb27e39d940fe3a7d6459252f77a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>round</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>ac6144afdfac08901aaceed9034c2d860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>ceil</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>ae31efcee1a1928567e5e52a30a71a468</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>floor</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a61f1482bb9d45caae4adf7e633cb1590</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>lerp</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a5b8d3fda074844ba359b1ecfa4fc22c3</anchor>
      <arglist>(point2d const &amp;other, f32 t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>max</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>abf8b310766395a8033532f983f228bb3</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>min</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a8b45653e87eab4e00f95a43f52c3badd</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>clamp</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>adeef0c72715b85673dd2711fe7f2467e</anchor>
      <arglist>(point2d const &amp;start, point2d const &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>abs</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a200fc79110207c4894091b7e76e10220</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>dot</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>af2611186059ca3bace469540a658af24</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a2d76e05db2a068e0c3897c743513ad71</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_finite</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a3162a5ee8f77f99419fb933c3e673f2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_positive</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a7109eff5b3160bcd962980319b023041</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>ab024b1f2633bb75b49638ba35426a913</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>aa937f01e25156471966378d0cae65c6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr QPoint</type>
      <name>to_qpoint</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a4433b1b6a5f9bd6ff0efabcd62304234</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr QPointF</type>
      <name>to_qpointf</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a484de95bbdf6e0d3ca6519f8e5e1f9e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a0c54bad7d30b5388a23c2dfba0259912</anchor>
      <arglist>(QPoint const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>adce85a636593dd0fa5b7b54fbfcfafc8</anchor>
      <arglist>(QPointF const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>origin</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a8e53a67ff3711f372ad724dc86955c12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_size2d</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a8ba18ff6c0f31f0c031cdd964bf1cb43</anchor>
      <arglist>(size2d_type const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>zero</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a468cc99bd5f735b49801c77ed8cddf7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>splat</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a178a3421593155928a3dbe79380afe03</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_tuple</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>ae51fdb9f7feb25be6e0ee5005c617b46</anchor>
      <arglist>(std::tuple&lt; Args... &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_array</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a70f8af59f2c2d41863b6c9fa841eb506</anchor>
      <arglist>(std::array&lt; number_type, N2 &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_pair</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>ad02f51ca8e3d91e52c1f51e1863a6cf7</anchor>
      <arglist>(std::pair&lt; number_type, number_type &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_qpointf</name>
      <anchorfile>structrolly_1_1point2d.html</anchorfile>
      <anchor>a6fd31cd980cac028db11b456445f7902</anchor>
      <arglist>(QPointF const &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::meta::project_meta</name>
    <filename>classrolly_1_1meta_1_1project__meta.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>project_meta</name>
      <anchorfile>classrolly_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a198dac9b7b4cebd825672bc80cbe75c2</anchor>
      <arglist>(struct version version, std::string_view name, std::string_view domain, std::string_view organization) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr struct version</type>
      <name>version</name>
      <anchorfile>classrolly_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a575401594304a5ed3fbc45482839671a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>name</name>
      <anchorfile>classrolly_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a249eb44d26679f647cbe371d1ad0c97f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>domain</name>
      <anchorfile>classrolly_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a2ca18d536a2225808c4add4419327478</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>organization</name>
      <anchorfile>classrolly_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a78d99c578466a9beb376ae314ace70be</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::propagate_const</name>
    <filename>classrolly_1_1propagate__const.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>propagate_const</name>
      <anchorfile>classrolly_1_1propagate__const.html</anchorfile>
      <anchor>ac10dd9f1a9464ed1616eb82d49f8c9b3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>propagate_const</name>
      <anchorfile>classrolly_1_1propagate__const.html</anchorfile>
      <anchor>afa2cf8d14ff60683746f197d95f5f109</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>T::element_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1propagate__const.html</anchorfile>
      <anchor>a69ed51121c04f8cb2c9d9cb43bf250c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T::element_type const &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1propagate__const.html</anchorfile>
      <anchor>aea4aa3cd2873a088ae4482ab50dcc244</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T::element_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1propagate__const.html</anchorfile>
      <anchor>aff8a29778d1d2dad0d514db2575be24f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T::element_type const *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1propagate__const.html</anchorfile>
      <anchor>a6b6e88d3f6c50bf0b27135669be6577a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T::element_type *</type>
      <name>get</name>
      <anchorfile>classrolly_1_1propagate__const.html</anchorfile>
      <anchor>a6d71109c67be4e5b1c407888e0c094f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T::element_type const *</type>
      <name>get</name>
      <anchorfile>classrolly_1_1propagate__const.html</anchorfile>
      <anchor>a266e2c9829fdfc8ea36ae49be8a6f200</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1propagate__const.html</anchorfile>
      <anchor>ab3a2e75f946575e41fbd737be10e899c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::qt::qml::registrable</name>
    <filename>classrolly_1_1qt_1_1qml_1_1registrable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~registrable</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1registrable.html</anchorfile>
      <anchor>ac98a04017173bbe31dd22045a420a770</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registered</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1registrable.html</anchorfile>
      <anchor>a668131799ac89a1e2475de0475011130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1registrable.html</anchorfile>
      <anchor>a4b239fcc157f1a431c5d7275bfa5764f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_in</name>
      <anchorfile>classrolly_1_1qt_1_1qml_1_1registrable.html</anchorfile>
      <anchor>a60acc3220c27222daa7ca71d848080f9</anchor>
      <arglist>(module &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::remove_cvref</name>
    <filename>structrolly_1_1remove__cvref.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structrolly_1_1remove__cvref.html</anchorfile>
      <anchor>acfb77e71c04576d00ed1c3be64be9f39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::savefile</name>
    <filename>classrolly_1_1savefile.html</filename>
    <templarg>typename F</templarg>
    <templarg>typename T</templarg>
    <base>rolly::io::filedevice</base>
    <member kind="function">
      <type></type>
      <name>savefile</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a2c69e8c526e8d63247909a3b67974dde</anchor>
      <arglist>(std::filesystem::path path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>savefile</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>aaf35dfd0c29ae56afc4c3d50d74c7c66</anchor>
      <arglist>(std::string_view filename, std::filesystem::path const &amp;folder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>savefile</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>ae89e45f4f0191477ff1d030ddfd3a15c</anchor>
      <arglist>(savefile const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>savefile</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a8523485157ee51e2bae3b3a7056efec0</anchor>
      <arglist>(savefile &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~savefile</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a3ba7f1b3d62576485084d269ad2ac6ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a2cf20103d778742c3ee3e91917040b04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>backing_path</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>aa25557f793fd5a77fde813b82982395d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_backup</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>af2218f20763a97a9e0adc520995c4684</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>values</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>aeb2090c4137a42c18b8a20c81c66a9d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>values_mut</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>ac34f628b263415bdd5708ed13a101783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a4e98b7e435856e0bc2644117674efd55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>try_load</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a569634a2358c466112236d70fb7ccf15</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>ad9d3f23e05ca998d9f493d1134eb2f95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>try_save</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a2678da244f3cf94a5db3fd12b685e9ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>adeef57ffe951d78672c659664d3ec1dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>try_invalidate</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a7997cd587d108bd8390037752aea91e6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commit</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>aed428a03e6a21059d6edcbcaf2453747</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>try_commit</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>aa8dfbf1c091b35d1d46510a4cb82b3a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>ae6c1556f0f67fcd5555e796511165bb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>operator()</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a5de409c29f7cd9c787c1ebf04b7ef838</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>ad5c7bd1d0e81860e1dad4d047461b763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>savefile &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a4432c829c526cf838507942f99f17650</anchor>
      <arglist>(savefile const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>savefile &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>addf5deede5260b6155ea61fd52180d90</anchor>
      <arglist>(savefile &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const &amp;</type>
      <name>path</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ab6b9a3676acab419138bbca59f4a777f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>suffixed_path</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>af6dcc07e9f5281abdade568ce7ab8205</anchor>
      <arglist>(std::string_view suffix) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a2e96520de8f987916ee5a3c7a141f1d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_regular_file</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a07be68ea9ba88479fa902c5899ad2d67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a28ddc790f54e853b15755ac811ad6be6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result&lt; std::string &gt;</type>
      <name>try_read</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>abccd939bbde9e887123ec875727af2c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a4b17c887159d7176978bee956f586505</anchor>
      <arglist>(std::string_view content) const noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>try_write</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ac57ad0eda7cfe2ff74297d546734d7fb</anchor>
      <arglist>(std::string_view content) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>read_from</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a00fc91de2b013833a613e88dcb68bd10</anchor>
      <arglist>(std::filesystem::path const &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result&lt; std::string &gt;</type>
      <name>try_read_from</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>abf22cf0429e4b6f99a3e001263ff170a</anchor>
      <arglist>(std::filesystem::path const &amp;path) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write_to</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>a5002f02e0a1ecc295d82066a59d224a5</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept(false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result</type>
      <name>try_write_to</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ae08cfb28110f688ed1f8fe6e74c4e379</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view content) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>write_permissions</name>
      <anchorfile>classrolly_1_1io_1_1filedevice.html</anchorfile>
      <anchor>ac5e6555c28008ac586b0d28b5a6a55a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::detail::scope_guard&lt; Callback &gt;</name>
    <filename>classrolly_1_1detail_1_1scope__guard_3_01_callback_01_4.html</filename>
    <templarg>typename Callback</templarg>
    <member kind="typedef">
      <type>Callback</type>
      <name>callback_type</name>
      <anchorfile>classrolly_1_1detail_1_1scope__guard_3_01_callback_01_4.html</anchorfile>
      <anchor>ad35b2c184a5c42065311828bd7fe17b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scope_guard</name>
      <anchorfile>classrolly_1_1detail_1_1scope__guard_3_01_callback_01_4.html</anchorfile>
      <anchor>a854bf1faf789aaeb2b1e1c49f42dc10d</anchor>
      <arglist>(scope_guard &amp;&amp;other) noexcept(std::is_nothrow_constructible_v&lt; Callback, Callback &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scope_guard</name>
      <anchorfile>classrolly_1_1detail_1_1scope__guard_3_01_callback_01_4.html</anchorfile>
      <anchor>aa4b6743cdfd6d53517afb7fdc5be79e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dismiss</name>
      <anchorfile>classrolly_1_1detail_1_1scope__guard_3_01_callback_01_4.html</anchorfile>
      <anchor>a828f9458680fb7b3aee3c238d46b9f29</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scope_guard</name>
      <anchorfile>classrolly_1_1detail_1_1scope__guard_3_01_callback_01_4.html</anchorfile>
      <anchor>a3109149e15b4a3e08ca3038cd51349b7</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scope_guard</name>
      <anchorfile>classrolly_1_1detail_1_1scope__guard_3_01_callback_01_4.html</anchorfile>
      <anchor>a6447a3f9c459ce7645c64083018b2d48</anchor>
      <arglist>(scope_guard const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>scope_guard &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1detail_1_1scope__guard_3_01_callback_01_4.html</anchorfile>
      <anchor>aab29adfca76a9d9c9f15a1350d2070cb</anchor>
      <arglist>(scope_guard const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>scope_guard &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1detail_1_1scope__guard_3_01_callback_01_4.html</anchorfile>
      <anchor>a33675bdc7ae91ebc529742823d0a2595</anchor>
      <arglist>(scope_guard &amp;&amp;)=delete</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend scope_guard&lt; Callback &gt;</type>
      <name>make_scope_guard</name>
      <anchorfile>classrolly_1_1detail_1_1scope__guard_3_01_callback_01_4.html</anchorfile>
      <anchor>ad78bc44e8a7a012260976e10cc0f87c6</anchor>
      <arglist>(Callback &amp;&amp;) noexcept(std::is_nothrow_constructible_v&lt; Callback, Callback &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend scope_guard&lt; Callback &gt;</type>
      <name>finally</name>
      <anchorfile>classrolly_1_1detail_1_1scope__guard_3_01_callback_01_4.html</anchorfile>
      <anchor>a28d324c817850c92b8e155c7a33bae76</anchor>
      <arglist>(Callback &amp;&amp;) noexcept(std::is_nothrow_constructible_v&lt; Callback, Callback &amp;&amp; &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::serialization_error</name>
    <filename>classrolly_1_1serialization__error.html</filename>
    <templarg>typename T</templarg>
    <base>std::runtime_error</base>
    <member kind="function">
      <type></type>
      <name>serialization_error</name>
      <anchorfile>classrolly_1_1serialization__error.html</anchorfile>
      <anchor>a6fb278fb76b8b4e7356859a22c167a72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>serialization_error</name>
      <anchorfile>classrolly_1_1serialization__error.html</anchorfile>
      <anchor>a9aef72edef6f7b6ea9f6d8018ecfc964</anchor>
      <arglist>(std::string_view message)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::singleton</name>
    <filename>structrolly_1_1singleton.html</filename>
    <templarg>typename T</templarg>
    <base>rolly::pin</base>
    <member kind="function">
      <type></type>
      <name>singleton</name>
      <anchorfile>structrolly_1_1singleton.html</anchorfile>
      <anchor>abd46ad0a9ec403444014cd69a1856a9d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>ptr_mut</name>
      <anchorfile>structrolly_1_1singleton.html</anchorfile>
      <anchor>a69d0847f0b35b06954449b94f597229a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T const *</type>
      <name>ptr</name>
      <anchorfile>structrolly_1_1singleton.html</anchorfile>
      <anchor>a65951826d1bf71ca9dbd24b8759386a9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T const &amp;</type>
      <name>ref</name>
      <anchorfile>structrolly_1_1singleton.html</anchorfile>
      <anchor>aea1e59796604ccbf3886a5895523b1d6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T &amp;</type>
      <name>ref_mut</name>
      <anchorfile>structrolly_1_1singleton.html</anchorfile>
      <anchor>a8f989b8f54e01089097945171c8f5ee0</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::size2d</name>
    <filename>structrolly_1_1size2d.html</filename>
    <templarg>concepts::num T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a83d9843b093a4a50e0e3d3554e8d0118</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a472f8f5082e202a66251942a6f143e65</anchor>
      <arglist>(size2d const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>adeb82e46f0a073d4fa9c47a52c54cf8a</anchor>
      <arglist>(size2d const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a40b9f8ed4a6b6855f906dcb33ecd6be4</anchor>
      <arglist>(size2d &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>adb4243bfbb138b899b9d511a47b05a19</anchor>
      <arglist>(size2d &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a90bd9dceb2a0e572357997f1730d08a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>aabb1e958b8dc2559d0e22daee71e69df</anchor>
      <arglist>(number_type x, number_type y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a5cdd76ae28498354319cefed8964ceb4</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a6aff8cc7baa477c8daa7c51e979a6b35</anchor>
      <arglist>(point2d&lt; number_type &gt; const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a32cb9e3a4824472795c92a7f33a7d425</anchor>
      <arglist>(vector2d&lt; number_type &gt; const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>inverted</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a61c10f83dee673a030399aa8587402e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>x</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>adaa79abe2af3b23d5eceaa19367f3695</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>y</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a8cec11971b01be1320e2148d04de690f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>x_mut</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>acce82a9bb3bce4ba7871739d03a2d786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>y_mut</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>ad8da0256e01f8aa7e58175651923aded</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>width</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a97f6e2fa1ec522f10a85ec2fb04f5ad1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>height</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a2089d40e903c60a17a88969a643acca6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>width_mut</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>af88e2c64d2216460126728d238232e65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>height_mut</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a4becc8c9326d46f7e2065208f166daaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a845f8b1959a51601b4f151eb24f71d77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; number_type, 2 &gt;</type>
      <name>to_array</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>ab6f3b6647e4ff6e4887098509cd126f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::tuple&lt; number_type, number_type &gt;</type>
      <name>to_tuple</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a46cd73c0d7aab88bbb96ab239e52ee18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; number_type, number_type &gt;</type>
      <name>to_pair</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>ae7c399ba2cbb8f5cc8f45d632a2dd864</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>round</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>ad5776c4433c35a6e87d68a43e53364c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>ceil</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a0994741cec623e3a700b31105332a413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>floor</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a897ac56cb9d08001d6f7a67d18dd9771</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>lerp</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a17d8d4382d04dbb43b7ab641e98a637c</anchor>
      <arglist>(size2d const &amp;other, f32 t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>max</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>aa8c1867a41fb3ad893714deb63cfe8b2</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>min</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a72bf691c2a13d8a906e35255294f3eff</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>clamp</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a83ac994d4386fc2dad5da6185449ab40</anchor>
      <arglist>(size2d const &amp;start, size2d const &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>abs</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a260f8e67c7cda4aab3919e1fc9013fb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>dot</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a0b68372fea5d831825c0775f8a6bc196</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a6005fd6e94a384c78743eb4ba57ceaa7</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_finite</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>ad0b6c993809798e989849142311e6e1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_positive</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>ab4274964796b7d338e6094dbade78295</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a606a2d8e8b58c6b6cc15db5ddf3049c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a1a146d4e5b23b3e7d77f230068ded9b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; number_type &gt;</type>
      <name>to_point2d</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>af3606bef48cbe705a1956ea0c8b26fcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; number_type &gt;</type>
      <name>to_vector2d</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>af01726ac4de79198fe3c679961a3ece5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; T2 &gt;</type>
      <name>cast</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a1c492e9029a6cbd40856a61ad9b96b69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>to_f32</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>aaed25ac3c787faa19221b616aaf65a9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; f64 &gt;</type>
      <name>to_f64</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a825a91243b36e0c668b73f945c4da5de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; u32 &gt;</type>
      <name>to_u32</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a0f071ca13807ea675f3c4540ed1e0675</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; u64 &gt;</type>
      <name>to_u64</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a52ddcf457712f0aa6a4fb76b79ac0275</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; usize &gt;</type>
      <name>to_usize</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>ad8982602e2af3983c7d17926662e5b01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; i32 &gt;</type>
      <name>to_i32</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>aab9f6a9179e94ff333046a90a23f0dd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; i64 &gt;</type>
      <name>to_i64</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a19be8a5833f15cd8bdf59cb3569b76fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; isize &gt;</type>
      <name>to_isize</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a26bae4d07f602f83aa9b43aff1de4017</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>area</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a42738ff2f92a645256a05fa336fe9ffd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a3004570fb1377adfa9dd4577424917c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a94367e790259ec0a4e1a9b9e849650f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a67e42cffeb013a861cb0c1a2caa67a38</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a8b7364384000965dbc7f1f4c4d4a620b</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a01d4d7b80e6c45a06be88ffddf17a820</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>ae6a29668fd09bd98e04d2d90d1971421</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a0d0fc4956b0341f7f8f7030caf3d5165</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a6117b3a306a18b2c81eb7137145dd7a6</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a65aa1a3d6205d5cde228b626746cce3a</anchor>
      <arglist>(size2d const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>af8e7c28ba33444ffd880537bdbe0a870</anchor>
      <arglist>(size2d const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a862a4d9ae2c75430031a3931fc521e01</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a86773211278f46b85072d04c10193fdb</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a05eaeee54a41895d8546bbb61731e683</anchor>
      <arglist>(QSize const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>ac2b49bbccec9a95a1073cc9b1916edc1</anchor>
      <arglist>(QSizeF const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr QSize</type>
      <name>to_qsize</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a2f001eafc515140ce838eeac2d43c903</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr QSizeF</type>
      <name>to_qsizef</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>ae04794f3a4027facce358d7f316aec19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>zero</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>ab5227432c52081edf67fc3d49932aa4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>splat</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a1d1002699b6bfd7b70e90e4ce2b20548</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_tuple</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a9a329d6bf14959e9735cdcdb95818e13</anchor>
      <arglist>(std::tuple&lt; Args... &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_array</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a4d439394a5cde0195518bb510bd2805b</anchor>
      <arglist>(std::array&lt; number_type, N2 &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_pair</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a7d9811af6c1c7a5cfddd101891e17ad7</anchor>
      <arglist>(std::pair&lt; number_type, number_type &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_qsize</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a42030ef88d0e1116f5276a1863b51317</anchor>
      <arglist>(QSize const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_qsizef</name>
      <anchorfile>structrolly_1_1size2d.html</anchorfile>
      <anchor>a45f5ef3bc6f820bb3c58e3636e002984</anchor>
      <arglist>(QSizeF const &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::source_location</name>
    <filename>structrolly_1_1source__location.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>source_location</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>a587b3425bb60507ba10c373775288004</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>source_location</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>a4057b5ad2fa2938a44fa586aa8d65db6</anchor>
      <arglist>(char const *file, u32 const line, char const *function, u32 const column=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~source_location</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>ae83ee1864e13bad90df6f437e5e2197b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>file_name</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>a5159416110f401439844bae6bcb5c1a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>function_name</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>aa61e6804080a70d7e5dbaad2f48fef4c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u32</type>
      <name>line</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>aa36e670f526ba24746c5e2126f6a1c73</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u32</type>
      <name>column</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>a303d91dad48741a9df34af4b4e9f1b9a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ___consteval___ source_location</type>
      <name>current</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>a7fea7fabc116f7ebb6765aa8c43dfc50</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::symbol</name>
    <filename>structrolly_1_1detail_1_1symbol.html</filename>
    <member kind="variable">
      <type>u32</type>
      <name>value</name>
      <anchorfile>structrolly_1_1detail_1_1symbol.html</anchorfile>
      <anchor>a819cf12c3cff4e74202c74a817f041d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u32</type>
      <name>length</name>
      <anchorfile>structrolly_1_1detail_1_1symbol.html</anchorfile>
      <anchor>a2a8b139bbe401d5b756048918edb7265</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::toml</name>
    <filename>structrolly_1_1serialization_1_1format_1_1toml.html</filename>
  </compound>
  <compound kind="class">
    <name>rolly::u128</name>
    <filename>classrolly_1_1u128.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>format</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a57515f8494c9aadd9b10c2273e4eb49b</anchor>
      <arglist></arglist>
      <enumvalue file="classrolly_1_1u128.html" anchor="a57515f8494c9aadd9b10c2273e4eb49babdaa3c20a3e3851599514f7c6be5f62f">decimal</enumvalue>
      <enumvalue file="classrolly_1_1u128.html" anchor="a57515f8494c9aadd9b10c2273e4eb49ba34d0e21ea08f041727cd3c62f02535e3">octal</enumvalue>
      <enumvalue file="classrolly_1_1u128.html" anchor="a57515f8494c9aadd9b10c2273e4eb49ba2c34788af99f9ca074434e362d584d54">hexadecimal</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a56f3eedc54ec61aea5c7748804574f20</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a983e071191c75316861d77d4b6a4de18</anchor>
      <arglist>(u128 const &amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a1c125b9f24cf64cd7b4e30bda8405189</anchor>
      <arglist>(u128 &amp;&amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>acfa0ba7f311c388c6666ee307eba03a2</anchor>
      <arglist>(u128 const &amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a37c156ed282a4a98d02cdd6ae41839c5</anchor>
      <arglist>(u128 &amp;&amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a0950d8e25ba931599a2660fa88dde59e</anchor>
      <arglist>(u64 upper, u64 lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>af84ac7b8b9417f88a90a34e644f204bb</anchor>
      <arglist>(ulonglong lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a5a6d2775eff9b591f653d52859d6b10f</anchor>
      <arglist>(unsigned long lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a70ff364bb4d7aab5730d6b47bf851286</anchor>
      <arglist>(unsigned int lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ae3f6f6015c0a6d6a75a3da470e8f480a</anchor>
      <arglist>(unsigned short lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>aa07fe2b8f7246f0d40c889790065cae0</anchor>
      <arglist>(long long lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a8b5b820e3f355f3fca1cd7b997bfa2cf</anchor>
      <arglist>(long lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a7ef3803883ad6e82f5ac1533fec3c231</anchor>
      <arglist>(int lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a912ea23ac3aa9f75f00b317524b20527</anchor>
      <arglist>(short lower) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a5de0df8d6e71e6c3b570d70b7f956f55</anchor>
      <arglist>(double value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ade1da51b3ffea5071c509e1f0872c389</anchor>
      <arglist>(long double value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>u128</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ab229d88076749b04d2df3de321916fd5</anchor>
      <arglist>(float value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u64</type>
      <name>lower</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>acf1d94f56239db19d560593d91eca720</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u64</type>
      <name>upper</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ab8bf533976ca0c7820b43b78bcf9ece5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>hash</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a2a71158f71b82a9fa7c1adcb99b6125c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a2424c94665f59a9636ee0c2d5335f99b</anchor>
      <arglist>(u128 &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a4eb21be5feb24c9fe1801b98ea6db136</anchor>
      <arglist>(format fmt=format::decimal) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ac7c369a2d5703d0bd95421401390d0c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator ulonglong</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ab8d00fdf24e4749a5bbe13982ad209e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator long long</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>aa498dc2ca54314007a0e25dd1644ed20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator unsigned long</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>adb8d72a55bea860bdecff7829f7d33a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator long</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a942926d823ded16119015f347d27c1ca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator unsigned int</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a0d71f5b05f389e057472e76077096595</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator int</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a677951fa1e84455e0de2820f56d4c3a1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator unsigned short</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ac1592238e31d76a03164b20832b48bd5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator short</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ae4d128163e2dd8f5af4e2050d177c4a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator unsigned char</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ad37d0eab25557f95b0cac317992287c6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator char</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a285f85b3acb2a8ee6c2c397977f66f0e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator signed char</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a62f02b31c08fccaa9115d8c21533e81f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a02ac8fc2fb320d0d15829839d7bb4d19</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>acf8b2883c82aedf58b7bb838eef14aa2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>af16395fdcc0d0675d0dc9d71a44ade18</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a94d142b41b258c692ac85da4f05b6677</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator-=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>abd4dd717dde2b6948155c52415816b4b</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a684efe2c68a1b0fd19b9f9284fdc210a</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator/=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a0b620e867c29409a5935e0992b54c8f3</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator%=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a0e180ec09b7dbd58d6257e3567713f39</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a933eb1f940ac3b1ddff9c95aeb987516</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator|=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a350d642bffefbe7d946a872c16fc1149</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator^=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a203c2198f685d6cfcc8b71b5aa89e2cf</anchor>
      <arglist>(u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a76b5678d692d1e80b353fd4050d434de</anchor>
      <arglist>(T shift) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>af5786f767c2d1fbd4eb1b46a8169a60a</anchor>
      <arglist>(T shift) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator+</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a516043db292c4396c3621ddca11161d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator-</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a36bc202da4e07d6625c73df2fb77e61a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator~</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>af4e676bd6e6095cac6e3491cefcce12e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator+</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>aca0a30e6b449cbb4ec18a0ac021a5ebc</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator-</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a205673e3f7687a9237460c115cb8253c</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ace53b110809a1fddc61386e5a31ebb0e</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator/</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a5364a151e8b04a903afda4969bd27a96</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator%</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>acd26200d8c6901e3d8a44bbf0026cd97</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator&amp;</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a626ec3fbe554fe62759ab4e843abe967</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator|</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>afdd2d0f82bdb5156943518d8ca079fae</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator^</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>abaaa9e51cf42be6c4dc153994ac9ea87</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a7c298bd8900bbaa28c0ac4503ceec96f</anchor>
      <arglist>(T shift) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a53b3b95b2b87a121fbd26d3cfe3a186b</anchor>
      <arglist>(T shift) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator++</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a23b9b4309d540b649864b0f9ad01c6c8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128 &amp;</type>
      <name>operator--</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>acc1720341352aaed28d25ae1479f369c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator++</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a9669d33b615350d37436380de90e607c</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator--</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a938cb7cd22fa1eafb5c7d8b295d3c4f8</anchor>
      <arglist>(int) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a80da0ff54f477fefe2beea03d3794159</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&amp;&amp;</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a180be1391d2f118db7441e5ec864fc2d</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator||</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a23aa4c631167dfd83c9bc511ab2a515c</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ae0ced0130cea2f4fd550dcc7645f3448</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ae75fe87d2c3fe49301fc680e2ae487bc</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ac6e42e1e424ca17dc61058fb80ef1eab</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a2639a94e5c65e2926e0dcc2f4da7116c</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a01515e70e719d8208e8a9f10f78285b7</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a33d2bfa03758f5530a1c2f0701382421</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ac59e4b022028003260068c62bf410512</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a7a128b70b83db90a8bc055700f513b1b</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a73783dac59945740c39c2f5971e0f791</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a427e68238a541d697eb4477b1ac960eb</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>ae2f330c83c74c6f0682865d6c7d2eb7d</anchor>
      <arglist>(T lower) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>afb3b85b208ac2ec528e4872b55c131bd</anchor>
      <arglist>(u128 const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static optional&lt; u128 &gt;</type>
      <name>from_string</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>a4d6bf3cbf95d742a28c8aa34cc17806c</anchor>
      <arglist>(std::string const &amp;str, format fmt=format::decimal) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr optional&lt; u128 &gt;</type>
      <name>from_string</name>
      <anchorfile>classrolly_1_1u128.html</anchorfile>
      <anchor>aa0993aa6ad5543ba76b50e46136c3673</anchor>
      <arglist>(T const (&amp;str)[N], format fmt=format::decimal) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::utf16_reader</name>
    <filename>structrolly_1_1detail_1_1utf16__reader.html</filename>
    <templarg>typename T</templarg>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf16_next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>a49339e1e3b8bf16f147ef26be03127c4</anchor>
      <arglist>(T const *&amp;it, T const *end, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf16_code_point</name>
      <anchorfile>structrolly_1_1detail_1_1utf16__reader.html</anchorfile>
      <anchor>aba6ac2e9ef09ac43ef510ae45955d105</anchor>
      <arglist>(uint16_t value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::utf32_reader</name>
    <filename>structrolly_1_1detail_1_1utf32__reader.html</filename>
    <templarg>typename T</templarg>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf32_next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1utf32__reader.html</anchorfile>
      <anchor>a1ddec526755b94f39e3025df4a87520c</anchor>
      <arglist>(T const *&amp;it, T const *, bool &amp;error, uint32_t &amp;error_symbol) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::utf8_reader</name>
    <filename>structrolly_1_1detail_1_1utf8__reader.html</filename>
    <templarg>typename T</templarg>
    <member kind="function" static="yes">
      <type>static constexpr char</type>
      <name>utf8_next_or_error</name>
      <anchorfile>structrolly_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>a4eb15b20269e7952f374397fc59776ab</anchor>
      <arglist>(T const *&amp;it, T const *end, bool &amp;error, u32 &amp;error_symbol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr symbol</type>
      <name>utf8_code_point</name>
      <anchorfile>structrolly_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>ae71c3c03ac99df70ccf5342d670e65ab</anchor>
      <arglist>(uint8_t byte, bool &amp;correct) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr u32</type>
      <name>trailing_utf8_code_point</name>
      <anchorfile>structrolly_1_1detail_1_1utf8__reader.html</anchorfile>
      <anchor>aa12171b672ea0528fedf33e4fdfc4906</anchor>
      <arglist>(T const *&amp;it, T const *end, bool &amp;correct) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::vector2d</name>
    <filename>classrolly_1_1vector2d.html</filename>
    <templarg>concepts::num T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a479e391538b7e83bfcf5052392b8dbbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size2d&lt; number_type &gt;</type>
      <name>size2d_type</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a6eaf51912aa86e932f62c923e5cdcb26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>point2d&lt; number_type &gt;</type>
      <name>point2d_type</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a62d6dcd4379ed25b805387dfdf2227e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>angle&lt; number_type &gt;</type>
      <name>angle_type</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ad9bf86ff8aa59cd623d659a6fe141a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a6186cb2c5ee7a5c6061c1cad314145cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a65663530e485a5790a168456b70fea7e</anchor>
      <arglist>(number_type x, number_type y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a168d1e63d45fc7051f114aaa5d8bde04</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ab3908675aba12bb9b6274ca23e50884c</anchor>
      <arglist>(size2d_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>aeef22c96b55383af7d79a7962ae0b734</anchor>
      <arglist>(point2d&lt; T &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ac21c1e70fe3d2efd233e8cd3a18de4e2</anchor>
      <arglist>(F &amp;&amp;fn) const -&gt; std::enable_if_t&lt; std::is_invocable_v&lt; F, number_type &gt;, vector2d&lt; decltype(fn(std::declval&lt; number_type &gt;()))&gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>zip</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>aa6a5245eca3fa803e8df706b49b47861</anchor>
      <arglist>(vector2d const &amp;other, F &amp;&amp;fn) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d_type</type>
      <name>to_size2d</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a352dbf12be644f9d202935492d898a7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d_type</type>
      <name>to_point2d</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a8e3b4967d0a390fc17ea15d5d3181f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>length_squared</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a818f959f2e48773332b1f432e793c8fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>length_scalar</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a4a0a282d9b6543093f8f688d505ea92d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>inverted</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ac976f15207447dfc333a144931c58f38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>x</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a79fe2cee2f25b534740732234d06ff63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>y</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ac73d3fa73e2f1d78d63a612cbe70e100</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>x_mut</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a442de40afb37931bfda40f8fc187c57c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>y_mut</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>aac9c880da97af41c75df7b2055d823b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a5c4b91760a66d7ffbd60a6d9f3263578</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; number_type, 2 &gt;</type>
      <name>to_array</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a335125456153389c795f13f9125cbd2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::tuple&lt; number_type, number_type &gt;</type>
      <name>to_tuple</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>abc3df5cd71f7f583e7e256dae3fd54dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; number_type, number_type &gt;</type>
      <name>to_pair</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a392508bab043a7f660e34591e3abd551</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>round</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ab5ade866667c19af751cd530f93a702a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>ceil</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a1f062c74728cdf18cab5bf0a229352d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>floor</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a2728ab2065338796e1ebaacf60eb8ca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>lerp</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a44ed599530a7982b1b3489c5702f7d11</anchor>
      <arglist>(vector2d const &amp;other, f32 t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>max</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a173b074365c2236e081919eeb380c7d2</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>min</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a9f0fa14c2c3f024287f468e00c3a6c5e</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>clamp</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a3fe2bce0effd5506967a4cd4f051fc5e</anchor>
      <arglist>(vector2d const &amp;start, vector2d const &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>dot</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>afbedc640802cb2d7dcaedbadfbdb807c</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>af6e10a384bac68ac40c0df784bcfde0c</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>abs</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a35d39eeb6b7c318efae6100633971587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>project</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ae0532fe8a1821018b7afa029593ebe00</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a996363fc6af45aa3ee1111ca1561cae8</anchor>
      <arglist>(T const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_finite</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ad8d828b31ed929918a972b50ff341ff0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_positive</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a2d3cad87711ca157d75c19a656987fae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a5930fb38f3d81c9fcb88e9ac21a779ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>afe063857edfdb9aea3ef5db79be840ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle_type</type>
      <name>angle_to</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a51e979e703e5489497c3895a3e88f2d9</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle_type</type>
      <name>angle_to_x_axis</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>aa3d96131610a4aad9ceada3b72f94987</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>normalized</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>af34eab3934a4e3da81344cea189b06f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>reflected</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>adf51b2b61e67e0f5f86fdb80aaa27afc</anchor>
      <arglist>(vector2d const &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; T2 &gt;</type>
      <name>cast</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a99f58897a6bd0d47e5ca8067983e7a40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>to_f32</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a4ab6b3468fc9f0a99f6279b325d33417</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; f64 &gt;</type>
      <name>to_f64</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a02f1cef9a87e3624fa1728eaa2f4ef04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; u32 &gt;</type>
      <name>to_u32</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a26403ac121468711d7b257454e343bf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; u64 &gt;</type>
      <name>to_u64</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>abb0a4e21ff57d0a89dbf65e24beecc31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; usize &gt;</type>
      <name>to_usize</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a2088b3fc97acdc0a2cb830a871e127a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; i32 &gt;</type>
      <name>to_i32</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>af6a46cf63fa51e7e0434d53ba70c8ab8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; i64 &gt;</type>
      <name>to_i64</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ab49da20ab1d38453b03c7143baec0c12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; isize &gt;</type>
      <name>to_isize</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ad0199fdce3af7886e53126eaf0fff2bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator+</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>af0caf4e1099378c7ae601628187de263</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator-</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a8075dbb1340f6c32219ccd97501ce979</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a529552b4b4caf27f84e97dd657328abd</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator+</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a1441c5e7af84ac75f2b79b685b1ef6af</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ab894986c3198991ead3809c2b5c50631</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator-</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a6de1ee0820dcb0e1b8ecc213f999435e</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ae36302ac4b02468370a790496f3deef5</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator/</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ac21d6454a76ae78610599738f303d4cb</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator+=</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ac1ec720d7b0fcf239267b78dbbcce1d9</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator-=</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a6747987a07dfe9b02afc64abedfc4c92</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator*=</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a15f0d327e5116c2aa8ac00f620f0af46</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator/=</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ac079728ad265dbd71c0c65e50dc6e439</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a4792e8c8cdc4f61452d1ce324005bfff</anchor>
      <arglist>(QVector2D const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr QVector2D</type>
      <name>to_qvector2d</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>a559e9d52793d953291973848a8e73449</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>zero</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>aaa3cac815b4ff30957de520db7274ea9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>splat</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>aa7d39b2e5bc6fa8208d0037b66e53f16</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>from_tuple</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ad553db546af553d5292f96e11504fee6</anchor>
      <arglist>(std::tuple&lt; Args... &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>from_array</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>acee3243cfe2f3cf66278a21914a9c758</anchor>
      <arglist>(std::array&lt; number_type, N2 &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>from_pair</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>af360ee7588c2a271ae75ae92f5829e59</anchor>
      <arglist>(std::pair&lt; number_type, number_type &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>one</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>af89e23e4a1eee76514c74e1701e8cf6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>from_qvector2d</name>
      <anchorfile>classrolly_1_1vector2d.html</anchorfile>
      <anchor>ada9a862a5b5cfc83c374c3b6a48ef2fd</anchor>
      <arglist>(QVector2D const &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::velocity</name>
    <filename>structrolly_1_1velocity.html</filename>
    <templarg>concepts::num T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ac3f8bdbdb79ed10a68122fada64f2f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a518eb50a79e78b241fa058bb0b23564d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ae5afaf8353d4d35c732ad29a344f1f40</anchor>
      <arglist>(number_type const value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~velocity</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a8536e4af6375d926b489ca2333a60fbf</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a54818734089d5b29a9f116f05c56f5c0</anchor>
      <arglist>(velocity const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a2df9e8c45daf57ae6d3da42a66a4dc2a</anchor>
      <arglist>(velocity &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>af3c41d79a0cf701d40c1dfd1d42273be</anchor>
      <arglist>(velocity const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>acb4c6282e7c55c5930f5236cd7c23af1</anchor>
      <arglist>(velocity &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a213ddf6287a7e672df04536f9e9e0ede</anchor>
      <arglist>(velocity_unit u=velocity_unit::meters_per_second) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>in</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a8f675f4cd0dff5c3636a5b6afa5bb187</anchor>
      <arglist>(velocity_unit u) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>kmph</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ad6c6db899f84d69b6967fa78c4440ef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>mps</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>aed54c874475961d9c91292e118be81c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity&lt; U &gt;</type>
      <name>cast</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a5650e788f5f04c061708041b04f12c10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>value</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a5341639837ae29450368bdc7da2ecafa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr U</type>
      <name>as</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a313996a8157b750aa54bc9da263545b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f32</type>
      <name>as_f32</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>afdf9bb9ce3fbaf6ac3cb53487fe8ec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f64</type>
      <name>as_f64</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a8bdcae16154813d0117cb872fdacd9b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>afc4161dd29d75a29d0bae518bc141c6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a7cebe75615d2e0707b716d4b5e862c8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a8654c949816b41603b0cb05a7ce495fe</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a2dd9755527a0fe2973e5140c3a102827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a2da01d015d56e0cc96998487f9955418</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a52c1a0d13e70d2c8d8b26c50dbc20347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator number_type</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a2dbbbce8cf2ce96aa1a25cb635742ae2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ac1c9b021e94234956b3e513b439fb2d1</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a0f9ba8605bdd459619fac7aebb0e4cc4</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a37543fb069d764301c0f9fd2e377f9e3</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ac0196ba8ba56aab8bb1b4e25dbc0da9f</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a09bb18daae621c9054e5537e9ab8a9ac</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a05b60d2111d538c2bd5fedafad4bed4a</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ae67cb7fa396c6d2d25a220c100c93eb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>aca217bb30a4e26edaaa594c4225bbdf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>aad3f6a194436e75b0f7f09412ad54200</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ad2ad325520b46665cd3fd4c1743f128a</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a564f3de0573836d1baf00c6ad08141c1</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a40852a14240af82d9927d895826988bc</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a23b50137d7a6f523b6200a09002b0b2f</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>abaa3d63526908d0ecb669b7d25f12cfe</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a77c8fab315893c7a8131e7073c3acc9d</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ae9f8a24d59dc251b09d4afe27919a946</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>abb18fbab0d1f1205faf328e94ede97f9</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a209d6da779127ff174af38433a3a7e43</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a2809189e667c946bc09403aac82710d7</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ae67201bdb445c5f7ad4d85598314631f</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ac9eecc164cf576bd62ecef9ef7a390e8</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a4b1fd126a65836d99ea1ec3657bed7bf</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a62f34ca70462e0752b560f48f3a82f97</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>af98b506c9c13dbb60aa608342049b8c2</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a8f60abc76931b7060fe85eeb6e8c504d</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>from_kmph</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ac068d46e91df617e7c7a6694a8f51665</anchor>
      <arglist>(number_type kmph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>from_mps</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>a2bdf661ce4f5dc60257ec2d3235d69ca</anchor>
      <arglist>(number_type mps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>from</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>af69e3d850302cefe0d45903f4017f40f</anchor>
      <arglist>(number_type value, velocity_unit u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>zero</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>ad9e2ab9bc901b244ca58ddecf549e012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structrolly_1_1velocity.html</anchorfile>
      <anchor>aa0c055ac678514427fa9361c636bfc57</anchor>
      <arglist>(std::ostream &amp;os, velocity const &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::version</name>
    <filename>structrolly_1_1version.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a93ce52bdc8f7bfc3ab10ffe1667d66b7</anchor>
      <arglist>(std::uint16_t mj, std::uint16_t mn, std::uint16_t pt, prerelease prt=prerelease::none, optional&lt; std::uint16_t &gt; prn=nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>af441ce37f4a8505e665e38916c6587b0</anchor>
      <arglist>(std::uint16_t mj, std::uint16_t mn, std::uint16_t pt, prerelease prt, std::uint16_t prn) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>af0e8ce1a9120a89d188e64dfe9ff3574</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>ad280dbc639d20d7c58076ee4fed3eb6e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a6931ec5695038832defb3d4c37e0c4cf</anchor>
      <arglist>(version const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>version</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a4fecdd170bc5d3e3250f72d861da24e6</anchor>
      <arglist>(version &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~version</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a4d4044b2a3beeda5ff349a12531729b6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>version &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a546a866370e919f203ea00e8a659efb6</anchor>
      <arglist>(version const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>version &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a7cb7debb5bedad5695e420ddae09317e</anchor>
      <arglist>(version &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr from_chars_result</type>
      <name>from_chars</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a6b8b497269869193d202636a59baa03d</anchor>
      <arglist>(char const *first, char const *last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr to_chars_result</type>
      <name>to_chars</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>af4fc7d5e377c63414067e0cc475fc220</anchor>
      <arglist>(char *first, char *last) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>from_string_noexcept</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a7e50b918a639074109b5c5adca8ecfe1</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr version &amp;</type>
      <name>from_string</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a5565324a5dc695e9cb50426ebcb7429d</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a03287025919d5c6ae8842e2678c12280</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::uint8_t</type>
      <name>string_length</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a6df3112567c86aade9b7a905df98daeb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a3b069e2bb71d81a1d0b4a219d12e1048</anchor>
      <arglist>(version const &amp;other) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>std::uint16_t</type>
      <name>major</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>ad9344d7056281a53fd124ef8ab57950b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint16_t</type>
      <name>minor</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a1b1b75641c4316b8d5b56eb6e900d6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint16_t</type>
      <name>patch</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a1c485839ec0dc913971c7b16ac2a07ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>prerelease</type>
      <name>prerelease_type</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>ae1a52dcf84491d4e6221400fb0d7fa5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>optional&lt; std::uint16_t &gt;</type>
      <name>prerelease_number</name>
      <anchorfile>structrolly_1_1version.html</anchorfile>
      <anchor>a29b4f1b2681ee52396c5adb667826104</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::xml</name>
    <filename>structrolly_1_1serialization_1_1format_1_1xml.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::yaml</name>
    <filename>structrolly_1_1serialization_1_1format_1_1yaml.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::any_of</name>
    <filename>conceptrolly_1_1concepts_1_1any__of.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::basic_lockable</name>
    <filename>conceptrolly_1_1concepts_1_1basic__lockable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::c_ptr</name>
    <filename>conceptrolly_1_1concepts_1_1c__ptr.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::enum_</name>
    <filename>conceptrolly_1_1concepts_1_1enum__.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::lockable</name>
    <filename>conceptrolly_1_1concepts_1_1lockable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::mutex</name>
    <filename>conceptrolly_1_1concepts_1_1mutex.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::num</name>
    <filename>conceptrolly_1_1concepts_1_1num.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::ptr</name>
    <filename>conceptrolly_1_1concepts_1_1ptr.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::ptr_like</name>
    <filename>conceptrolly_1_1concepts_1_1ptr__like.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::qgadget</name>
    <filename>conceptrolly_1_1concepts_1_1qgadget.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::qobject</name>
    <filename>conceptrolly_1_1concepts_1_1qobject.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::shared_lockable</name>
    <filename>conceptrolly_1_1concepts_1_1shared__lockable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::shared_mutex</name>
    <filename>conceptrolly_1_1concepts_1_1shared__mutex.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::shared_timed_lockable</name>
    <filename>conceptrolly_1_1concepts_1_1shared__timed__lockable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::shared_timed_mutex</name>
    <filename>conceptrolly_1_1concepts_1_1shared__timed__mutex.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::smart_ptr</name>
    <filename>conceptrolly_1_1concepts_1_1smart__ptr.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::standard_copyable_and_movable</name>
    <filename>conceptrolly_1_1concepts_1_1standard__copyable__and__movable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::timed_lockable</name>
    <filename>conceptrolly_1_1concepts_1_1timed__lockable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::concepts::timed_mutex</name>
    <filename>conceptrolly_1_1concepts_1_1timed__mutex.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::serialization::deserializable</name>
    <filename>conceptrolly_1_1serialization_1_1deserializable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::serialization::serializable</name>
    <filename>conceptrolly_1_1serialization_1_1serializable.html</filename>
  </compound>
  <compound kind="concept">
    <name>rolly::serialization::serializable_and_deserializable</name>
    <filename>conceptrolly_1_1serialization_1_1serializable__and__deserializable.html</filename>
  </compound>
  <compound kind="namespace">
    <name>fmt</name>
    <filename>namespacefmt.html</filename>
    <class kind="struct">fmt::formatter&lt; QByteArray &gt;</class>
    <class kind="struct">fmt::formatter&lt; QChar &gt;</class>
    <class kind="struct">fmt::formatter&lt; QLatin1String &gt;</class>
    <class kind="struct">fmt::formatter&lt; QPoint &gt;</class>
    <class kind="struct">fmt::formatter&lt; QPointF &gt;</class>
    <class kind="struct">fmt::formatter&lt; QString &gt;</class>
    <class kind="struct">fmt::formatter&lt; QStringView &gt;</class>
    <class kind="struct">fmt::formatter&lt; rolly::angle&lt; T &gt; &gt;</class>
    <class kind="struct">fmt::formatter&lt; rolly::guid &gt;</class>
    <class kind="struct">fmt::formatter&lt; rolly::point2d&lt; T &gt; &gt;</class>
    <class kind="struct">fmt::formatter&lt; rolly::size2d&lt; T &gt; &gt;</class>
    <class kind="struct">fmt::formatter&lt; rolly::source_location &gt;</class>
    <class kind="struct">fmt::formatter&lt; rolly::u128 &gt;</class>
    <class kind="struct">fmt::formatter&lt; rolly::vector2d&lt; T &gt; &gt;</class>
    <class kind="struct">fmt::formatter&lt; rolly::velocity&lt; T &gt; &gt;</class>
    <class kind="struct">fmt::formatter&lt; rolly::version &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>rolly</name>
    <filename>namespacerolly.html</filename>
    <namespace>rolly::comparators</namespace>
    <namespace>rolly::concepts</namespace>
    <namespace>rolly::contracts</namespace>
    <namespace>rolly::detail</namespace>
    <namespace>rolly::io</namespace>
    <namespace>rolly::literals</namespace>
    <namespace>rolly::meta</namespace>
    <namespace>rolly::net</namespace>
    <namespace>rolly::numbers</namespace>
    <namespace>rolly::oslayer</namespace>
    <namespace>rolly::qt</namespace>
    <namespace>rolly::rtti</namespace>
    <namespace>rolly::serialization</namespace>
    <class kind="struct">rolly::angle</class>
    <class kind="class">rolly::application_dirs</class>
    <class kind="class">rolly::bad_optional_access</class>
    <class kind="class">rolly::box</class>
    <class kind="class">rolly::compile_time_error</class>
    <class kind="class">rolly::configuration_file</class>
    <class kind="struct">rolly::const_overload_t</class>
    <class kind="struct">rolly::deleter</class>
    <class kind="class">rolly::deserialization_error</class>
    <class kind="class">rolly::dirs</class>
    <class kind="struct">rolly::fixed_string</class>
    <class kind="struct">rolly::fixed_string&lt; 0 &gt;</class>
    <class kind="class">rolly::guid</class>
    <class kind="struct">rolly::is_any_of</class>
    <class kind="struct">rolly::is_num</class>
    <class kind="struct">rolly::is_qgadget</class>
    <class kind="struct">rolly::is_qgadget&lt; T, std::void_t&lt; decltype(T::staticMetaObject)&gt; &gt;</class>
    <class kind="struct">rolly::is_qobject</class>
    <class kind="class">rolly::library</class>
    <class kind="struct">rolly::non_const_overload_t</class>
    <class kind="struct">rolly::noncopyable</class>
    <class kind="struct">rolly::nonmovable</class>
    <class kind="struct">rolly::nullopt_t</class>
    <class kind="class">rolly::observer_ptr</class>
    <class kind="class">rolly::optional</class>
    <class kind="class">rolly::optional&lt; T &amp; &gt;</class>
    <class kind="struct">rolly::overload_t</class>
    <class kind="struct">rolly::pin</class>
    <class kind="struct">rolly::plain_type</class>
    <class kind="class">rolly::point2d</class>
    <class kind="class">rolly::propagate_const</class>
    <class kind="struct">rolly::remove_cvref</class>
    <class kind="class">rolly::savefile</class>
    <class kind="class">rolly::serialization_error</class>
    <class kind="struct">rolly::singleton</class>
    <class kind="struct">rolly::size2d</class>
    <class kind="struct">rolly::source_location</class>
    <class kind="class">rolly::u128</class>
    <class kind="struct">rolly::vector2d</class>
    <class kind="struct">rolly::velocity</class>
    <class kind="struct">rolly::version</class>
    <member kind="typedef">
      <type>std::integral_constant&lt; int, static_cast&lt; signed int &gt;(endian::big)&gt;</type>
      <name>big_endian_t</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a4504620db7c20d2f085fa27462bfca6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; int, static_cast&lt; signed int &gt;(endian::little)&gt;</type>
      <name>little_endian_t</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a1ccc957173862b3a45f8a14667e54e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; int, static_cast&lt; signed int &gt;(endian::native)&gt;</type>
      <name>native_endian_t</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a6b13a322841ccffe0064ee934973831a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename remove_cvref&lt; T &gt;::type</type>
      <name>remove_cvref_t</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ab7624cd1f63aac65902e044449e16342</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename plain_type&lt; T &gt;::type</type>
      <name>plain_type_t</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ac4eceae28c6465627e4f65c23cfd469d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::range</type>
      <name>version_range</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a584dbcf301b30e778639789a289138eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::satisfies_option</type>
      <name>version_range_option</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a987e85c99bdfd80f8d679bfd843f5a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>owner</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a9528c33169bb2f137c39a920f54b96ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>propagate_const&lt; box&lt; T &gt; &gt;</type>
      <name>pimpl</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a2a2c0e15f758b58c995bc3d76ee99a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>expected&lt; T, std::string &gt;</type>
      <name>result</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a0255dc22318d076cc83f8bf30c2e80e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>u8</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aeba77391e8c1d012bdca20aa258dbb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>u16</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a6fdd2b8f43caf1f38cc00441668c8731</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>u32</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ae58032b87dd7559b4ed3ebaeb5103f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>u64</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aac94783cc47e079016ddf8febbe6ec50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int8_t</type>
      <name>i8</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>abb60ba22f4b0d878b95a04fc9bb626ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int16_t</type>
      <name>i16</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a282a33dcfe4296a56870438932f67de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>i32</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a0613b8681902816fdcdc73c43f63f4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int64_t</type>
      <name>i64</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a041fac893319157986c4b3401b6dc57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>usize</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a3df657e88ac4c9c426dbcee628cae126</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::make_signed_t&lt; std::size_t &gt;</type>
      <name>isize</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a5e28a6bbc991ec0a051c6992c9f574aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>f32</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a152324f2b6dcec1fadbd8031305f32ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>f64</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a903918df9dc8f640744f704478a1dd60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>f128</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a0686b1514d9395374c6fbeb057e0c163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uintptr_t</type>
      <name>uptr</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>afeb91978d397e4bfbc15b5f4af8cd602</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>ulonglong</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a54b08e0f75f9ed4df3151c483beda659</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a1cd9822ac2949b026e60bb071cd15b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>endian</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ac7cdc6b5c251d10552f5045575a0580c</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly.html" anchor="ac7cdc6b5c251d10552f5045575a0580caaae6635e044ac56046b2893a529b5114">little</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="ac7cdc6b5c251d10552f5045575a0580cad861877da56b8b4ceb35c8cbfdf65bb4">big</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="ac7cdc6b5c251d10552f5045575a0580ca8e5f3adee38c8fccc13c1f3be0143796">native</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>saving_policy</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ac4bf2b45713c4d7bd82bb507dba9f8e4</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly.html" anchor="ac4bf2b45713c4d7bd82bb507dba9f8e4af47468435c3051a65ef52dbe8a7838b1">autosave</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="ac4bf2b45713c4d7bd82bb507dba9f8e4ac9c45ac5595e1bb329ad8e26396d93c5">explicit_</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>prerelease</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ab12d4bae3ecbda6e2b10e0fba7d8e648</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly.html" anchor="ab12d4bae3ecbda6e2b10e0fba7d8e648a2c1743a391305fbf367df8e4f069f9f9">alpha</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="ab12d4bae3ecbda6e2b10e0fba7d8e648a987bcab01b929eb2c07877b224215c92">beta</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="ab12d4bae3ecbda6e2b10e0fba7d8e648aff78648be52a4e79513f4e70b266c62a">rc</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="ab12d4bae3ecbda6e2b10e0fba7d8e648a334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>angle_unit</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a1ef5cf866981708019524f955c104e78</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly.html" anchor="a1ef5cf866981708019524f955c104e78a18daee01fc6e54aacd7f4c2eef60ff4d">degrees</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="a1ef5cf866981708019524f955c104e78a017969ba49117264eb077e9f66daacfd">radians</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>velocity_unit</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ac7a89eba9cc9436bf76cec90caae83dd</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly.html" anchor="ac7a89eba9cc9436bf76cec90caae83ddac01a692efdbdbc7211b76bb9309a48a1">kmph</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="ac7a89eba9cc9436bf76cec90caae83dda7c1dc91629afef3369fc77b119a2e24d">mps</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="ac7a89eba9cc9436bf76cec90caae83dda400b6d1abbad6e83b994800d62c03fee">kilometers_per_hour</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="ac7a89eba9cc9436bf76cec90caae83dda7355df818aff8043f3acaeda426ae396">meters_per_second</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>popcount</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>acff9d9efd89a63de839148c38a70b18e</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_single_bit</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a69c37f401a2c55888c204cd7b1d34d8d</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_pow2</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a7a6bbd45c5bf9fd61f5f1193dec3d1b7</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_ceil</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ae56c0de6a4febc6756771ad0c19619d3</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bit_cast</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a99bfcde93b3d479813abecbbc877a5c0</anchor>
      <arglist>(From const &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>byteswap</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a50b397be3a6964a1f150ceb189afabb5</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_big_endian</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a5764cccca8658c6880ab03364b4fcda5</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_little_endian</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a571786331157b178e73d2ac05d14751b</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>floor</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ad2f11653a1f9c5790c68c9bff6736fe9</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>min</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a5b98624b673f093ec94d6c9d704e6c88</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>min</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a68311854e6306529fd83069a4be0f4c7</anchor>
      <arglist>(T const &amp;v1, T const &amp;v2, Args const &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>max</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a56f6504ee90c3400cb30a212859dad6e</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>max</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a646a733c4a45d90162dd0f797ebce7a7</anchor>
      <arglist>(T const &amp;v1, T const &amp;v2, Args const &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>abs</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a3c24df2ef8c96d19b8d27cd38bcbd1f4</anchor>
      <arglist>(T const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr f32</type>
      <name>fmod</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ab3895bc21fa85a50d1501f4f9a08668b</anchor>
      <arglist>(f32 const x, f32 const y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_radians</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a59a0a4901ad339f067edc6802cd6a873</anchor>
      <arglist>(T degrees) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_degrees</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>afc9186a6c457254e3f39fbbff6955acd</anchor>
      <arglist>(T radians) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_eq</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a67b25e22f418563e062c7b135dafb712</anchor>
      <arglist>(T a, T b, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_null</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aefe004fcb2934d477d73fc646fdf1f07</anchor>
      <arglist>(T a, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>div_euclid</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a36212a27eae72633e6e688b36c625cac</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rem_euclid</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>af816d94e9bd5fba1c8aee7025fa2f7db</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; E, T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a2e9262bca9196d89c7f018f8e5419816</anchor>
      <arglist>(std::basic_ostream&lt; E, T &gt; &amp;os, source_location const &amp;loc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ac8e7afed7eafff55cdb28549abe23c74</anchor>
      <arglist>(source_location const &amp;lhs, source_location const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ae7474ad0df463e7fc1cb98605706c3bb</anchor>
      <arglist>(source_location const &amp;lhs, source_location const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>af9de7f5d441b55d449cb81c317e2ff94</anchor>
      <arglist>(std::string const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a6f5c531c898bba9d7131eaf2157a9109</anchor>
      <arglist>(std::string_view input)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split_by</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a5f4e3471bf041a8adfbdd59c45227653</anchor>
      <arglist>(std::string const &amp;input, char delimiter)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split_by</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a6511cc9f4897d6c13eec4889940906f6</anchor>
      <arglist>(std::string_view input, char delimiter)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_lower</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a4cee505f1280fd2a0f8354e2efd7fd01</anchor>
      <arglist>(std::string_view input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a92f9cae32654fc69e69e56418a20c551</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a7f7b41082b35952624e4871f8ae855ed</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, C c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a9adf9e794ef1d06475cdfd66dd6a6b57</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, C const *chp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a52f0f95f66a33f7d0b9198eaa16d5443</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a14d506298003ef35c958fe68476f4066</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, C c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a1ca483b4bf62bac4fa78ebf1c7795c04</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, C const *chp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aea74ed9754268ce0924b9578ff6cd02c</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a0d34216c96023f88cd65d547a38b1616</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, C c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>acddd0f67ccfd58a04d5321b3dc5647ee</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;input, C const *chp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a933cca7a9de88df2acc76cc8a2f3d488</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, std::basic_string_view&lt; C &gt; sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a03f2f18b9050b2aa9a69a73fed3806c4</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, C c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a1c635fda25cb408b341062ad44576c45</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;input, C const *chp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>from_c_str</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a291b9522a9622bbdd81d59769ef184b7</anchor>
      <arglist>(char const *owned_str, int const size=-1, F &amp;&amp;dealloc_function=[](char const *ptr) { std::free(const_cast&lt; char * &gt;(ptr));})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreachable</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a50d147e6e631344b3cde7c0675356297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>to_underlying</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>affa14ea3afee7f187363d2bb66d8c619</anchor>
      <arglist>(T t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>operator|</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ac1f30f214b3038aa0ededae9c295ac0f</anchor>
      <arglist>(T const lhs, T const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>operator&amp;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a1917d3392b37450a26edb38ecd5e0134</anchor>
      <arglist>(T const lhs, T const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>operator^</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a22e0e009d7a549f2cd8b41833acef692</anchor>
      <arglist>(T const lhs, T const rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>operator~</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a856dacdd4757c9c22fdf4948f1c6c957</anchor>
      <arglist>(T const value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lazy</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a702fe0cca3278589eeca41da81cd2e5b</anchor>
      <arglist>(F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>detail::scope_guard&lt; Callback &gt;</type>
      <name>make_scope_guard</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a5aa946820f9503bcdc29dba00a44bb01</anchor>
      <arglist>(Callback &amp;&amp;callback) noexcept(noexcept(detail::make_scope_guard&lt; Callback &gt;(std::forward&lt; Callback &gt;(callback))))</arglist>
    </member>
    <member kind="function">
      <type>detail::scope_guard&lt; Callback &gt;</type>
      <name>finally</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a4396c486e59b58735a5de35db1c95b77</anchor>
      <arglist>(Callback &amp;&amp;callback) noexcept(noexcept(detail::finally&lt; Callback &gt;(std::forward&lt; Callback &gt;(callback))))</arglist>
    </member>
    <member kind="function">
      <type>constexpr char</type>
      <name>to_lower</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a373760a3c5836375681456b6c51f1e93</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_digit</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a6f31057710263260dde372ac14417b07</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_space</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a68be1add7d0d715e53b0689ac056f0d2</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_operator</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aa86605562968255acbd911ed427a2e26</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_dot</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a3a9735d38642d18354f18e961f06c9f2</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_logical_or</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a011123e17c8b3dcf68f082eb03f376df</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a7694a2c16fb00e6162dec784e4ab5681</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a95a56ea6e001b20d4537755511f94436</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hex</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>adaa0a5242a018519c3cba5f3374e6c15</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::uint16_t</type>
      <name>to_digit</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a29d324f3499898f4676605869b55449c</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr unsigned char</type>
      <name>hex_to_char</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a825984fe64a698af0ae6ad819fdf1e88</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; C &gt;</type>
      <name>to_string</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a64d4eee1c96faf64701ca5a5e31c6634</anchor>
      <arglist>(T const &amp;value)=delete</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::basic_string_view&lt; C &gt;</type>
      <name>as_str</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ab7320fe62dbc411a92cbe94b2c184517</anchor>
      <arglist>(T const &amp;type)=delete</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>from_str</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aeb6cbc9c9826b7eef31366ea5d000db2</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;str)=delete</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>af5f41175811a2f4a42eca6bc6e6f01d3</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a6a0829fd71ded700e13174ae89c009e1</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ad1af20d5b7b707c993d1930a863f7760</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a8330ddf4c9dcf3b881130a2f07010c66</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a909ee63bac59a1e69a6d558596311f43</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a1bb0f54264509f56b5481cbd437b05ae</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aa2ad4f2f8a33d07fb18a9aa19a3fde67</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>valid</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a43a6c5e4f01cb4771112758397f76aad</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr from_chars_result</type>
      <name>from_chars</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a3e094602280f9449c867d0f6c9bbc487</anchor>
      <arglist>(char const *first, char const *last, version &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr to_chars_result</type>
      <name>to_chars</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a2834fcfe95156b810a03cbad2bd94f82</anchor>
      <arglist>(char *first, char *last, version const &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; version &gt;</type>
      <name>from_string_noexcept</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a9cc8d4499b7c7c6574698e006c56fdf1</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr version</type>
      <name>from_string</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a98c75a76c1498077528634a96e881023</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ad687023e3333f2a28121709aa2ec8b92</anchor>
      <arglist>(version const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ad9fbbedafdc8eb3a755ded3aec638ed4</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, version const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aabeeaf9aa00d84c95bb09cfd5fd20941</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>acd9c29fd1dfc4acb916584a7107c22be</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ab1df93f72b112c11789cfac379ddee96</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>acee4f46a0677c1eec00cb57737ecb713</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a7a824308dfef800197ebdca72ca577de</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a563f446fdf15d40728b98c5153cb8632</anchor>
      <arglist>(observer_ptr&lt; T &gt; const &amp;lhs, observer_ptr&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr observer_ptr&lt; T &gt;</type>
      <name>make_observer</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>adfdc823fe2cbbc620bc419dab406fad7</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>::QString</type>
      <name>qformat</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a61af90f5a9761bd2b28c0166c1777ac7</anchor>
      <arglist>(fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aab460bb14a8e5f2a827733b37099eedf</anchor>
      <arglist>(const char8_t(&amp;)[N]) -&gt; fixed_string&lt; N - 1 &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a05fb7167ba46982e56da16ef44eaa74f</anchor>
      <arglist>(fixed_string&lt; N &gt;) -&gt; fixed_string&lt; N &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a9718a9b68b1ca74429173dc093e538f6</anchor>
      <arglist>(char const (&amp;)[N]) -&gt; fixed_string&lt; N - 1 &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a92ff8558ce104b268d47fcd242f7905d</anchor>
      <arglist>(wchar_t const (&amp;)[N]) -&gt; fixed_string&lt; N - 1 &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>acb6c182255904ac17e7a2459624d1063</anchor>
      <arglist>(char16_t const (&amp;)[N]) -&gt; fixed_string&lt; N - 1 &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a89f411db9b22fff5fb5c691bc57b4168</anchor>
      <arglist>(char32_t const (&amp;)[N]) -&gt; fixed_string&lt; N - 1 &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_string</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a964d49de4ffdfcd6058bde16e99ee885</anchor>
      <arglist>() -&gt; fixed_string&lt; 0 &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ae42bed75bde5f4d4e4c715b00c5cdec5</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aaeabd0a43849c96e6a189456e64a9e80</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aa200248ad0ba62c49766a7f23f0ab244</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a198e1526e34437f608e39bf6b3b77f28</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aeb7fb289dc87f67607f0f9cd76de2fba</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aa469315a3b3d370d5b2e586cb681b11d</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a43e660efbbd21846c0099fd98d7e7974</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a65f34be32d65e60a6ae72cb06481d041</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a2835f5e825e9642a4ab30e9b80da8832</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a137e7622b0b5826d767aa21b10bf8a4c</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ac4d264d4fa3093b68a6fbc5d8b864beb</anchor>
      <arglist>(optional&lt; T &gt; const &amp;, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>acb7364ea0a1e0438ae84214ced329b4d</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a17605135b9c4fbe2d0d006d5cb0cb0df</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aeb5122e9a208a1d01d21b87705dd8219</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ad9721a2da6cd3210b3d12cfba5a02b9d</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aee4d261d62ca7e4c397b061c3345ffc0</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ab95b1dc683d04c96118a1b6e13862827</anchor>
      <arglist>(optional&lt; T &gt; const &amp;, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ac32dbce08b465c015066197343543a66</anchor>
      <arglist>(nullopt_t, optional&lt; T &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>acb3873114fe93ce619a39084b59b2a2f</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>adce9e5a2185ca737f529b12e7b115255</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a443a871c46e6e084799f9c8973d9e51f</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a584bd404eee977379de223dc0647e348</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>acc1d8d195c6b5a3493d65e34a9b82e2d</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a640100316b3156a07377038175c5e9e2</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a2829a36208a02c6a07fbb3bf7ea98cde</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ab70c8e8c4439a8be3e5be7b11a880ddc</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a8a7913965e6fbab14332eb19133451f3</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a436961c16e6e95f486b0ed58d9a221bf</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a1b3470d1556c16994c691b0a7af7ee48</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>acbd31892e6da85b55b99c07bf005b112</anchor>
      <arglist>(U const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ad0cdea02ac170e2603b7a4491036b298</anchor>
      <arglist>(optional&lt; T &gt; &amp;lhs, optional&lt; T &gt; &amp;rhs) noexcept(noexcept(lhs.swap(rhs)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; Ret &gt;</type>
      <name>make_optional</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a6426d9249abc7390ee229f132039b15f</anchor>
      <arglist>(U &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; T &gt;</type>
      <name>make_optional</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>af8a1887a22a4090274dcaa16b64f6e4d</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; T &gt;</type>
      <name>make_optional</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>acffb69392cf1b07eeaf1ac6b7c206d10</anchor>
      <arglist>(std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a963e15012f92afbdc50c51baa8d70f3e</anchor>
      <arglist>(T) -&gt; optional&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::decay_t&lt; T &gt; &gt;</type>
      <name>some</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ab3c3aa3451b0e2483b02fd9410936dba</anchor>
      <arglist>(T &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>unexpected&lt; std::decay_t&lt; std::string &gt; &gt;</type>
      <name>error</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a62fc8b0dee98bc134a2868b52f3fb403</anchor>
      <arglist>(std::string_view format, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>expected&lt; std::decay_t&lt; T &gt;, std::string &gt;</type>
      <name>ok</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a300227c1d5e43dae509454ea6b4e31f3</anchor>
      <arglist>(T &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>ok</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aae0ceaba6f444e0342ed34963f4a4f73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator+</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a1d83a03ba77278325fd12b53d85a5f0f</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator-</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aff04adfb2960ec099786cd99d458f18d</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator*</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a7f72790850ea3fd7bbd675c92a5238eb</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator/</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a2dab1a67991ee42436cd18d653f3e289</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator%</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ac549f130715ee7564eb221cc533a6f9b</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator&amp;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ace7884c4ea23f874bbe9e3991d19e89a</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator|</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a57ec8a297c192cdfb32baaa85d696014</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u128</type>
      <name>operator^</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ae22ca4611c3f0254a7bfc338700c5ce8</anchor>
      <arglist>(T lower, u128 const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a931750a94f9c3742afb6055416f1715d</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ac2b69c1b56b4e27b75a4b3a4cf7217dc</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ae477ea92482ff209194038953c99b843</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a27c4670fd7bd7412e482cddd40867024</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>adb577b96ad681860a20d6e7725886f35</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>afdbad094e33e205c7625ba7602f41ae1</anchor>
      <arglist>(T lower, u128 const &amp;other) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_any_of_v</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ae95015c9aa1f755f03cae96519f32dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr overload_t&lt; Args... &gt;</type>
      <name>overload</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a4f4ba6737cf6bec304e998288e3eaad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr const_overload_t&lt; Args... &gt;</type>
      <name>const_overload</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>afa8bfa913674f0d29821060e4adeeb47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr non_const_overload_t&lt; Args... &gt;</type>
      <name>non_const_overload</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>abc155221f31f28775abdf6903bbd5fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_qobject_v</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a94f3ce8b4fbecb9b79225be9c7df0f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_qgadget_v</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a2ea7ed2e255c0d73fbde0c6a9b518a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>none</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a60e11bee7c8ed7a1dbe199720957b62e</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="namespacerolly_1_1contracts.html" title="introduction">Quick</docanchor>
    <docanchor file="namespacerolly_1_1contracts.html">Usage</docanchor>
    <docanchor file="namespacerolly_1_1contracts.html">Examples</docanchor>
  </compound>
  <compound kind="namespace">
    <name>rolly::comparators</name>
    <filename>namespacerolly_1_1comparators.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>comparators_option</name>
      <anchorfile>namespacerolly_1_1comparators.html</anchorfile>
      <anchor>a7a097404f84c7e386a1d37316c3c4f93</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly_1_1comparators.html" anchor="a7a097404f84c7e386a1d37316c3c4f93addeceef5ab5e83d395f484906200d378">exclude_prerelease</enumvalue>
      <enumvalue file="namespacerolly_1_1comparators.html" anchor="a7a097404f84c7e386a1d37316c3c4f93ae6190b381edc2f52d53e4c142b6fdd8a">include_prerelease</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>namespacerolly_1_1comparators.html</anchorfile>
      <anchor>a073e020abb8d49be9a4ed3f6e05d31f0</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>equal_to</name>
      <anchorfile>namespacerolly_1_1comparators.html</anchorfile>
      <anchor>add78f2c5593250a4d8635e8ab86231a1</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>not_equal_to</name>
      <anchorfile>namespacerolly_1_1comparators.html</anchorfile>
      <anchor>aac20f4b292436c8f853d8450305a3728</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>greater</name>
      <anchorfile>namespacerolly_1_1comparators.html</anchorfile>
      <anchor>a0ddad7c8ac3da88058d6f7404199b478</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>greater_equal</name>
      <anchorfile>namespacerolly_1_1comparators.html</anchorfile>
      <anchor>a765c39fb28cd5b799f4cd9fdaded9393</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>less</name>
      <anchorfile>namespacerolly_1_1comparators.html</anchorfile>
      <anchor>a8cdeab0eaeaf885f90902d1ac7d5e3e6</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>less_equal</name>
      <anchorfile>namespacerolly_1_1comparators.html</anchorfile>
      <anchor>a7d7d7f80bcbd1558d975988d8fefa0d8</anchor>
      <arglist>(version const &amp;lhs, version const &amp;rhs, comparators_option option=comparators_option::include_prerelease) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::concepts</name>
    <filename>namespacerolly_1_1concepts.html</filename>
    <concept>rolly::concepts::any_of</concept>
    <concept>rolly::concepts::enum_</concept>
    <concept>rolly::concepts::num</concept>
    <concept>rolly::concepts::ptr</concept>
    <concept>rolly::concepts::c_ptr</concept>
    <concept>rolly::concepts::smart_ptr</concept>
    <concept>rolly::concepts::ptr_like</concept>
    <concept>rolly::concepts::standard_copyable_and_movable</concept>
    <concept>rolly::concepts::basic_lockable</concept>
    <concept>rolly::concepts::lockable</concept>
    <concept>rolly::concepts::timed_lockable</concept>
    <concept>rolly::concepts::shared_lockable</concept>
    <concept>rolly::concepts::shared_timed_lockable</concept>
    <concept>rolly::concepts::mutex</concept>
    <concept>rolly::concepts::timed_mutex</concept>
    <concept>rolly::concepts::shared_mutex</concept>
    <concept>rolly::concepts::shared_timed_mutex</concept>
    <concept>rolly::concepts::qobject</concept>
    <concept>rolly::concepts::qgadget</concept>
  </compound>
  <compound kind="namespace">
    <name>rolly::contracts</name>
    <filename>namespacerolly_1_1contracts.html</filename>
    <namespace>rolly::contracts::audit</namespace>
    <namespace>rolly::contracts::detail</namespace>
    <class kind="struct">rolly::contracts::contract_violation</class>
    <member kind="typedef">
      <type>std::function&lt; void(contract_violation const  &amp;)&gt;</type>
      <name>contract_violation_handler</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>ac832de403e0fafc6b9dcf09f6e6f7594</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>contract_type</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>a94faa9011c072faef8bdbb697a59fdcc</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly_1_1contracts.html" anchor="a94faa9011c072faef8bdbb697a59fdccac3c270a815f2c6329cf95844e757cf7f">precondition</enumvalue>
      <enumvalue file="namespacerolly_1_1contracts.html" anchor="a94faa9011c072faef8bdbb697a59fdcca251848760bc80cc0b08dec58b4199c6b">postcondition</enumvalue>
      <enumvalue file="namespacerolly_1_1contracts.html" anchor="a94faa9011c072faef8bdbb697a59fdcca97a1fb4792ab0d80857d825020ced2f0">invariant</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>default_contract_violation_handler</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>ab0bc120d0ba17557276c0082ec51e7b0</anchor>
      <arglist>(contract_violation const &amp;violation)</arglist>
    </member>
    <member kind="function">
      <type>contract_violation_handler &amp;</type>
      <name>violation_handler</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>a403bfcd53f388183802f697dc691d19e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>contract_violation_handler</type>
      <name>set_violation_handler</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>ad4881604e9bfa8b79bcb9c1e23f1e7af</anchor>
      <arglist>(contract_violation_handler handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invariant</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>ad298c10384725ecb46aa64acbe8f7d07</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Invariant violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precondition</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>aa8946f97218fccab5c3252ded10a82dd</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Precondition violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postcondition</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>a6fc741e9082a3b9384dfd50c1b36e64b</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Postcondition violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_invariant</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>a85522a06efdcca823d5c7119ebafb850</anchor>
      <arglist>(std::string_view message=&quot;Broken invariant&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_precondition</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>ab1f48107fb7de5e343fb595d41219bfa</anchor>
      <arglist>(std::string_view message=&quot;Broken precondition&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_postcondition</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>a4660f2a90742b97d33d90f3dfd4ee812</anchor>
      <arglist>(std::string_view message=&quot;Broken postcondition&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>not_implemented</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>adfba2187b8f7e9795c0fb5ec669a15a9</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="namespacerolly_1_1contracts.html" title="introduction">Quick</docanchor>
    <docanchor file="namespacerolly_1_1contracts.html">Usage</docanchor>
    <docanchor file="namespacerolly_1_1contracts.html">Examples</docanchor>
  </compound>
  <compound kind="namespace">
    <name>rolly::contracts::audit</name>
    <filename>namespacerolly_1_1contracts_1_1audit.html</filename>
    <member kind="function">
      <type>void</type>
      <name>invariant</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a7e49ec735d033ca6f6da7652f78c4a30</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Invariant violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precondition</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a6c79fd5607d45e582936442da6e322f4</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Precondition violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postcondition</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a9cf84ba57be583af6f5a3972047d8416</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Postcondition violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_invariant</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a90bd93c4cbe4a541b3398ee95ed17505</anchor>
      <arglist>(std::string_view message=&quot;Broken invariant&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_precondition</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a5bf2bc45f46e47e578f2defd5d87b52a</anchor>
      <arglist>(std::string_view message=&quot;Broken precondition&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_postcondition</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a040c855daee4842d4c0caefd701b6607</anchor>
      <arglist>(std::string_view message=&quot;Broken postcondition&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>not_implemented</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a123d98f0454da1fde978fa21ec6dd5e4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::contracts::detail</name>
    <filename>namespacerolly_1_1contracts_1_1detail.html</filename>
    <member kind="function">
      <type>contract_violation</type>
      <name>make_contract_violation</name>
      <anchorfile>namespacerolly_1_1contracts_1_1detail.html</anchorfile>
      <anchor>a85609edb0083695bff46154dd637729f</anchor>
      <arglist>(contract_type type, std::string_view message, source_location location=source_location::current())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>violate</name>
      <anchorfile>namespacerolly_1_1contracts_1_1detail.html</anchorfile>
      <anchor>a51d1323752d48a6e020de21fbda1e7f5</anchor>
      <arglist>(contract_type type, std::string_view message, source_location location=source_location::current())</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::detail</name>
    <filename>namespacerolly_1_1detail.html</filename>
    <class kind="struct">rolly::detail::char_or_throw</class>
    <class kind="struct">rolly::detail::char_reader</class>
    <class kind="struct">rolly::detail::char_reader&lt; char &gt;</class>
    <class kind="struct">rolly::detail::char_reader&lt; char16_t &gt;</class>
    <class kind="struct">rolly::detail::char_reader&lt; char32_t &gt;</class>
    <class kind="struct">rolly::detail::char_reader&lt; char8_t &gt;</class>
    <class kind="struct">rolly::detail::char_reader&lt; wchar_t &gt;</class>
    <class kind="class">rolly::detail::scope_guard&lt; Callback &gt;</class>
    <class kind="struct">rolly::detail::symbol</class>
    <class kind="struct">rolly::detail::utf16_reader</class>
    <class kind="struct">rolly::detail::utf32_reader</class>
    <class kind="struct">rolly::detail::utf8_reader</class>
    <member kind="function">
      <type>scope_guard&lt; Callback &gt;</type>
      <name>make_scope_guard</name>
      <anchorfile>namespacerolly_1_1detail.html</anchorfile>
      <anchor>afeedd7c785d4b2d49c66f4d52fb30850</anchor>
      <arglist>(Callback &amp;&amp;callback) noexcept(std::is_nothrow_constructible_v&lt; Callback, Callback &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>scope_guard&lt; Callback &gt;</type>
      <name>finally</name>
      <anchorfile>namespacerolly_1_1detail.html</anchorfile>
      <anchor>aa5f8fde71726c1ad930bd6e4b0b22195</anchor>
      <arglist>(Callback &amp;&amp;callback) noexcept(std::is_nothrow_constructible_v&lt; Callback, Callback &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr char</type>
      <name>next_char</name>
      <anchorfile>namespacerolly_1_1detail.html</anchorfile>
      <anchor>a1b04f56750ab18aa373ef974edef1610</anchor>
      <arglist>(T const *&amp;it, T const *begin, T const *end) noexcept(noexcept(detail::char_reader&lt; T &gt;::next(it, begin, end)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr char</type>
      <name>next_char_or_error</name>
      <anchorfile>namespacerolly_1_1detail.html</anchorfile>
      <anchor>a95e4154d6f05bd68f67696a2bfecdd59</anchor>
      <arglist>(T const *&amp;it, T const *end, bool &amp;error, u32 &amp;error_symbol) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::io</name>
    <filename>namespacerolly_1_1io.html</filename>
    <class kind="class">rolly::io::filedevice</class>
  </compound>
  <compound kind="namespace">
    <name>rolly::literals</name>
    <filename>namespacerolly_1_1literals.html</filename>
    <member kind="function">
      <type>constexpr version</type>
      <name>operator&quot;&quot;_version</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>ae720eab15c4b0733631a7956a0d2853f</anchor>
      <arglist>(char const *str, std::size_t length)</arglist>
    </member>
    <member kind="function">
      <type>::QString</type>
      <name>operator&quot;&quot;_qs</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>a8a8efad40133d1a3b2f4bf784ac9d7a4</anchor>
      <arglist>(char16_t const *str, std::size_t size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>::QUrl</type>
      <name>operator&quot;&quot;_qurl</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>a4f9c6921ea6ed3cf7b672ffc7aae74ac</anchor>
      <arglist>(char16_t const *str, std::size_t size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u8</type>
      <name>operator&quot;&quot;_u8</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>acf433e8d6e87da7af978d013539d49a1</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr u16</type>
      <name>operator&quot;&quot;_u16</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>aa51af4429132793804e7cbd58cbbb475</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr u32</type>
      <name>operator&quot;&quot;_u32</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>a504d921fb134987c823035c51e67b34e</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr u64</type>
      <name>operator&quot;&quot;_u64</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>aa1cfc025562a8f6fc45ebc2e8b3cea61</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i8</type>
      <name>operator&quot;&quot;_i8</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>af611e64610df729a9e1872568d1099d6</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i16</type>
      <name>operator&quot;&quot;_i16</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>a438692acf067c10b44fdbf9eed97622c</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i32</type>
      <name>operator&quot;&quot;_i32</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>a61c21310574460f54b6148ff6c42fe51</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i64</type>
      <name>operator&quot;&quot;_i64</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>a1bcd1df8f709d31ff1cc06e3d2929517</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::ptrdiff_t</type>
      <name>operator&quot;&quot;_ptrdiff</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>ab825871c5237ddc75b7179443db597cd</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator&quot;&quot;_pvoid</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>adc817b72e246cf0cb9600a4cf958b495</anchor>
      <arglist>(unsigned long long value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::meta</name>
    <filename>namespacerolly_1_1meta.html</filename>
    <class kind="class">rolly::meta::project_meta</class>
  </compound>
  <compound kind="namespace">
    <name>rolly::net</name>
    <filename>namespacerolly_1_1net.html</filename>
  </compound>
  <compound kind="namespace">
    <name>rolly::numbers</name>
    <filename>namespacerolly_1_1numbers.html</filename>
    <member kind="variable">
      <type>constexpr T</type>
      <name>pi_v</name>
      <anchorfile>namespacerolly_1_1numbers.html</anchorfile>
      <anchor>a0f4de5a97330afc8f1f630b13bef8288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr T</type>
      <name>e_v</name>
      <anchorfile>namespacerolly_1_1numbers.html</anchorfile>
      <anchor>a08fb2a426dbd6d2a31e076db6c3dff4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>pi</name>
      <anchorfile>namespacerolly_1_1numbers.html</anchorfile>
      <anchor>a232c5e19e1b439b32c20fc401eb9ead9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>e</name>
      <anchorfile>namespacerolly_1_1numbers.html</anchorfile>
      <anchor>a8d27b3b31202fe6f61edd1e510ab838f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::oslayer</name>
    <filename>namespacerolly_1_1oslayer.html</filename>
    <namespace>rolly::oslayer::android</namespace>
    <namespace>rolly::oslayer::linux</namespace>
    <namespace>rolly::oslayer::win</namespace>
    <member kind="function">
      <type>___inline___ void *</type>
      <name>lib_resolve</name>
      <anchorfile>namespacerolly_1_1oslayer.html</anchorfile>
      <anchor>a88923c3185bd121ede6d25ed5685a9e3</anchor>
      <arglist>(std::atomic&lt; void * &gt; &amp;handle, std::string_view const symbol)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::oslayer::android</name>
    <filename>namespacerolly_1_1oslayer_1_1android.html</filename>
    <class kind="struct">rolly::oslayer::android::guid_info</class>
    <member kind="function">
      <type>void</type>
      <name>init_jni</name>
      <anchorfile>namespacerolly_1_1oslayer_1_1android.html</anchorfile>
      <anchor>a93e2dcb81b658090f955ceb8f5b131cf</anchor>
      <arglist>(JNIEnv *env)</arglist>
    </member>
    <member kind="variable">
      <type>guid_info</type>
      <name>info</name>
      <anchorfile>namespacerolly_1_1oslayer_1_1android.html</anchorfile>
      <anchor>a5565259ccfbbd55a3ff4547595d078ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::oslayer::linux</name>
    <filename>namespacerolly_1_1oslayer_1_1linux.html</filename>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>home_dir</name>
      <anchorfile>namespacerolly_1_1oslayer_1_1linux.html</anchorfile>
      <anchor>a40f748bd0a317c4be5c4d72185833eed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>xdg_runtime_dir</name>
      <anchorfile>namespacerolly_1_1oslayer_1_1linux.html</anchorfile>
      <anchor>a2211541c4faed5aaf7994cf2d8577fa6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::oslayer::win</name>
    <filename>namespacerolly_1_1oslayer_1_1win.html</filename>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>known_folder_path</name>
      <anchorfile>namespacerolly_1_1oslayer_1_1win.html</anchorfile>
      <anchor>a2abcdd70f35c9efdc1167f3e20c46d62</anchor>
      <arglist>(::KNOWNFOLDERID id)</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>home_dir</name>
      <anchorfile>namespacerolly_1_1oslayer_1_1win.html</anchorfile>
      <anchor>a30ee6df4a448e320a7f1df84c2837b89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>appdata_dir</name>
      <anchorfile>namespacerolly_1_1oslayer_1_1win.html</anchorfile>
      <anchor>aae99c79420b4951c3911e2ff138d54e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path</type>
      <name>local_appdata_dir</name>
      <anchorfile>namespacerolly_1_1oslayer_1_1win.html</anchorfile>
      <anchor>a4b238fce69f46fdc6ae5b76432afc27c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::qt</name>
    <filename>namespacerolly_1_1qt.html</filename>
    <namespace>rolly::qt::qml</namespace>
    <member kind="function">
      <type>::QString</type>
      <name>from_std</name>
      <anchorfile>namespacerolly_1_1qt.html</anchorfile>
      <anchor>a1d1703dc112056f9d66069dee759aecf</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>::QString</type>
      <name>from_std</name>
      <anchorfile>namespacerolly_1_1qt.html</anchorfile>
      <anchor>a71e5529a4d2ae0b9ccecb6be900984e1</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; C &gt;</type>
      <name>to_std</name>
      <anchorfile>namespacerolly_1_1qt.html</anchorfile>
      <anchor>a81f30013fbed35283ddb3064f98d8764</anchor>
      <arglist>(::QString const &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::qt::qml</name>
    <filename>namespacerolly_1_1qt_1_1qml.html</filename>
    <namespace>rolly::qt::qml::detail</namespace>
    <class kind="class">rolly::qt::qml::module</class>
    <class kind="class">rolly::qt::qml::registrable</class>
    <member kind="enumeration">
      <type></type>
      <name>verbosity</name>
      <anchorfile>namespacerolly_1_1qt_1_1qml.html</anchorfile>
      <anchor>a59dbdf3372fd78bf87ae8fedd4e11b46</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly_1_1qt_1_1qml.html" anchor="a59dbdf3372fd78bf87ae8fedd4e11b46a556966c7830465dc4623d62e32cec31d">quiet</enumvalue>
      <enumvalue file="namespacerolly_1_1qt_1_1qml.html" anchor="a59dbdf3372fd78bf87ae8fedd4e11b46a2c7aea4237e25b4f8ee3b0bf77d6fed0">verbose</enumvalue>
    </member>
    <member kind="variable">
      <type>constexpr verbosity</type>
      <name>implicit_verbosity</name>
      <anchorfile>namespacerolly_1_1qt_1_1qml.html</anchorfile>
      <anchor>a72b0322e92af6768c9ef388d40fd976e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::qt::qml::detail</name>
    <filename>namespacerolly_1_1qt_1_1qml_1_1detail.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>strip_kind</name>
      <anchorfile>namespacerolly_1_1qt_1_1qml_1_1detail.html</anchorfile>
      <anchor>a93c34845e045b58f0af24ceb8ae1dbc2</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly_1_1qt_1_1qml_1_1detail.html" anchor="a93c34845e045b58f0af24ceb8ae1dbc2aac990588797eb0b93ee3b04baf82c394">prefix_and_extension</enumvalue>
      <enumvalue file="namespacerolly_1_1qt_1_1qml_1_1detail.html" anchor="a93c34845e045b58f0af24ceb8ae1dbc2a9ea71cd81a61ed5d325d0671e682b31b">namespace_</enumvalue>
      <enumvalue file="namespacerolly_1_1qt_1_1qml_1_1detail.html" anchor="a93c34845e045b58f0af24ceb8ae1dbc2a4ba5263e349ef78a05b15bab5bda8e3c">hungarian_prefix</enumvalue>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strip</name>
      <anchorfile>namespacerolly_1_1qt_1_1qml_1_1detail.html</anchorfile>
      <anchor>a2b3681e9f2696cf2fbbdae3ccf1a9d5f</anchor>
      <arglist>(std::string_view str, strip_kind kind)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::rtti</name>
    <filename>namespacerolly_1_1rtti.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>demangle</name>
      <anchorfile>namespacerolly_1_1rtti.html</anchorfile>
      <anchor>a8ac2bded160f24b7225d60eed02a5f27</anchor>
      <arglist>(char const *name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type_name</name>
      <anchorfile>namespacerolly_1_1rtti.html</anchorfile>
      <anchor>af8c9dca0ced5ad5cf39f7b94be3a5208</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::serialization</name>
    <filename>namespacerolly_1_1serialization.html</filename>
    <namespace>rolly::serialization::format</namespace>
    <concept>rolly::serialization::serializable</concept>
    <concept>rolly::serialization::deserializable</concept>
    <concept>rolly::serialization::serializable_and_deserializable</concept>
    <member kind="function">
      <type>std::basic_string&lt; C &gt;</type>
      <name>serialize</name>
      <anchorfile>namespacerolly_1_1serialization.html</anchorfile>
      <anchor>a83222b838bce80751be7901c7a113854</anchor>
      <arglist>(T const &amp;value)=delete</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deserialize</name>
      <anchorfile>namespacerolly_1_1serialization.html</anchorfile>
      <anchor>a7b7494fa47f66cea76e3b9b2c911e680</anchor>
      <arglist>(std::basic_string&lt; C &gt; const &amp;str)=delete</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::serialization::format</name>
    <filename>namespacerolly_1_1serialization_1_1format.html</filename>
    <class kind="struct">rolly::serialization::format::bson</class>
    <class kind="struct">rolly::serialization::format::cbor</class>
    <class kind="struct">rolly::serialization::format::flexbuffer</class>
    <class kind="struct">rolly::serialization::format::generic</class>
    <class kind="struct">rolly::serialization::format::json</class>
    <class kind="struct">rolly::serialization::format::msgpack</class>
    <class kind="struct">rolly::serialization::format::toml</class>
    <class kind="struct">rolly::serialization::format::xml</class>
    <class kind="struct">rolly::serialization::format::yaml</class>
  </compound>
  <compound kind="group">
    <name>core</name>
    <title>Core</title>
    <filename>group__core.html</filename>
    <subgroup>macros</subgroup>
    <subgroup>meta</subgroup>
    <subgroup>platform</subgroup>
  </compound>
  <compound kind="group">
    <name>macros</name>
    <title>Definitions and macros</title>
    <filename>group__macros.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_DOC</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga505b4a9fc37ca5cbd8fdcfdf5ef88dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___constexpr___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga0c9fde80eb6d7ab75a391dc178ef18b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_QT_CORE</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>gaa032e9c37560d16eb522f6ad25d09893</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_QT_GUI</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>gacdcb0a5fcef3d4a927a21b45ab4242a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_DEBUG</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga7529dd8806261ce6d42e74b6b8640645</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_NO_DEBUG</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga4bd557993872c902c6e785cb8a606e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___noinline___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga145bb0d26bb2157f4dc7874127366986</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___inline___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga791216d5be3d4ee7f5b5b04f597a7fcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>meta</name>
    <title>Library metadata</title>
    <filename>group__meta.html</filename>
    <class kind="class">rolly::meta::project_meta</class>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_MAJOR</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4c07a7f4f44a9eec2a3b92ebef8ad9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_MINOR</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabc35d3d52e0303eeb8c1405ee12476e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_PATCH</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga637777bfc47867a8af6831a84ba402e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_STRING</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3aec6b852a182be7e4f678760707530a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>platform</name>
    <title>Platform</title>
    <filename>group__platform.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_WINDOWS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga3ac2093cf66c05ed2254c38419269b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_LINUX</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gad060f36ed8c26cd0962f465ce31711dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_DARWIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gab5514b1891219769aa14d21e80ed8608</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_ANDROID</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga989564bc81f298ea3be6d5ebc3ccaf19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_IOS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gacf820cfe648cdfff6118bf3ea7a468fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_CYGWIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gae4e7ffb21e0842d6e1a7ce8c7e33ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_FREEBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gad18005e148adeb353ea1ead9a885a497</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_DRAGONFLY</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaf8e1352717a68b2f0512331142b2a185</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_NETBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga1cbbe058d150e202e08ff27f93eb487c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLYOPPY_OS_OPENBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0f1f18fee1cd87a8eba133825fda2779</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga554e07346830d0faf9b967b1b641d1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_X86_32</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga890d65212ce7a0f8eea1afa31de77fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_X86_64</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga450bb34f0bd2c32320a771e4d789ad7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_ALPHA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga09a70e8470acbaa51a65fb264ad16bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_ARM</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga628febc9470197aa352f8016dad24a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_BFIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0f138c49b35a6a59a577165807bbdd47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_CONVEX</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaa2de711cdd8d7c84e8f0137477841f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_E2K</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga510bee8caa4157b4847084ba997275f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_IA64</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gafe790513c5d737dca75dbf755af849a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_LOONGARCH</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga22f7382a3682a533e7a0c553a155e62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_M68K</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga7874f48b75bba92f83b288578fdee7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_MIPS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0f713ee81bc999aba8cb5d387cfa7b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_HPPA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga57b544d6326b7e173678bb9c82989675</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_POWERPC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gac4fcae5db6d5ecb1f878da9a8e56a42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_CUDA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gabd1662c2611f3c6159a9d01e7e99e395</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_PYRAMID</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga49884b4788f50bb0ab4727533f78c40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_RISCV</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gab1655d147cf1bc9e32e1da6b8ac53f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_RS6000</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga6326919fd5ea05f09fe0743d2a950c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_SPARC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga26f2ec079683603790985f7e45aaddbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_SUPERH</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga792872a7c42c6aa9442f70afeae5172c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaede03277d29b2378353e2f24794f5265</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_CLANG</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga4866f2313174db6a067b61d63c174672</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_GNU</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga84aa2b5b51025d52183c06f236113007</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_INTEL</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0d31831f176d24cde1fb95556b50b4f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_NVIDIA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gae7fff818a131b880b357a83bcd16d634</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_MSVC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga5deb8ecba17561da1fd2a34bb000e6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gac522f7e788f608ec355ad390a0fe3de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ENDIAN_BIG</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaf6bc941a5499e1203ce88d31e521598e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ENDIAN_LITTLE</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga5fc2015645e6eb1845fe995e9dda9862</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ENDIAN_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga8132bb6bedcf01aa05cc4f45da438023</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Rolly documentation</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Introduction">intro_sec</docanchor>
    <docanchor file="index.html" title="Installation">install_sec</docanchor>
    <docanchor file="index.html" title="Usage">usage_sec</docanchor>
    <docanchor file="index.html" title="License">license_sec</docanchor>
  </compound>
</tagfile>
