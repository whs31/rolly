<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>export.h</name>
    <path>/home/runner/work/rolly/rolly/include/rolly/global/</path>
    <filename>export_8h.html</filename>
    <namespace>rolly</namespace>
  </compound>
  <compound kind="file">
    <name>global.h</name>
    <path>/home/runner/work/rolly/rolly/include/rolly/</path>
    <filename>global_8h.html</filename>
    <includes id="export_8h" name="export.h" local="yes" imported="no">global/export.h</includes>
  </compound>
  <compound kind="struct">
    <name>rolly::types::angle</name>
    <filename>structrolly_1_1types_1_1angle.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a107b40f8f53dbbb17f9224074426b8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a0b3265454614c3cb2c563ec74dfeb851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a33f20a9549cf6a2b79817fde3034aa33</anchor>
      <arglist>(number_type const value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~angle</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a62ac8ec6740b5914e8f9226c7714dbe6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a2ddf4eb45f66fc53a35a92fec3fd22b9</anchor>
      <arglist>(angle const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>angle</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a908e7bc2c2d8e9a26301ff68ddbb023c</anchor>
      <arglist>(angle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a02bfe50e08aad2328c0836a4c362ceb7</anchor>
      <arglist>(angle const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>ade8996f319db17f70ad5ce969e840558</anchor>
      <arglist>(angle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>aac993ecccd3d88aafefb6b8e3caa1dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>in</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a88fdf66be062767e4090d10a7d1de681</anchor>
      <arglist>(angle_unit u) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>radians</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a4d596e0bb6f37199a669740aab6256ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>degrees</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a6133257e807ce7986b58d501bc09d734</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>positive</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>aa0e06aa96b91570c0bf5a341e27a19b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>signed_</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a65712cf7f7c8341f6ffb6f3604573e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>angle_to</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>ad96ebdfffee4655081b053b19084c3d9</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>angle</type>
      <name>lerp</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>afe46d65410aea34b6433396372e2bdea</anchor>
      <arglist>(angle const &amp;other, T t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; T, T &gt;</type>
      <name>sin_cos</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>ac3ca04e925cf9e490eadfa612dcb2810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle&lt; U &gt;</type>
      <name>cast</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>ab4296efb618a5d97bd8779ec48fa7f56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>value</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a524546a00e65da4c0a58a20d7913a593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr U</type>
      <name>as</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a7b1e681365ca2379776ba38496c8d9e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f32</type>
      <name>as_f32</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a4eadd631845fcfea8cf526a58403cf9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f64</type>
      <name>as_f64</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a4f3d1e4786e042fac8b82314a89439ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a287bb4c3be885ca0f758ecfa8ad27682</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>sin</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a180dab43c22e942a120ab7f99bbf8a74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>cos</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>aeb2224d0b1ef88347231240cbf0fd0af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>tan</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>ad3bfb6f6e497d64476f91d5b4523f9ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>asin</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a2da673a99c3050b72924056f39cb2baf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>acos</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a583ee6f45649a46f5df2fa082d456de8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>number_type</type>
      <name>atan</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a38eb7e4e9c49cb556997cf27b30d5725</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a566265d7ea4ab6649c2bfdf2e96145af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>afe13db0e1af81cd99e0f21f4b35561f1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>afd70a5715cd3b48b3a1f247e6f5bc0a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a32ad7696f348d2811a994e27daf6cc67</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>ad0ed9dded3dc4405713f0b9270930a92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator number_type</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a11f5e5b2d5a79d40ca187cb76f1c5fff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>aefd7979ce2368b9ef98210aa864b6295</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a309d0757a973d6d2c6614d0581b45d92</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>aa23ff0fac2171ad6ce2140c4cd965d42</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a5ff964a65187ef94f6a280f9cbd5f2e5</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>ae2dbf39105d4518d91f4ac2783106737</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a24164f3417a133a550089a5a276af6d9</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a187480616a4887aa0d98538df458e26d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>ab6cb838c89f8d1f7082caaf515cccfbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>af748c933998a173b97ccb5d74a9a9d10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>ada7d9122b1eb43d1a63e0a661d49ea60</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a9f62a83ad05047c663de6705ab6ce5f2</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a75f902dd70e3e238bfff25510eb96123</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>aea4139bbd4e98b1967da63f4390137f1</anchor>
      <arglist>(angle const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a70d5b448a690e5cfcdd24190b2bfb71c</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a531456a8461a83f3cfebc5c7952c2e37</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>ae1f0b69d4d88c07eb2e8b092cf379996</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a5bbe5bc05125c4ca21de9c8e367002f0</anchor>
      <arglist>(angle const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>acd68ed48b123c38fe645b4a9c6694e2c</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a69e3844905e49f7a8924565fba0a3c60</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a09b3b0e8330ce76a89450f25a598b50e</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a0bb40c7d98c3638f5fea004246a7fb6f</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>af503bc734615155e4f727bd9ed790209</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a877410d1ce3c690a66da73c8c8cba6f0</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a16b31742e4c2a0e80fdba6b94651064e</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a45d33fea8994dd76e3964dc1aa72018e</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>from_radians</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a5470198b343db477861d55f3b089149f</anchor>
      <arglist>(number_type radians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>from_degrees</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a485ca2070340a13e5e78cb687dbc1465</anchor>
      <arglist>(number_type degrees)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>from</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a5c55f8db6f6cb4c73858af1e28f768e8</anchor>
      <arglist>(number_type value, angle_unit u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>zero</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>afa7805bec73a51bf1c0256515e28ee56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>pi</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a206a627d4bbd55113b5eaac5ae4771fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>two_pi</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a99148853695ae53641609f542e18e4aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>half_pi</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>ab67f404883d5c94e4f2cd95ab3566e5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>third_pi</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a4ae3c43c7e9c16d33bf52172f1f898db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr angle</type>
      <name>quarter_pi</name>
      <anchorfile>structrolly_1_1types_1_1angle.html</anchorfile>
      <anchor>a4eabbb298d080362e01c8ba722984785</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::application_dirs</name>
    <filename>classrolly_1_1application__dirs.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>aa671c41b56810ab4bfd94587e8507a75</anchor>
      <arglist></arglist>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="aa671c41b56810ab4bfd94587e8507a75a0fea6a13c52b4d4725368f24b045ca84">cache</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="aa671c41b56810ab4bfd94587e8507a75a2245023265ae4cf87d02c8b6ba991139">config</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="aa671c41b56810ab4bfd94587e8507a75a63e5ccc32239b155c8691da2de09d8f1">config_local</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="aa671c41b56810ab4bfd94587e8507a75a8d777f385d3dfec8815d20f7496026dc">data</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="aa671c41b56810ab4bfd94587e8507a75a109d0fabf7fadeb851631940a8ce6e34">data_local</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="aa671c41b56810ab4bfd94587e8507a75a1ce027fe3518cc64ef3570b50a9a7c10">preferences</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="aa671c41b56810ab4bfd94587e8507a75ab4a619251c5c397f26d05c9b0e7bf97a">runtime</enumvalue>
      <enumvalue file="classrolly_1_1application__dirs.html" anchor="aa671c41b56810ab4bfd94587e8507a75a9ed39e2ea931586b6a985a6942ef573e">state</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>application_dirs</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a55c0e5e3ac7e710af26c992fd49dec50</anchor>
      <arglist>(std::string_view qualifier, std::string_view vendor, std::string_view app)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>application_dirs</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a9d30264f6f4177a75053575e5e04f771</anchor>
      <arglist>(meta::project_meta const &amp;meta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a2d42730a391790d4be3c9fe14af5327e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a83b6c3587991d0a3afeac89f2c61de17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const  &amp;</type>
      <name>get</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a877c175fe97261a9b214ed7152481482</anchor>
      <arglist>(dir d) const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const  &amp;</type>
      <name>operator[]</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a00ff1719edd03ad0aff4a10010eb503b</anchor>
      <arglist>(dir d) const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const  &amp;</type>
      <name>project_path</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a30e2c864bb359337268ceea8388e6a70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const  &amp;</type>
      <name>cache_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a16a0cf395395ae824d875bd7e6d8a842</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const  &amp;</type>
      <name>config_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a59c6f1acf971116e29638f2603ddab24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const  &amp;</type>
      <name>config_local_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>af397d204a53b4d8663cab8fe3290f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const  &amp;</type>
      <name>data_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a4bc1b913553cb31ddf0c37cc55c6c4c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const  &amp;</type>
      <name>data_local_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a9515233f07cdc7f8626c6e85e2ff6fe2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const  &amp;</type>
      <name>preference_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>ac0c60c9ab055e4fbe6e2faecd6722a9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::filesystem::path &gt; const  &amp;</type>
      <name>runtime_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a24c10522c9c2298dedda84c57d524dbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::filesystem::path &gt; const  &amp;</type>
      <name>state_dir</name>
      <anchorfile>classrolly_1_1application__dirs.html</anchorfile>
      <anchor>a817e8af54a15afcda79fa74f2cecc89b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::bad_optional_access</name>
    <filename>classrolly_1_1bad__optional__access.html</filename>
    <base>std::exception</base>
  </compound>
  <compound kind="class">
    <name>rolly::box</name>
    <filename>classrolly_1_1box.html</filename>
    <templarg></templarg>
    <base protection="private">rolly::noncopyable</base>
    <member kind="function">
      <type></type>
      <name>box</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>aa4b5aceb8fa96bcafa0ab2036c2ce26e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~box</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a7ac02901885f54462b91c3d36f2e24d4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>box</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>afedba7a5968b231fd3cd82508b5efa6c</anchor>
      <arglist>(box &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>box</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>ad8cc9017530df9d616762f4e8ba1139b</anchor>
      <arglist>(box&lt; U &gt; &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>box&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a3b66668b7010400ebea47b9155b031a6</anchor>
      <arglist>(box&lt; U &gt; &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a8cd3929c3ea66c2b5595f0b1d78c03f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>ac051b2568208e363ae2dffb23c0ad9ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ptr_mut</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a6515c80d735a21e8856e4bb23b0a567a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T const  *</type>
      <name>ptr</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a6acb58d65ee42c3c8bcb8dd90744d97d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>ref_mut</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a5a0863e21136211332e1a7863fa24ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>ref</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a6d3b10a0ba40d65439bc64e33ec1ff5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a8ec41dd70ff70ec41c5f17918604b3ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>af6e485beee07fd401de29c8cdf898c69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a5c1735ebb61cb9b40f6d0ed30be8a288</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt; &amp;</type>
      <name>as_unique_ptr</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a6b85f584a4a8c1b98b84e1ab81a670ae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt; const  &amp;</type>
      <name>as_unique_ptr</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a292afa7d9b939b261835165270ccb828</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>leak</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a9e0803457f22fb3201520a7e00be7fca</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; U &amp; &gt;</type>
      <name>downcast</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>ace53986139445f14adcb478bfa49ddcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>as</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a821c701c77d3231e978182beedefb8a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>U const  *</type>
      <name>as</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a246ff03289ee9a88e936eafb6bd7b026</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a420e60e9788bfa3b52aa3aab72ea3a5e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static box&lt; T &gt;</type>
      <name>make</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a3a38fffc60700f0adc5c350b7760b89f</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static box&lt; T &gt;</type>
      <name>make</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a07aa0f8c95fa45034be5f9d7f123c940</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; ptr) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>box&lt; T &gt;</type>
      <name>make_box</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>a3760e8162b1f9666221102a3c86866e9</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>ab5c7852b2e49020a194a3a07be285b9e</anchor>
      <arglist>(box&lt; T1 &gt; const &amp;a, box&lt; T2 &gt; const &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classrolly_1_1box.html</anchorfile>
      <anchor>ab9d725bfb8d8ec7fb6fbcb81747dfec6</anchor>
      <arglist>(rolly::box&lt; T &gt; &amp;a, rolly::box&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::bson</name>
    <filename>namespacerolly_1_1serialization_1_1format.html</filename>
    <anchor>structrolly_1_1serialization_1_1format_1_1bson</anchor>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::cbor</name>
    <filename>namespacerolly_1_1serialization_1_1format.html</filename>
    <anchor>structrolly_1_1serialization_1_1format_1_1cbor</anchor>
  </compound>
  <compound kind="struct">
    <name>detail::cleanable</name>
    <filename>structdetail_1_1cleanable.html</filename>
  </compound>
  <compound kind="class">
    <name>rolly::exceptions::compile_time_error</name>
    <filename>classrolly_1_1exceptions_1_1compile__time__error.html</filename>
    <base>std::exception</base>
    <member kind="function">
      <type></type>
      <name>compile_time_error</name>
      <anchorfile>classrolly_1_1exceptions_1_1compile__time__error.html</anchorfile>
      <anchor>af8baf46dcb073d8543c249752016097a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compile_time_error</name>
      <anchorfile>classrolly_1_1exceptions_1_1compile__time__error.html</anchorfile>
      <anchor>af167654f475960ac577c519b3a9a0989</anchor>
      <arglist>(std::string_view message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compile_time_error</name>
      <anchorfile>classrolly_1_1exceptions_1_1compile__time__error.html</anchorfile>
      <anchor>ac63dd82fdca6453463bbdddef2dc6324</anchor>
      <arglist>(std::string_view message, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>char const  *</type>
      <name>what</name>
      <anchorfile>classrolly_1_1exceptions_1_1compile__time__error.html</anchorfile>
      <anchor>aeb388bd3558613bfb2dac647f99fb68a</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::configuration_file</name>
    <filename>classrolly_1_1configuration__file.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>rolly::io::filedevice</base>
    <member kind="function">
      <type></type>
      <name>configuration_file</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>ab7300f20d215d2e4369770ff4135a113</anchor>
      <arglist>(std::filesystem::path path, saving_policy policy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>configuration_file</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a18451451f7e324f25db86f011a7908a5</anchor>
      <arglist>(std::string_view filename, std::filesystem::path const &amp;folder, saving_policy policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~configuration_file</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a87744a7d4bc1ae142669345201fd3cff</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a315419f26d3c59fa143b49b90a019049</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>enum saving_policy</type>
      <name>saving_policy</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a4c482a82a76a1795230c3b7c795c6522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>values</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a118d219d09d66ec2576a7bbc31a69d26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>values_mut</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a61e8a1bf44a495e3db6ffc8041a87b5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>default_values</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a97f2ce038608c3eea243a200d73abc1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>default_values_mut</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a4beca5e62db0dc01ba9a5b921725b09d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a96350dbe2693f29fd1fd7e0b44981bf8</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>ac09d45cc534c27373744e2472c720a76</anchor>
      <arglist>() const noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revert_to_default</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>aa30d950c278f5487c30e4e1251309816</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a420e60e9788bfa3b52aa3aab72ea3a5e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>operator()</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a1e344333134003bc0aab05727b4a4e3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classrolly_1_1configuration__file.html</anchorfile>
      <anchor>a9b6e1a7a6d5d7db85bae38ba04aaec7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>connection</name>
    <filename>classconnection.html</filename>
  </compound>
  <compound kind="class">
    <name>connection_blocker</name>
    <filename>classconnection__blocker.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::const_overload_t</name>
    <filename>structrolly_1_1const__overload__t.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="class">
    <name>const_overload_t&lt; Args... &gt;</name>
    <filename>structrolly_1_1const__overload__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::contracts::contract_violation</name>
    <filename>namespacerolly_1_1contracts.html</filename>
    <anchor>structrolly_1_1contracts_1_1contract__violation</anchor>
    <member kind="variable">
      <type>contract_type</type>
      <name>type</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>a291a73e9618c042c608372d489b8e8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>message</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>a36bd74109f547f7f8198faf5a12d2879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_location</type>
      <name>location</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>a729bab6ed1cfcc043916f1c4abd7d2c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>detail::copy_on_write</name>
    <filename>classdetail_1_1copy__on__write.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>rolly::deleter</name>
    <filename>structrolly_1_1deleter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>F</templarg>
  </compound>
  <compound kind="class">
    <name>rolly::exceptions::deserialization_error</name>
    <filename>classrolly_1_1exceptions_1_1deserialization__error.html</filename>
    <templarg></templarg>
    <base>std::runtime_error</base>
  </compound>
  <compound kind="class">
    <name>rolly::dirs</name>
    <filename>classrolly_1_1dirs.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::nullopt_t::do_not_use</name>
    <filename>structrolly_1_1nullopt__t.html</filename>
    <anchor>structrolly_1_1nullopt__t_1_1do__not__use</anchor>
  </compound>
  <compound kind="class">
    <name>rolly::io::filedevice</name>
    <filename>classrolly_1_1io_1_1filedevice.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::flexbuffer</name>
    <filename>namespacerolly_1_1serialization_1_1format.html</filename>
    <anchor>structrolly_1_1serialization_1_1format_1_1flexbuffer</anchor>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QByteArray &gt;</name>
    <filename>structfmt_1_1formatter_3_01QByteArray_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QChar &gt;</name>
    <filename>structfmt_1_1formatter_3_01QChar_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QLatin1String &gt;</name>
    <filename>structfmt_1_1formatter_3_01QLatin1String_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QPoint &gt;</name>
    <filename>structfmt_1_1formatter_3_01QPoint_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QPointF &gt;</name>
    <filename>structfmt_1_1formatter_3_01QPointF_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QString &gt;</name>
    <filename>structfmt_1_1formatter_3_01QString_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; QStringView &gt;</name>
    <filename>structfmt_1_1formatter_3_01QStringView_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::angle&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1angle_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::guid &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1guid_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::point2d&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1point2d_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::size2d&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1size2d_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::source_location &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1source__location_01_4.html</filename>
    <base>ostream_formatter&lt; char &gt;</base>
    <member kind="function">
      <type>OutputIt</type>
      <name>format</name>
      <anchorfile>structrolly_1_1ostream__formatter.html</anchorfile>
      <anchor>a530ff3c61e787d95ed7ee018d3a26ca2</anchor>
      <arglist>(T const &amp;value, fmt::basic_format_context&lt; OutputIt, char &gt; &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::vector2d&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1vector2d_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::velocity&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1velocity_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; rolly::version &gt;</name>
    <filename>structfmt_1_1formatter_3_01rolly_1_1version_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>detail::func_ptr</name>
    <filename>structdetail_1_1func__ptr.html</filename>
  </compound>
  <compound kind="struct">
    <name>detail::function_traits</name>
    <filename>structdetail_1_1function__traits.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>detail::function_traits&lt; T *, std::enable_if_t&lt; trait::is_func_v&lt; T &gt; &gt; &gt;</name>
    <filename>structdetail_1_1function__traits_3_01T_01_5_00_01std_1_1enable__if__t_3_01trait_1_1is__func__v_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>detail::function_traits&lt; T, std::enable_if_t&lt; trait::has_call_operator_v&lt; T &gt; &gt; &gt;</name>
    <filename>structdetail_1_1function__traits_3_01T_00_01std_1_1enable__if__t_3_01trait_1_1has__call__operator__v_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>detail::function_traits&lt; T, std::enable_if_t&lt; trait::is_func_v&lt; T &gt; &gt; &gt;</name>
    <filename>structdetail_1_1function__traits_3_01T_00_01std_1_1enable__if__t_3_01trait_1_1is__func__v_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>detail::function_traits&lt; T, std::enable_if_t&lt; trait::is_pmf_v&lt; T &gt; &gt; &gt;</name>
    <filename>structdetail_1_1function__traits_3_01T_00_01std_1_1enable__if__t_3_01trait_1_1is__pmf__v_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::generic</name>
    <filename>namespacerolly_1_1serialization_1_1format.html</filename>
    <anchor>structrolly_1_1serialization_1_1format_1_1generic</anchor>
  </compound>
  <compound kind="class">
    <name>rolly::types::guid</name>
    <filename>classrolly_1_1types_1_1guid.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>guid</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>ae81204021847132120fe57d6fef39ea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>guid</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>a124206d9424ec4c771ff0b6be82cccb3</anchor>
      <arglist>(std::array&lt; u8, 16 &gt; const &amp;bytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>guid</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>aaec18b3d519f5d8651d3736e45b49645</anchor>
      <arglist>(std::array&lt; std::byte, 16 &gt; const &amp;bytes)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>guid</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>afbc3ad504c8ca03eb7d6f2d6b48b2ace</anchor>
      <arglist>(std::string_view const str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>a99f77f09f364b20c3a30ab6bffa4c24b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>aac993ecccd3d88aafefb6b8e3caa1dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; u8, 16 &gt; const  &amp;</type>
      <name>bytes</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>a0fec4f43a26c378e20c01bbfc7d75fd8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; u8, 16 &gt; &amp;</type>
      <name>bytes_mut</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>acc33090d8ecf964436c434fc52f6c5da</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>u64</type>
      <name>to_u64</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>af687d7ba21b4110f46c09401156f8c90</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>a420e60e9788bfa3b52aa3aab72ea3a5e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>a6c033d63da52b8181d4d8c2732298838</anchor>
      <arglist>(guid const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>aa6ee004e31ca7c2ac05666230519348b</anchor>
      <arglist>(guid const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>constexpr static guid</type>
      <name>empty</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>ac96c0f11b011f5f031aa5b96f373d6d4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guid</type>
      <name>random</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>adf9915d8b34d4ef59625f281ba18c90d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>constexpr static auto</type>
      <name>short_guid_string_length</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>aef3d857d328958e252ad0db75606c091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>constexpr static auto</type>
      <name>long_guid_string_length</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>a459c05884327afabd173d12175e165e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>ae74c4f98fab3ca71a3ac198dc50ef59d</anchor>
      <arglist>(guid const &amp;lhs, guid const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>a499ec739efb1085811f95c07cc4c4065</anchor>
      <arglist>(std::ostream &amp;os, guid const &amp;guid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classrolly_1_1types_1_1guid.html</anchorfile>
      <anchor>a6f014712a4893ba1135acaecc3fffc45</anchor>
      <arglist>(rolly::guid &amp;a, rolly::guid &amp;b) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rolly::box&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rolly_1_1box_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rolly::guid &gt;</name>
    <filename>structstd_1_1hash_3_01rolly_1_1guid_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rolly::observer_ptr&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rolly_1_1observer__ptr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rolly::optional&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rolly_1_1optional_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rolly::types::point2d&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rolly_1_1types_1_1point2d_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rolly::types::size2d&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rolly_1_1types_1_1size2d_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; rolly::types::vector2d&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01rolly_1_1types_1_1vector2d_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>rolly::is_any_of</name>
    <filename>structrolly_1_1is__any__of.html</filename>
    <templarg></templarg>
    <templarg>U</templarg>
  </compound>
  <compound kind="struct">
    <name>rolly::trait::is_callable&lt; F, typelist&lt; T... &gt;, void_t&lt; decltype(std::declval&lt; F &gt;()(std::declval&lt; T &gt;()...))&gt; &gt;</name>
    <filename>structrolly_1_1trait_1_1is__callable_3_01F_00_01typelist_3_01T_8_8_8_01_4_00_01void__t_3_01declt66028bba37b643a5c2d0222823d22cb8.html</filename>
    <templarg></templarg>
    <templarg>T</templarg>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>rolly::is_num</name>
    <filename>structrolly_1_1is__num.html</filename>
    <templarg></templarg>
    <base>integral_constant&lt; bool, std::is_integral_v&lt; plain_type_t&lt; T &gt; &gt; or std::is_floating_point_v&lt; plain_type_t&lt; T &gt; &gt; &gt;</base>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_num_v</name>
      <anchorfile>structrolly_1_1is__num.html</anchorfile>
      <anchor>a23272b2567f5687eaec97876db4f96c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::is_qgadget</name>
    <filename>structrolly_1_1is__qgadget.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>std::false_type</base>
  </compound>
  <compound kind="struct">
    <name>rolly::is_qgadget&lt; T, std::void_t&lt; decltype(T::staticMetaObject)&gt; &gt;</name>
    <filename>structrolly_1_1is__qgadget_3_01T_00_01std_1_1void__t_3_01decltype_07T_1_1staticMetaObject_08_4_01_4.html</filename>
    <templarg></templarg>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>rolly::is_qobject</name>
    <filename>structrolly_1_1is__qobject.html</filename>
    <templarg></templarg>
    <base>integral_constant&lt; bool, std::is_base_of_v&lt;::QObject, T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>rolly::trait::is_signal</name>
    <filename>structrolly_1_1trait_1_1is__signal.html</filename>
    <templarg></templarg>
    <base>std::false_type</base>
  </compound>
  <compound kind="struct">
    <name>rolly::trait::is_signal&lt; signal_base&lt; L, T... &gt; &gt;</name>
    <filename>structrolly_1_1trait_1_1is__signal_3_01signal__base_3_01L_00_01T_8_8_8_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>T</templarg>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>rolly::trait::is_weak_ptr</name>
    <filename>structrolly_1_1trait_1_1is__weak__ptr.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>std::false_type</base>
  </compound>
  <compound kind="class">
    <name>is_weak_ptr&lt; decltype(to_weak(std::declval&lt; T &gt;()))&gt;</name>
    <filename>structrolly_1_1trait_1_1is__weak__ptr.html</filename>
    <base>std::false_type</base>
  </compound>
  <compound kind="struct">
    <name>rolly::trait::is_weak_ptr&lt; T, void_t&lt; decltype(std::declval&lt; T &gt;().expired()), decltype(std::declval&lt; T &gt;().lock()), decltype(std::declval&lt; T &gt;().reset())&gt; &gt;</name>
    <filename>structrolly_1_1trait_1_1is__weak__ptr_3_01T_00_01void__t_3_01decltype_07std_1_1declval_3_01T_01_13fd328036332a30c13445a07df30ceb.html</filename>
    <templarg></templarg>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>rolly::trait::is_weak_ptr_compatible</name>
    <filename>structrolly_1_1trait_1_1is__weak__ptr__compatible.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>std::false_type</base>
  </compound>
  <compound kind="struct">
    <name>rolly::trait::is_weak_ptr_compatible&lt; T, void_t&lt; decltype(to_weak(std::declval&lt; T &gt;()))&gt; &gt;</name>
    <filename>structrolly_1_1trait_1_1is__weak__ptr__compatible_3_01T_00_01void__t_3_01decltype_07to__weak_07s21218c6e5bd4c76e56da307adfbeb012.html</filename>
    <templarg></templarg>
    <base>is_weak_ptr&lt; decltype(to_weak(std::declval&lt; T &gt;()))&gt;</base>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::json</name>
    <filename>namespacerolly_1_1serialization_1_1format.html</filename>
    <anchor>structrolly_1_1serialization_1_1format_1_1json</anchor>
  </compound>
  <compound kind="class">
    <name>rolly::qt::qml::module</name>
    <filename>classrolly_1_1qt_1_1qml_1_1module.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::msgpack</name>
    <filename>namespacerolly_1_1serialization_1_1format.html</filename>
    <anchor>structrolly_1_1serialization_1_1format_1_1msgpack</anchor>
  </compound>
  <compound kind="struct">
    <name>rolly::non_const_overload_t</name>
    <filename>structrolly_1_1non__const__overload__t.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="class">
    <name>non_const_overload_t&lt; Args... &gt;</name>
    <filename>structrolly_1_1non__const__overload__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::noncopyable</name>
    <filename>structrolly_1_1noncopyable.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::nonmovable</name>
    <filename>structrolly_1_1nonmovable.html</filename>
  </compound>
  <compound kind="struct">
    <name>detail::null_mutex</name>
    <filename>structdetail_1_1null__mutex.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::nullopt_t</name>
    <filename>structrolly_1_1nullopt__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>detail::object_pointer</name>
    <filename>structdetail_1_1object__pointer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>detail::object_pointer&lt; T *, std::enable_if_t&lt; trait::is_pointer_v&lt; T * &gt; &gt; &gt;</name>
    <filename>structdetail_1_1object__pointer_3_01T_01_5_00_01std_1_1enable__if__t_3_01trait_1_1is__pointer__v_3_01T_01_5_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>detail::object_pointer&lt; T, std::enable_if_t&lt; ! trait::is_pointer_v&lt; T &gt; &amp;&amp;! trait::is_weak_ptr_v&lt; T &gt; &amp;&amp;trait::is_weak_ptr_compatible_v&lt; T &gt; &gt; &gt;</name>
    <filename>structdetail_1_1object__pointer_3_01T_00_01std_1_1enable__if__t_3_01_9_01trait_1_1is__pointer__v9d17afaa4d8ddd746027d98f7cb68c51.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>detail::object_pointer&lt; T, std::enable_if_t&lt; trait::is_weak_ptr_v&lt; T &gt; &gt; &gt;</name>
    <filename>structdetail_1_1object__pointer_3_01T_00_01std_1_1enable__if__t_3_01trait_1_1is__weak__ptr__v_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>observer_base</name>
    <filename>structobserver__base.html</filename>
    <templarg></templarg>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disconnect_all</name>
      <anchorfile>structobserver__base.html</anchorfile>
      <anchor>a02922e7231c3a315b2bfd1049b675365</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::observer_ptr</name>
    <filename>classrolly_1_1observer__ptr.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>ab09edc4b568d547d04da66f947f5595a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>ab088798d28525c0befe3c707b95c5bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const  *</type>
      <name>const_pointer</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>ada8ef625b97396676e3e2303a84535be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a0c5a1541ecf7ad17925583cf6abd2c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>af73227c77834d27f9c89e0a92ea698d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a31c872a1c5784bf8eb67039d36047f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a8fd2758495c7d39b4f7e9c9a7a2affdf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a7db273aa4945dc39fe351d7616f5f814</anchor>
      <arglist>(std::nullptr_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a0735d4b4c42a4327cf8ae6d1d88359eb</anchor>
      <arglist>(pointer ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>aae0f7514210dafde3695c0aa984f9ae7</anchor>
      <arglist>(observer_ptr&lt; U &gt; const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>afd0d8fef5e2e709ecfe34e465412be05</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>observer_ptr</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a8888e9dd9db1435a172232db23e264c1</anchor>
      <arglist>(box&lt; U &gt; const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>get</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a5b3070b1e5da32efba368f18ab9f611c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>ref</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a8dd31bf0ddc9809655d6f66827013865</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>ref</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a14bee89e538427a25cc1e361d8a86140</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a95a453b6d6fe6d168aa9748d7bee076c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a4d87e2ceab34e71e890d84482bfd5dfa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a420e60e9788bfa3b52aa3aab72ea3a5e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator pointer</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a5ea4d6faed311cd6bf7af821ef2f038e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>release</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>a6a68b7063d23d1c5ff1dcd0cdd33ec36</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>reset</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>af9f22cb37d3edae4b12382631e95ec76</anchor>
      <arglist>(pointer ptr=nullptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>adf6f1fb30d64991e6bf834d69bc34018</anchor>
      <arglist>(observer_ptr &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classrolly_1_1observer__ptr.html</anchorfile>
      <anchor>ac869794e3e52c6f5416d5ebc7d720767</anchor>
      <arglist>(rolly::observer_ptr&lt; T &gt; &amp;lhs, rolly::observer_ptr&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::detail::observer_type</name>
    <filename>structrolly_1_1detail_1_1observer__type.html</filename>
  </compound>
  <compound kind="class">
    <name>rolly::optional</name>
    <filename>classrolly_1_1optional.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR detail::invoke_result_t&lt; F, T &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a8e0758cd5aa728222538ce6dbbda3e66</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>abe174e282f9736d9e539b492797d9d7e</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a707e7a79788137cb02a7175cb6eea34d</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a14e5d060ddbbed0bc38f2248f099e664</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; typename std::decay&lt; U &gt;::type &gt;</type>
      <name>conjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a5e8d520b9233bf52ed72127d4afbda32</anchor>
      <arglist>(U &amp;&amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a56d9e9e39dc0131e687ae77dc2e44ba1</anchor>
      <arglist>(optional const &amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>take</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ace16d6b8d42636f88f85384468f1e320</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a656aa74c72d602923ed13edff9402f74</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a216902450eccba2bdf6879099b5c5c3a</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a0d171a7fcb0cf7e0810d79d975c5b650</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ad4b8af1c9f52104c17f96412651d348f</anchor>
      <arglist>(detail::enable_if_t&lt; std::is_constructible&lt; T, Args... &gt;::value, std::in_place_t &gt;, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a42e8846bfd635be7e07abab2246f9290</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a1134dde259855c909af75fce04f83d90</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a3e331ef5e402e08a5e2e6e1ef0227d6b</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ade59530744da512b5db911ad67ce654a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ae30f6090cf50374e6b557e03b7072f7e</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a8cddc70a4e034595a82f96cfb28afc65</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a78e7ac1a509871e7103af26986c96370</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a1e8eae689be775a76bd60bf463792c0c</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2c243f07022f23f344d7799f1a793db5</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a88be0d77564a849dd53900482a083d75</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>emplace</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a3767e074b147bda4e01ee30f5177c2c0</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ac6a29c658efe77e50b87910e8bd5b5c5</anchor>
      <arglist>(optional &amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value &amp;&amp;detail::is_nothrow_swappable&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const  *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2c28eb8838dbbf8c9a7076b01ae6cddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a83ab4df2d81fc87fcfe0a9ffcc1c95de</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_value</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a6988ba57722f67cbb444b0931468282e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;</type>
      <name>value</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a82e4009f91421b2e75385ca0d481b5d1</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>aa3ea73a17e5f9b6f3d820d08f29a7681</anchor>
      <arglist>(U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a20194325f0380eb3bbc6bc6c8b2697d9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>decltype(optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;())) TL_OPTIONAL_11_CONSTEXPR</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ad9d975250ca8c6f2c78a440519ef2221</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="variable">
      <type>decltype(optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;())) TL_OPTIONAL_11_CONSTEXPR</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>aa888e9b68cadd11c18f674f25e814a54</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>optional&lt; std::filesystem::path &gt;</name>
    <filename>classrolly_1_1optional.html</filename>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR detail::invoke_result_t&lt; F, std::filesystem::path &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a8e0758cd5aa728222538ce6dbbda3e66</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::filesystem::path &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>abe174e282f9736d9e539b492797d9d7e</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a707e7a79788137cb02a7175cb6eea34d</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a14e5d060ddbbed0bc38f2248f099e664</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; typename std::decay&lt; U &gt;::type &gt;</type>
      <name>conjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a5e8d520b9233bf52ed72127d4afbda32</anchor>
      <arglist>(U &amp;&amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a56d9e9e39dc0131e687ae77dc2e44ba1</anchor>
      <arglist>(optional const &amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>take</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ace16d6b8d42636f88f85384468f1e320</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a656aa74c72d602923ed13edff9402f74</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a216902450eccba2bdf6879099b5c5c3a</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a0d171a7fcb0cf7e0810d79d975c5b650</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ad4b8af1c9f52104c17f96412651d348f</anchor>
      <arglist>(detail::enable_if_t&lt; std::is_constructible&lt; std::filesystem::path, Args... &gt;::value, std::in_place_t &gt;, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a42e8846bfd635be7e07abab2246f9290</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a1134dde259855c909af75fce04f83d90</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a3e331ef5e402e08a5e2e6e1ef0227d6b</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ade59530744da512b5db911ad67ce654a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ae30f6090cf50374e6b557e03b7072f7e</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a8cddc70a4e034595a82f96cfb28afc65</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a78e7ac1a509871e7103af26986c96370</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a1e8eae689be775a76bd60bf463792c0c</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2c243f07022f23f344d7799f1a793db5</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a88be0d77564a849dd53900482a083d75</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path &amp;</type>
      <name>emplace</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a3767e074b147bda4e01ee30f5177c2c0</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ac6a29c658efe77e50b87910e8bd5b5c5</anchor>
      <arglist>(optional &amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; std::filesystem::path &gt;::value &amp;&amp;detail::is_nothrow_swappable&lt; std::filesystem::path &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::filesystem::path const *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2c28eb8838dbbf8c9a7076b01ae6cddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR std::filesystem::path &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a83ab4df2d81fc87fcfe0a9ffcc1c95de</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_value</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a6988ba57722f67cbb444b0931468282e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR std::filesystem::path &amp;</type>
      <name>value</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a82e4009f91421b2e75385ca0d481b5d1</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::filesystem::path</type>
      <name>value_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>aa3ea73a17e5f9b6f3d820d08f29a7681</anchor>
      <arglist>(U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a20194325f0380eb3bbc6bc6c8b2697d9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>decltype(optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;())) TL_OPTIONAL_11_CONSTEXPR</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ad9d975250ca8c6f2c78a440519ef2221</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="variable">
      <type>decltype(optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;())) TL_OPTIONAL_11_CONSTEXPR</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>aa888e9b68cadd11c18f674f25e814a54</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>optional&lt; std::uint16_t &gt;</name>
    <filename>classrolly_1_1optional.html</filename>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR detail::invoke_result_t&lt; F, std::uint16_t &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a8e0758cd5aa728222538ce6dbbda3e66</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::uint16_t &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>abe174e282f9736d9e539b492797d9d7e</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a707e7a79788137cb02a7175cb6eea34d</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a14e5d060ddbbed0bc38f2248f099e664</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; typename std::decay&lt; U &gt;::type &gt;</type>
      <name>conjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a5e8d520b9233bf52ed72127d4afbda32</anchor>
      <arglist>(U &amp;&amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a56d9e9e39dc0131e687ae77dc2e44ba1</anchor>
      <arglist>(optional const &amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>take</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ace16d6b8d42636f88f85384468f1e320</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a656aa74c72d602923ed13edff9402f74</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a216902450eccba2bdf6879099b5c5c3a</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a0d171a7fcb0cf7e0810d79d975c5b650</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ad4b8af1c9f52104c17f96412651d348f</anchor>
      <arglist>(detail::enable_if_t&lt; std::is_constructible&lt; std::uint16_t, Args... &gt;::value, std::in_place_t &gt;, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a42e8846bfd635be7e07abab2246f9290</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a1134dde259855c909af75fce04f83d90</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a3e331ef5e402e08a5e2e6e1ef0227d6b</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ade59530744da512b5db911ad67ce654a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ae30f6090cf50374e6b557e03b7072f7e</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a8cddc70a4e034595a82f96cfb28afc65</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a78e7ac1a509871e7103af26986c96370</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a1e8eae689be775a76bd60bf463792c0c</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2c243f07022f23f344d7799f1a793db5</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a88be0d77564a849dd53900482a083d75</anchor>
      <arglist>(optional&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::uint16_t &amp;</type>
      <name>emplace</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a3767e074b147bda4e01ee30f5177c2c0</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ac6a29c658efe77e50b87910e8bd5b5c5</anchor>
      <arglist>(optional &amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; std::uint16_t &gt;::value &amp;&amp;detail::is_nothrow_swappable&lt; std::uint16_t &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::uint16_t const *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a2c28eb8838dbbf8c9a7076b01ae6cddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR std::uint16_t &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a83ab4df2d81fc87fcfe0a9ffcc1c95de</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_value</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a6988ba57722f67cbb444b0931468282e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR std::uint16_t &amp;</type>
      <name>value</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a82e4009f91421b2e75385ca0d481b5d1</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::uint16_t</type>
      <name>value_or</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>aa3ea73a17e5f9b6f3d820d08f29a7681</anchor>
      <arglist>(U &amp;&amp;u) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>a20194325f0380eb3bbc6bc6c8b2697d9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>decltype(optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;())) TL_OPTIONAL_11_CONSTEXPR</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>ad9d975250ca8c6f2c78a440519ef2221</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="variable">
      <type>decltype(optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;())) TL_OPTIONAL_11_CONSTEXPR</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional.html</anchorfile>
      <anchor>aa888e9b68cadd11c18f674f25e814a54</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::optional&lt; T &amp; &gt;</name>
    <filename>classrolly_1_1optional_3_01T_01_6_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR detail::invoke_result_t&lt; F, T &amp; &gt;</type>
      <name>and_then</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a8e0758cd5aa728222538ce6dbbda3e66</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt; TL_OPTIONAL_11_CONSTEXPR</type>
      <name>or_else</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>abe174e282f9736d9e539b492797d9d7e</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>map_or</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a707e7a79788137cb02a7175cb6eea34d</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>detail::invoke_result_t&lt; U &gt;</type>
      <name>map_or_else</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a14e5d060ddbbed0bc38f2248f099e664</anchor>
      <arglist>(F &amp;&amp;f, U &amp;&amp;u) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr optional&lt; typename std::decay&lt; U &gt;::type &gt;</type>
      <name>conjunction</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a5e8d520b9233bf52ed72127d4afbda32</anchor>
      <arglist>(U &amp;&amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR optional</type>
      <name>disjunction</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a56d9e9e39dc0131e687ae77dc2e44ba1</anchor>
      <arglist>(optional const &amp;rhs) &amp;</arglist>
    </member>
    <member kind="function">
      <type>optional</type>
      <name>take</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ace16d6b8d42636f88f85384468f1e320</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a3df66b23e958382bf9cfe8947b8bb2e6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a18e9f387dd9d46b4056cb233b3ef5b21</anchor>
      <arglist>(optional const &amp;rhs) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a0d171a7fcb0cf7e0810d79d975c5b650</anchor>
      <arglist>(optional &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>optional</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a61926a40c1250da2f07fe7a37c606943</anchor>
      <arglist>(U &amp;&amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ade59530744da512b5db911ad67ce654a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ae30f6090cf50374e6b557e03b7072f7e</anchor>
      <arglist>(nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a8cddc70a4e034595a82f96cfb28afc65</anchor>
      <arglist>(optional const &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a1e8eae689be775a76bd60bf463792c0c</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a5beb351051a1f20a45e3cab0d2b6db80</anchor>
      <arglist>(optional&lt; U &gt; const &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional &amp;</type>
      <name>emplace</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a9b9773faed27da10a29261798883e3de</anchor>
      <arglist>(U &amp;&amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T const  *</type>
      <name>operator-&gt;</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>ab4aee760c2c288ec7637b28bcd1877e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>acec5a45b59dc445fa9a2364d572e10f3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T &amp;</type>
      <name>value</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a4cef207fdf17b420d2d0874ce712ade3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a123a9c8624ac86abfec8be6730075458</anchor>
      <arglist>(U &amp;&amp;u) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>TL_OPTIONAL_11_CONSTEXPR T</type>
      <name>value_or</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a7060b3e537ab8323ea24bb515102ed6b</anchor>
      <arglist>(U &amp;&amp;u) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a20194325f0380eb3bbc6bc6c8b2697d9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>decltype(detail::optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;())) TL_OPTIONAL_11_CONSTEXPR</type>
      <name>map</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>abba7a74c703766bd1a7fd90e2aee6b08</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="variable">
      <type>decltype(detail::optional_map_impl(std::declval&lt; optional &amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;())) TL_OPTIONAL_11_CONSTEXPR</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a51798d8a828a414fbfab5e638c8209ea</anchor>
      <arglist>(F &amp;&amp;f) &amp;</arglist>
    </member>
    <member kind="variable">
      <type>decltype(detail::optional_map_impl(std::declval&lt; optional &amp;&amp; &gt;(), std::declval&lt; F &amp;&amp; &gt;())) TL_OPTIONAL_11_CONSTEXPR</type>
      <name>transform</name>
      <anchorfile>classrolly_1_1optional_3_01T_01_6_01_4.html</anchorfile>
      <anchor>a5ee56b4c121bc7835ce4c68bfae9fbe6</anchor>
      <arglist>(F &amp;&amp;f) &amp;&amp;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::ostream_formatter</name>
    <filename>structrolly_1_1ostream__formatter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>OutputIt</type>
      <name>format</name>
      <anchorfile>structrolly_1_1ostream__formatter.html</anchorfile>
      <anchor>a530ff3c61e787d95ed7ee018d3a26ca2</anchor>
      <arglist>(T const &amp;value, fmt::basic_format_context&lt; OutputIt, C &gt; &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ostream_formatter&lt; char &gt;</name>
    <filename>structrolly_1_1ostream__formatter.html</filename>
    <member kind="function">
      <type>OutputIt</type>
      <name>format</name>
      <anchorfile>structrolly_1_1ostream__formatter.html</anchorfile>
      <anchor>a530ff3c61e787d95ed7ee018d3a26ca2</anchor>
      <arglist>(T const &amp;value, fmt::basic_format_context&lt; OutputIt, char &gt; &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::overload_t</name>
    <filename>structrolly_1_1overload__t.html</filename>
    <templarg>Args</templarg>
    <base>const_overload_t&lt; Args... &gt;</base>
    <base>non_const_overload_t&lt; Args... &gt;</base>
  </compound>
  <compound kind="struct">
    <name>rolly::pin</name>
    <filename>structrolly_1_1pin.html</filename>
    <base>rolly::noncopyable</base>
    <base>rolly::nonmovable</base>
  </compound>
  <compound kind="struct">
    <name>rolly::plain_type</name>
    <filename>namespacerolly.html</filename>
    <anchor>structrolly_1_1plain__type</anchor>
    <templarg></templarg>
    <member kind="typedef">
      <type>remove_cvref_t&lt; std::remove_pointer_t&lt; T &gt; &gt;</type>
      <name>type</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a277016564351770d54aaf0b63c7acfe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_const_t&lt; type &gt;</type>
      <name>const_type</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a60926b56740fc6359cc46e3cc51f9289</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::dll::plugin</name>
    <filename>classrolly_1_1dll_1_1plugin.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::string_view</type>
      <name>name</name>
      <anchorfile>classrolly_1_1dll_1_1plugin.html</anchorfile>
      <anchor>a782a8f03cca96caa964b019fdf81da84</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string_view</type>
      <name>soname</name>
      <anchorfile>classrolly_1_1dll_1_1plugin.html</anchorfile>
      <anchor>a8abfaef9c352d1a3bd0fd8b433081584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string_view</type>
      <name>description</name>
      <anchorfile>classrolly_1_1dll_1_1plugin.html</anchorfile>
      <anchor>a7effe5b83e10d37f18fb13a2fb35a082</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual meta::project_meta const  &amp;</type>
      <name>meta</name>
      <anchorfile>classrolly_1_1dll_1_1plugin.html</anchorfile>
      <anchor>ad293e4b7e7d88a16a360415cca9ad9f1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual guid const  &amp;</type>
      <name>uuid</name>
      <anchorfile>classrolly_1_1dll_1_1plugin.html</anchorfile>
      <anchor>a70ebc47aa2a08a0d5dc1e2222dc2f606</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>init</name>
      <anchorfile>classrolly_1_1dll_1_1plugin.html</anchorfile>
      <anchor>a91048bac1d9f2557cc86c9eb8b39ca59</anchor>
      <arglist>(std::any &amp;init_interface)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>quit</name>
      <anchorfile>classrolly_1_1dll_1_1plugin.html</anchorfile>
      <anchor>a4d4fdef23d3fbfb46cfcabc3562e7981</anchor>
      <arglist>()=0</arglist>
    </member>
    <docanchor file="classrolly_1_1dll_1_1plugin.html" title="Usage basics">plugin_usage</docanchor>
    <docanchor file="classrolly_1_1dll_1_1plugin.html" title="Example plugin interface">plugin_example_plugin_interface</docanchor>
    <docanchor file="classrolly_1_1dll_1_1plugin.html" title="Example plugin implementation">plugin_example_plugin_impl</docanchor>
    <docanchor file="classrolly_1_1dll_1_1plugin.html" title="Example application">plugin_example_plugin_app</docanchor>
    <docanchor file="classrolly_1_1dll_1_1plugin.html" title="Output">plugin_example_plugin_output</docanchor>
  </compound>
  <compound kind="class">
    <name>rolly::dll::plugin_loader</name>
    <filename>classrolly_1_1dll_1_1plugin__loader.html</filename>
    <base protection="private">rolly::pin</base>
    <member kind="function">
      <type></type>
      <name>plugin_loader</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>a13eef6db62b0a7f43d496c2fcfe5f650</anchor>
      <arglist>(std::any init_data)</arglist>
    </member>
    <member kind="function">
      <type>result&lt; plugin * &gt;</type>
      <name>load</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>a042cb25dc22561bcc289d2364bf6b4d8</anchor>
      <arglist>(std::string_view name)</arglist>
    </member>
    <member kind="function">
      <type>result&lt; plugin * &gt;</type>
      <name>load</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>aebf4e0d6556ef1203b333d3878517887</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view name)</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>unload</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>a38b487643397a2f0c29c120f8ede3ba1</anchor>
      <arglist>(std::string_view name)</arglist>
    </member>
    <member kind="function">
      <type>result</type>
      <name>load_all</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>a929e00117a988f8c03074599eae5316a</anchor>
      <arglist>(std::filesystem::path const &amp;path, std::string_view extension=plugin_loader::native_extension())</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; plugin &gt; &gt; const  &amp;</type>
      <name>plugins</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>add920d5649094e721c145343b78c5271</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; plugin &gt; &gt; &amp;</type>
      <name>plugins</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>a5197d0b7d67fa62a08cd3807ada21483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; std::string, shared_library &gt; const  &amp;</type>
      <name>libraries</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>ab8b37e40341d625d21a8e0f4d9fe4bcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; std::string, shared_library &gt; &amp;</type>
      <name>libraries</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>a9ad17968ce6970294a52ce19058d3a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::reference_wrapper&lt; T &gt; &gt;</type>
      <name>query_interface_by_type</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>a726c11a3dfad18e7b56ae55fa24bd6b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::reference_wrapper&lt; T &gt; &gt;</type>
      <name>query_interface</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>abb17c3456dfe332d00c39917da83812d</anchor>
      <arglist>(std::string_view interface_name) const</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::reference_wrapper&lt; T &gt; &gt;</type>
      <name>query_interface</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>a7406040b9d002d107ec477cf677110e5</anchor>
      <arglist>(guid const &amp;uuid) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string_view</type>
      <name>native_extension</name>
      <anchorfile>classrolly_1_1dll_1_1plugin__loader.html</anchorfile>
      <anchor>aa5ddc06c4d3be94b529d49e9b8c0d19e</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::types::point2d</name>
    <filename>structrolly_1_1types_1_1point2d.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a107b40f8f53dbbb17f9224074426b8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size2d&lt; number_type &gt;</type>
      <name>size2d_type</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aca415dad69e458881b26ebb293dadd03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector2d&lt; number_type &gt;</type>
      <name>vector2d_type</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aefb331b2e63a2318c2322e2f6dd68e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a8309f6a91b9a3bf1e60930642489704f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>adaa9ee962add91d3195ab65fa81b3036</anchor>
      <arglist>(number_type x, number_type y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a5e33226da626860ba9780746bbfea353</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a8acad6ce2b894c6fbcb928bc2681a2e7</anchor>
      <arglist>(size2d_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a2a57ca14183941daa2d14efdc93cf98a</anchor>
      <arglist>(vector2d&lt; number_type &gt; const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aa9dd348d29b48f5544b5b1fb6f551f63</anchor>
      <arglist>(F &amp;&amp;fn) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>zip</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>afe7ce514915669e40cfa8357d337dd02</anchor>
      <arglist>(point2d const &amp;other, F &amp;&amp;fn) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d_type</type>
      <name>to_size2d</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ae2f0dff27f264a72bd885ec6ae87fec7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; number_type &gt;</type>
      <name>to_vector2d</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ac2b0983e1aef983282f639f645773e14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>to_f32</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ab3e5ec535cd4a8f62d5fcf8d6c0c78e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; f64 &gt;</type>
      <name>to_f64</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>af121ce08567dabbc578cb00d0a185018</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; u32 &gt;</type>
      <name>to_u32</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aed48a77f21850e1cc3dfc2334771a230</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; u64 &gt;</type>
      <name>to_u64</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a7326c358d8e846eca7cbc0e5be8feab3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; usize &gt;</type>
      <name>to_usize</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ac343688a6c53fd1f85a681ca3a5e34bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; i32 &gt;</type>
      <name>to_i32</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a03d83cad8c39fbd2d55bf94fd301b841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; i64 &gt;</type>
      <name>to_i64</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a0beaddc77edbfcee9e24d7baefb4b5fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; isize &gt;</type>
      <name>to_isize</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ae9e6f63112c6efcf2d099ad5c880cb33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>div_euclid</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a99ce985c9b7b330173ec9102618a734d</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>rem_euclid</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ad7a5b8680b9debb85b5f5303b9308efc</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aa3d3553a31f701f4478b4a677e105229</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ac3f967cd57b25335a210d78ecf0d94c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aa6539747cd15b9833372eef10125c797</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a8aa02e2b747bfa29a5952d92c7200d92</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a564ee3611258da0d1490fccf698b7a49</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aeb82eef9d0fa589582978bef726e7c22</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ad292b9946c18c60310d04ac803c8dbf2</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a155699052321b915cb254cbb50a79020</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>x</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a23d20565ed8828ea60602ae5f69d45b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>y</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ad8e273c4442bfd92a64727fd411385a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>x_mut</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a9e764a6a4f38cbdb7711383af5fa8d18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>y_mut</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a7212185fd6ab59c60da53e8e15606a4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>inverted</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>abc96ec4d6a1dc687107250ee15371984</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>acdee2fae21eb84437089f84df0234b00</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a6418e811b603149d344cc6c92845d676</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ab154c51eff222eda2c7f3c4722da279a</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a03508a5b76a4f7965d217993c147aff9</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aac993ecccd3d88aafefb6b8e3caa1dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; number_type, 2 &gt;</type>
      <name>to_array</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a25129afd086e1ed1078677311854d7ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::tuple&lt; number_type, number_type &gt;</type>
      <name>to_tuple</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a773014d9be700f99ca76e9990945e509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; number_type, number_type &gt;</type>
      <name>to_pair</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a67ac57bed3924789d4157e4a9487749c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>round</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a54e757ef2d9c198f0964f184267373a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>ceil</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aca0b014878e192e6aa9d9aea85395992</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>floor</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ad77fe8fabcb32f2d8ae019f13dcf1608</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>lerp</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a3adcd0e5c871b95c7541f0eae758d622</anchor>
      <arglist>(point2d const &amp;other, f32 t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>max</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aa751b3d34455c80ef9cec7794d7bdf50</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>min</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ae0b3c78c0f61578b2bb16038be75ffc8</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>clamp</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a216a390e53810b375729e6a5f7956b05</anchor>
      <arglist>(point2d const &amp;start, point2d const &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d</type>
      <name>abs</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ace4abc8698a1ec840274c6217bb74a0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>dot</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>af51b98c64e4d24aa50dbf3f428eecc86</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aa0239cd49090fcc6387f0b454063a9fa</anchor>
      <arglist>(point2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_finite</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a09eb0be0be1b9fb26096c1fccbe3d9ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_positive</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a231e8ba696d19d5efb24deba2b63c471</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>requires</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aaa88e4ccbb9262e7210d7e3bab936670</anchor>
      <arglist>(N2==2) static const expr point2d from_array(std</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ad0ed9dded3dc4405713f0b9270930a92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ac252a44c73ef696bf047b7b7b0ea13bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr QPoint</type>
      <name>to_qpoint</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a5bb30b1860728abb55719daeb06e8cc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr QPointF</type>
      <name>to_qpointf</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aabfa34e9f3053f5c3a5cc19cbc9b6632</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a836d8bb1db241638c74685bb4debd497</anchor>
      <arglist>(QPoint const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>point2d</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a6cb1ba067e15b19a3b2676a6ea96431c</anchor>
      <arglist>(QPointF const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>origin</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a37ca83d84630aa765f2e8a2976f4d529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_size2d</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a744fecea6c6883996d7045f139bc7386</anchor>
      <arglist>(size2d_type const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>zero</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>aeef6a0c0becfedb1b3c8c7dee36ccf0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>splat</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a147ab4c455314edbc2049ba7c0b91266</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_tuple</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>af1ee2b647132ba80f6e2bde339e987b6</anchor>
      <arglist>(std::tuple&lt; Args... &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_pair</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>ac4b37956dff371a083c70dc28aa0e371</anchor>
      <arglist>(std::pair&lt; number_type, number_type &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr point2d</type>
      <name>from_qpointf</name>
      <anchorfile>structrolly_1_1types_1_1point2d.html</anchorfile>
      <anchor>a39531c051906a16adf33fde525307ece</anchor>
      <arglist>(QPointF const &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::meta::project_meta</name>
    <filename>classrolly_1_1meta_1_1project__meta.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>project_meta</name>
      <anchorfile>classrolly_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>afd20daab765750f3f6a9a5371d7306ff</anchor>
      <arglist>(struct version version, std::string_view name, std::string_view domain, std::string_view organization) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr struct version</type>
      <name>version</name>
      <anchorfile>classrolly_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a00fa0078220b94333ca2fc508e401daa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>name</name>
      <anchorfile>classrolly_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a6dbef6eba3f6e10e6214264935416840</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>domain</name>
      <anchorfile>classrolly_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>a82b2a19d47f1a52d8d8e7369f46e85fa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>organization</name>
      <anchorfile>classrolly_1_1meta_1_1project__meta.html</anchorfile>
      <anchor>ab9a206438e0c206e925fcd11f4722b8a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::propagate_const</name>
    <filename>classrolly_1_1propagate__const.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>rolly::qt::qml::registrable</name>
    <filename>classrolly_1_1qt_1_1qml_1_1registrable.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::remove_cvref</name>
    <filename>namespacerolly.html</filename>
    <anchor>structrolly_1_1remove__cvref</anchor>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>type</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a177da67acb1f34ee3cea5cffccf746f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::savefile</name>
    <filename>classrolly_1_1savefile.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>rolly::io::filedevice</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~savefile</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a81e4249a7edf6ffa938d5d78aa8cf7ee</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a315419f26d3c59fa143b49b90a019049</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::filesystem::path const  &amp;</type>
      <name>backing_path</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>ac4dfaae4c0325a9b6ee8a036e8e7ed29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>values</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a118d219d09d66ec2576a7bbc31a69d26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>values_mut</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a61e8a1bf44a495e3db6ffc8041a87b5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a5106a6501de93b303865bfbab20ddb18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commit</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>afce99a75399ac776b73cdcaf2fee2373</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a420e60e9788bfa3b52aa3aab72ea3a5e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>operator()</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a1e344333134003bc0aab05727b4a4e3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a9b6e1a7a6d5d7db85bae38ba04aaec7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>savefile &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a67c4c1912dccc41ca8dc6bac11854f71</anchor>
      <arglist>(savefile const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>savefile &amp;</type>
      <name>operator=</name>
      <anchorfile>classrolly_1_1savefile.html</anchorfile>
      <anchor>a4cf07cf4f519c8a159f36eb314bd932f</anchor>
      <arglist>(savefile &amp;&amp;)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::detail::scope_guard&lt; Callback &gt;</name>
    <filename>classrolly_1_1detail_1_1scope__guard_3_01Callback_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>scoped_connection</name>
    <filename>classscoped__connection.html</filename>
    <base>connection</base>
  </compound>
  <compound kind="class">
    <name>rolly::exceptions::serialization_error</name>
    <filename>classrolly_1_1exceptions_1_1serialization__error.html</filename>
    <templarg></templarg>
    <base>std::runtime_error</base>
  </compound>
  <compound kind="class">
    <name>rolly::dll::shared_library</name>
    <filename>classrolly_1_1dll_1_1shared__library.html</filename>
    <base protection="private">rolly::noncopyable</base>
    <member kind="function">
      <type>std::string_view</type>
      <name>soname</name>
      <anchorfile>classrolly_1_1dll_1_1shared__library.html</anchorfile>
      <anchor>a367ef6b434a999724cfc85dfc006badb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>signal_base</name>
    <filename>classsignal__base.html</filename>
    <templarg></templarg>
    <templarg>T</templarg>
    <base>detail::cleanable</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>adc61e3f20182ec18fe7b33e3f31e670d</anchor>
      <arglist>(U &amp;&amp;... a) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; trait::is_callable_v&lt; arg_list, Callable &gt;, connection &gt;</type>
      <name>connect</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a416fd3f71ad61dfa22a70b274496f576</anchor>
      <arglist>(Callable &amp;&amp;c, group_id gid=0)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; trait::is_callable_v&lt; ext_arg_list, Callable &gt;, connection &gt;</type>
      <name>connect_extended</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a20320695ff13b2c29d5705aadef9b68d</anchor>
      <arglist>(Callable &amp;&amp;c, group_id gid=0)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; trait::is_callable_v&lt; arg_list, Pmf, Ptr &gt; &amp;&amp;trait::is_observer_v&lt; Ptr &gt;, connection &gt;</type>
      <name>connect</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a02c22b38fb69ac4dbd4213ac46041e05</anchor>
      <arglist>(Pmf &amp;&amp;pmf, Ptr &amp;&amp;ptr, group_id gid=0)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; trait::is_callable_v&lt; arg_list, Pmf, Ptr &gt; &amp;&amp;! trait::is_observer_v&lt; Ptr &gt; &amp;&amp;! trait::is_weak_ptr_compatible_v&lt; Ptr &gt;, connection &gt;</type>
      <name>connect</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a14f21af9bba5f6a415b6903ab8976ade</anchor>
      <arglist>(Pmf &amp;&amp;pmf, Ptr &amp;&amp;ptr, group_id gid=0)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; trait::is_callable_v&lt; ext_arg_list, Pmf, Ptr &gt; &amp;&amp;! trait::is_weak_ptr_compatible_v&lt; Ptr &gt;, connection &gt;</type>
      <name>connect_extended</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a7465de5a78da9273f2e0d2271749904e</anchor>
      <arglist>(Pmf &amp;&amp;pmf, Ptr &amp;&amp;ptr, group_id gid=0)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; ! trait::is_callable_v&lt; arg_list, Pmf &gt; &amp;&amp;trait::is_weak_ptr_compatible_v&lt; Ptr &gt;, connection &gt;</type>
      <name>connect</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>aa093137f1fee7e7d3794e3524aec579f</anchor>
      <arglist>(Pmf &amp;&amp;pmf, Ptr &amp;&amp;ptr, group_id gid=0)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; trait::is_callable_v&lt; arg_list, Callable &gt; &amp;&amp;trait::is_weak_ptr_compatible_v&lt; Trackable &gt;, connection &gt;</type>
      <name>connect</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a22daf56f4c425148e89277f4173b48f8</anchor>
      <arglist>(Callable &amp;&amp;c, Trackable &amp;&amp;ptr, group_id gid=0)</arglist>
    </member>
    <member kind="function">
      <type>scoped_connection</type>
      <name>connect_scoped</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a4ed3027626b8d475a8bb4085b5fb32f2</anchor>
      <arglist>(CallArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt;(trait::is_callable_v&lt; arg_list, Callable &gt;||trait::is_callable_v&lt; ext_arg_list, Callable &gt;||trait::is_pmf_v&lt; Callable &gt;) &amp;&amp;detail::function_traits&lt; Callable &gt;::is_disconnectable, size_t &gt;</type>
      <name>disconnect</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>ae65354dca29c9244b5ddce4893c7e050</anchor>
      <arglist>(Callable const &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; ! trait::is_callable_v&lt; arg_list, Obj &gt; &amp;&amp;! trait::is_callable_v&lt; ext_arg_list, Obj &gt; &amp;&amp;! trait::is_pmf_v&lt; Obj &gt;, size_t &gt;</type>
      <name>disconnect</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a3f3f7f2dd387a0dd96c939dcbaec92fa</anchor>
      <arglist>(Obj const &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>disconnect</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>acbdfdfd1a4812f3b7fa36599e6762414</anchor>
      <arglist>(Callable const &amp;c, Obj const &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>disconnect</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a581fa6bed07a4abaea3dec3a4a4605e1</anchor>
      <arglist>(group_id gid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect_all</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a02922e7231c3a315b2bfd1049b675365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a6492f4e68ba91c40f179d15508a679e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unblock</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a27e7a6a740ea8eeb2791b996adce72b4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>blocked</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>abc95cfa1a604cb7c20dd0fbb1b1a4c3d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>slot_count</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>aec593142dca44f0123df15cf2793bc29</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clean</name>
      <anchorfile>classsignal__base.html</anchorfile>
      <anchor>a28774e1a1bc1350680ee08faf26e8ff9</anchor>
      <arglist>(detail::slot_state *state) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rolly::signal_base</name>
    <filename>namespacerolly.html</filename>
    <anchor>classrolly_1_1signal__base</anchor>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>detail::signal_wrapper</name>
    <filename>structdetail_1_1signal__wrapper.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>rolly::singleton</name>
    <filename>structrolly_1_1singleton.html</filename>
    <templarg></templarg>
    <base>rolly::pin</base>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>ptr_mut</name>
      <anchorfile>structrolly_1_1singleton.html</anchorfile>
      <anchor>a6bb8491f2df12f623ddc298edbfb788c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T const  *</type>
      <name>ptr</name>
      <anchorfile>structrolly_1_1singleton.html</anchorfile>
      <anchor>abb031ad0c88c2300b56966f2fbefe2e1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T const  &amp;</type>
      <name>ref</name>
      <anchorfile>structrolly_1_1singleton.html</anchorfile>
      <anchor>ac16bb149a26982caaa359e84b3ce4f42</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T &amp;</type>
      <name>ref_mut</name>
      <anchorfile>structrolly_1_1singleton.html</anchorfile>
      <anchor>abf6b2ca64d1ba903a546941f62779d4c</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::types::size2d</name>
    <filename>structrolly_1_1types_1_1size2d.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a107b40f8f53dbbb17f9224074426b8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a35447c126800f7a4302ba2af7cd66411</anchor>
      <arglist>(size2d const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a618109a64ac4cba549e2a6d25f6c0cd9</anchor>
      <arglist>(size2d const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a2d50877007a22752a7292a88c95ed6f8</anchor>
      <arglist>(size2d &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a94676acb5e8ff50209cf6886e09b6b43</anchor>
      <arglist>(size2d &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>af511b2e0426d957343779166907439fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a292f11d09851adc68f8f60b50216cd9e</anchor>
      <arglist>(number_type x, number_type y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a90090e51fc91401ed1ba552cbf1b05f1</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ac189045668ab39657be7db09f34d6f15</anchor>
      <arglist>(point2d&lt; number_type &gt; const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>aa11dc7bf967ab05052263482133a03ff</anchor>
      <arglist>(vector2d&lt; number_type &gt; const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>inverted</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a9f83aeaabb5dca616513668ff812f165</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>x</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a23d20565ed8828ea60602ae5f69d45b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>y</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ad8e273c4442bfd92a64727fd411385a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>x_mut</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a9e764a6a4f38cbdb7711383af5fa8d18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>y_mut</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a7212185fd6ab59c60da53e8e15606a4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>width</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>afd175a8ec445e68f164ae4d65673cc28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>height</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a4b978383c4f7e8992279ac67e3193bda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>width_mut</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ada99cbb83067f0f172dcc766d04a4c68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>height_mut</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>aa7aaa79cc094a08c7ddc39c056b927c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>aac993ecccd3d88aafefb6b8e3caa1dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; number_type, 2 &gt;</type>
      <name>to_array</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a25129afd086e1ed1078677311854d7ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::tuple&lt; number_type, number_type &gt;</type>
      <name>to_tuple</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a773014d9be700f99ca76e9990945e509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; number_type, number_type &gt;</type>
      <name>to_pair</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a67ac57bed3924789d4157e4a9487749c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>round</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>aeffd93a88852c0ba4d0c92f5d737cd90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>ceil</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ae798bbf805c9e9b542ec541534ec0a18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>lerp</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>abb313668b1c479efda4864fa5e702b18</anchor>
      <arglist>(size2d const &amp;other, f32 t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>max</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>afefbf271cf6c7924e08116c924878f28</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>min</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a0d01e5ac468318f504b6493c901ec463</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>clamp</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a2aabf4fe2af2e63d0f014260e9d13e37</anchor>
      <arglist>(size2d const &amp;start, size2d const &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>abs</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a1e9f97bd0d5587b31d117df29c28e55a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>dot</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ae00ce5f8010628203d96c9c83d57549f</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a2901bb7d1cac020c38b1564de50cfed3</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_finite</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a09eb0be0be1b9fb26096c1fccbe3d9ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_positive</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a231e8ba696d19d5efb24deba2b63c471</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>requires</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a7d2bbc553fa9b07157c1e60536c45cd5</anchor>
      <arglist>(N2==2) static const expr size2d from_array(std</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ad0ed9dded3dc4405713f0b9270930a92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ac252a44c73ef696bf047b7b7b0ea13bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d&lt; number_type &gt;</type>
      <name>to_point2d</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ab9ac4cd426342503f1f042a51470593c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; number_type &gt;</type>
      <name>to_vector2d</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ac2b0983e1aef983282f639f645773e14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; T2 &gt;</type>
      <name>cast</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a6d1f5ab120dc1249f3957364ea4ca08c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>to_f32</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a2a9968f570f4b9c725759a8e01965ab7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; f64 &gt;</type>
      <name>to_f64</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>abc3f0758e4708e6ec5268bc04124fa1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; u32 &gt;</type>
      <name>to_u32</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a0d7edb63dd4ea49c014b9453eb5f59c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; u64 &gt;</type>
      <name>to_u64</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>aed2e608b3dfd13e494846164b6a862fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; usize &gt;</type>
      <name>to_usize</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ab77fb89662764e0ebf0ffb88d2ee1a83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; i32 &gt;</type>
      <name>to_i32</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a2d49c1c8f75b5118e483e60301d663a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; i64 &gt;</type>
      <name>to_i64</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ab700c0137734d4d31361e41ad5b19e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d&lt; isize &gt;</type>
      <name>to_isize</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a75645228e93837e8b95cdfa72c81b23d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>area</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a93372fd934b4d48851c3744d3b2459e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a3820c3154aeba18fca212d9e0cfe15eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a091915ad3b593bfdb1b91cfbab628806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>afe58c4ae5a1b86722f1bb7e493d9c4c7</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>aa8e1a22e8c56a57174744d5f29381cb3</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a03bb0c520217a5ec4d674ef5919a67fd</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a1bbe18feced3a808007b32c01a468f5c</anchor>
      <arglist>(size2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a4e50cf45daf31c0230ad9817e9505617</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a7b3f9ee15a663bff92cd2fc18ad1449b</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a48b3ca3c60b15e28feb97078b842df53</anchor>
      <arglist>(size2d const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a004d06472b0bc95ea68d8109e6881f23</anchor>
      <arglist>(size2d const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ac021356eb669cb80b1fe88a0409ddacd</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>aed9513e93bda0b6d5437f27b5efb5b6a</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a6d6a33b6751a162fe8ae5fa9afdca5ad</anchor>
      <arglist>(QSize const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>size2d</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ab32b02ca1608f0e8eb61fcdda22b8b0a</anchor>
      <arglist>(QSizeF const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr QSize</type>
      <name>to_qsize</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ab618ae49b64028b5f82e1576dc1caac8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr QSizeF</type>
      <name>to_qsizef</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>aad6f8c3ba195944ffd3afe60bc5168c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>zero</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a36b9a814805a9ceda7540bbf51922584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>splat</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>ae153e1878556244a110e988e13dbf38a</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_tuple</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>aba8cc630689bb12a861e755ebf08b1dd</anchor>
      <arglist>(std::tuple&lt; Args... &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_pair</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a13769708074262c9f8e6c275fe50a637</anchor>
      <arglist>(std::pair&lt; number_type, number_type &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_qsize</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>a86e6953410f514fcbb502a3d6c49f4e2</anchor>
      <arglist>(QSize const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size2d</type>
      <name>from_qsizef</name>
      <anchorfile>structrolly_1_1types_1_1size2d.html</anchorfile>
      <anchor>aadbb4ede8a4953dc30569ab2996ee350</anchor>
      <arglist>(QSizeF const &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>detail::slot</name>
    <filename>classdetail_1_1slot.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <base>slot_base&lt; Args... &gt;</base>
  </compound>
  <compound kind="class">
    <name>detail::slot_base</name>
    <filename>classdetail_1_1slot__base.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="class">
    <name>slot_base&lt; Args... &gt;</name>
    <filename>classdetail_1_1slot__base.html</filename>
  </compound>
  <compound kind="class">
    <name>detail::slot_extended</name>
    <filename>classdetail_1_1slot__extended.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <base>slot_base&lt; Args... &gt;</base>
  </compound>
  <compound kind="class">
    <name>detail::slot_pmf</name>
    <filename>classdetail_1_1slot__pmf.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <base>slot_base&lt; Args... &gt;</base>
  </compound>
  <compound kind="class">
    <name>detail::slot_pmf_extended</name>
    <filename>classdetail_1_1slot__pmf__extended.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <base>slot_base&lt; Args... &gt;</base>
  </compound>
  <compound kind="class">
    <name>detail::slot_pmf_tracked</name>
    <filename>classdetail_1_1slot__pmf__tracked.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <base>slot_base&lt; Args... &gt;</base>
  </compound>
  <compound kind="class">
    <name>detail::slot_state</name>
    <filename>classdetail_1_1slot__state.html</filename>
  </compound>
  <compound kind="class">
    <name>detail::slot_tracked</name>
    <filename>classdetail_1_1slot__tracked.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <base>slot_base&lt; Args... &gt;</base>
  </compound>
  <compound kind="struct">
    <name>rolly::source_location</name>
    <filename>structrolly_1_1source__location.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>source_location</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>aa3cb6509b6b1bf6578be6a615bd953ff</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>source_location</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>ab4db290a610d39b573e19741af9ae785</anchor>
      <arglist>(char const *file, u32 const line, char const *function, u32 const column=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>file_name</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>ae717d00b3711fb812ccfb98628d8f5e1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>function_name</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>a8af370924a943275a5e5a433fd1c583d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u32</type>
      <name>line</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>ae80537f8deeb62f3a096942c712e3514</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr u32</type>
      <name>column</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>ad13c9f520c7bf10be0046ae4c80de266</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ___consteval___ source_location</type>
      <name>current</name>
      <anchorfile>structrolly_1_1source__location.html</anchorfile>
      <anchor>aaaaf953ad222414ab57c56a8fa80db88</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>detail::spin_mutex</name>
    <filename>structdetail_1_1spin__mutex.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::toml</name>
    <filename>namespacerolly_1_1serialization_1_1format.html</filename>
    <anchor>structrolly_1_1serialization_1_1format_1_1toml</anchor>
  </compound>
  <compound kind="struct">
    <name>rolly::trait::typelist</name>
    <filename>structrolly_1_1trait_1_1typelist.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>rolly::types::vector2d</name>
    <filename>classrolly_1_1types_1_1vector2d.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a107b40f8f53dbbb17f9224074426b8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size2d&lt; number_type &gt;</type>
      <name>size2d_type</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>aca415dad69e458881b26ebb293dadd03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>point2d&lt; number_type &gt;</type>
      <name>point2d_type</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a1d5735ed4c41bd513ff41fb16bd7b6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>angle&lt; number_type &gt;</type>
      <name>angle_type</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a8357a890991f50704b194bfdaf6db653</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a7e8970e8b7e68e1410051f63744399fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ada46fed9c6b7cf483e202a0f6c10c4de</anchor>
      <arglist>(number_type x, number_type y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a857c3c56d7047d36aa760fc80fa14f08</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ab3903622b5a9c151ad0566b0f08356da</anchor>
      <arglist>(size2d_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a12a757b7f4ae40284ce07a0d8215d096</anchor>
      <arglist>(point2d&lt; T &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>map</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ad0bb20b92dba09e01dfe5b5bcc40db90</anchor>
      <arglist>(F &amp;&amp;fn) const -&gt; std::enable_if_t&lt; std::is_invocable_v&lt; F, number_type &gt;, vector2d&lt; decltype(fn(std::declval&lt; number_type &gt;()))&gt;&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>zip</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a9287d4cce8079a793e2afe63a8ec60d0</anchor>
      <arglist>(vector2d const &amp;other, F &amp;&amp;fn) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size2d_type</type>
      <name>to_size2d</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ae2f0dff27f264a72bd885ec6ae87fec7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr point2d_type</type>
      <name>to_point2d</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a37f992c89080866042767b6bf3ad7995</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>length_squared</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>aba19e8ffeec6286f6832bec689f4bd5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>length_scalar</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a641f5298f25ad854f24229789b78b92a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>inverted</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>aa84a741a0bfe46fb4ce8bf4878ed58cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>x</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a23d20565ed8828ea60602ae5f69d45b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>y</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ad8e273c4442bfd92a64727fd411385a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>x_mut</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a9e764a6a4f38cbdb7711383af5fa8d18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type &amp;</type>
      <name>y_mut</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a7212185fd6ab59c60da53e8e15606a4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>aac993ecccd3d88aafefb6b8e3caa1dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; number_type, 2 &gt;</type>
      <name>to_array</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a25129afd086e1ed1078677311854d7ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::tuple&lt; number_type, number_type &gt;</type>
      <name>to_tuple</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a773014d9be700f99ca76e9990945e509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::pair&lt; number_type, number_type &gt;</type>
      <name>to_pair</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a67ac57bed3924789d4157e4a9487749c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>round</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a97747374c3a29bcfa312be97fd4e1e53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>ceil</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a8937db5747cbb32c466cedc8740f06c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>floor</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a783bd4f0e1a867d1e0261899124fb640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>lerp</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ad86148d27d61ca09bbab7c37b841a7ea</anchor>
      <arglist>(vector2d const &amp;other, f32 t) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>max</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ae266a2489cfe2529a5ba1ede03d94b6b</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>min</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a921a9d3d4e46ca766139644751a3249b</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>clamp</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ac6095fccd7008abe861a426979eac90a</anchor>
      <arglist>(vector2d const &amp;start, vector2d const &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>dot</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a2eb5fce88833aeedc48a8b9540e4c331</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>acd8165ec48627828963b6d6c00458c4a</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>abs</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a7b6d8c066c62800ec8f9dc54e748f705</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>project</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a69b18d171f435a723a6695a3d23d46db</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>cross</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a0aa4a338eae196cea530b881c28031c9</anchor>
      <arglist>(T const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_finite</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a09eb0be0be1b9fb26096c1fccbe3d9ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_positive</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a231e8ba696d19d5efb24deba2b63c471</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>requires</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ab002902ffa14c206196ac5048757d0cb</anchor>
      <arglist>(N2==2) static const expr vector2d from_array(std</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ad0ed9dded3dc4405713f0b9270930a92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ac252a44c73ef696bf047b7b7b0ea13bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle_type</type>
      <name>angle_to</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ae4b63807bd0a4dba2d7b50026954830a</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr angle_type</type>
      <name>angle_to_x_axis</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a07c9e872f7efce9314325103915c140f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>normalized</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>afb75e5f86524f9a3ed4c83c0f84b9df7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>reflected</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a8bffb7234774d3ab69d9593c3bac1429</anchor>
      <arglist>(vector2d const &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; T2 &gt;</type>
      <name>cast</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>aa89ade0ea46daffaf17d29940cc4991d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>to_f32</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ad9cf886fded0e42bd136002993414e31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; f64 &gt;</type>
      <name>to_f64</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a58ed5a277b603e4642732653aefda9bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; u32 &gt;</type>
      <name>to_u32</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a887b052249d9eea4fc59a73f06139089</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; u64 &gt;</type>
      <name>to_u64</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a392137cf12aaac4c80d5d2455bfb35b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; usize &gt;</type>
      <name>to_usize</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a450184d2d99eb13abc133c3ae27e243e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; i32 &gt;</type>
      <name>to_i32</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>aea5d3113a001031c7d3a8d1993cf2cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; i64 &gt;</type>
      <name>to_i64</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>aec7169fdf8348242d8966fb5129f8f3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d&lt; isize &gt;</type>
      <name>to_isize</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>aa6beccc006821d44b8d762a215839157</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator+</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>acba331faf26529e484bb777e86acaf17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator-</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>afcfa2ea6cc2776a9d9f38e7e26cd8229</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ade843849c4c632880d7cb189b80d7f6c</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator+</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a50628fcf9d858a6a4c7c13076479b2dd</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a2f661ebdadffdd3a3ae66ec32110d995</anchor>
      <arglist>(vector2d const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator-</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ad1de12dc49fa4dcea5ed19214ea7cfd5</anchor>
      <arglist>(Q const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator*</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a8770dfe270833d5bc8c3a3de43af4500</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d</type>
      <name>operator/</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a4925eb64a9c4990537c6cf98646c44b0</anchor>
      <arglist>(number_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator+=</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>aa6529687089035a3f4a5cd8814749e01</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator-=</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a07632ba1cb25331e137a0ad94a936845</anchor>
      <arglist>(Q const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator*=</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a30311cf9345b9d54ca5e679f1c4d3ebd</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector2d &amp;</type>
      <name>operator/=</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>abea34b1d175efe7e5b5cd1fde44bffd2</anchor>
      <arglist>(number_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector2d</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a8390fa9124293f298d9ef42c276a9304</anchor>
      <arglist>(QVector2D const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr QVector2D</type>
      <name>to_qvector2d</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a3ad2d6a454f038367c91804def5ec521</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>zero</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>aff861cc1aa2b5d336d5134477f1ba4b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>splat</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ae0cdbad8a42afb341e9e28c05e4297a7</anchor>
      <arglist>(number_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>from_tuple</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ac7bff978b48e1a895e77d1900fb65ddc</anchor>
      <arglist>(std::tuple&lt; Args... &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>from_pair</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>ae98595dc9943409ffa7360864f1156ad</anchor>
      <arglist>(std::pair&lt; number_type, number_type &gt; const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>one</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>a8251d0051470489a585612a3c4cf821f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector2d</type>
      <name>from_qvector2d</name>
      <anchorfile>classrolly_1_1types_1_1vector2d.html</anchorfile>
      <anchor>adac189c18610be0ec4e01d6ebc30f617</anchor>
      <arglist>(QVector2D const &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::types::velocity</name>
    <filename>structrolly_1_1types_1_1velocity.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>number_type</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a107b40f8f53dbbb17f9224074426b8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a595f83924562103941cf49228c292f06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a7c93c75912bcbce960ab8da8ff204125</anchor>
      <arglist>(number_type const value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~velocity</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>aaf12ef801ad20d51faf41826b8c18b83</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a083bb7b47f044b047fafda458c5ba161</anchor>
      <arglist>(velocity const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>velocity</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a0c02bd8d238e9e3f5ed913376337e9ce</anchor>
      <arglist>(velocity &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>ac160707298a3b02b93dd89fecf4b5ed4</anchor>
      <arglist>(velocity const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a9d449959748f6ef550258665862aebf4</anchor>
      <arglist>(velocity &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a767242fe07f6a7d1091a32c0462822c4</anchor>
      <arglist>(velocity_unit u=velocity_unit::meters_per_second) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>in</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a9218853344b2ab6f68c559b2e1e38b04</anchor>
      <arglist>(velocity_unit u) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>kmph</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>abfb7a96dc22e28517d1886226f908146</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>mps</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>aca506cd9750552c9afe0902eff87f277</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity&lt; U &gt;</type>
      <name>cast</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a022c0ba5543853b07cc8247eab3ced66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>value</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a524546a00e65da4c0a58a20d7913a593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr U</type>
      <name>as</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a7b1e681365ca2379776ba38496c8d9e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f32</type>
      <name>as_f32</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a4eadd631845fcfea8cf526a58403cf9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr f64</type>
      <name>as_f64</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a4f3d1e4786e042fac8b82314a89439ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a287bb4c3be885ca0f758ecfa8ad27682</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a566265d7ea4ab6649c2bfdf2e96145af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator++</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>afe13db0e1af81cd99e0f21f4b35561f1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>afd70a5715cd3b48b3a1f247e6f5bc0a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>operator--</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a32ad7696f348d2811a994e27daf6cc67</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>ad0ed9dded3dc4405713f0b9270930a92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator number_type</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a11f5e5b2d5a79d40ca187cb76f1c5fff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a1e17ad59806c8576b924b05d15851839</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a44625f37f3945facae3ce6df3e309eac</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a26f06a2a5f0d1922d7014306f7f3452f</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>ac4a2a5ddb00771e4811cfcbd650046f9</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>ac994ac0cc109e2af0899a906c8ea7ff7</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a06337aa6ef04fcdef9c227e7ba0425f1</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr number_type</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a187480616a4887aa0d98538df458e26d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>ac84fad9a679cc80ce232892f98fecc9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>ab87eef98ea02d51865c0015577da93fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>ad286b16bdcf8102ba1827d7d2c2fbcab</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a244abd0b1f7a7aa4f078bd8fa584716d</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a8a9e24904130c4dc7a3916d81e356346</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a5560374113833ba2c819cdcc130ec525</anchor>
      <arglist>(velocity const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a28373e32a7af5f56f5ab6ea01d9a7485</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>ae8c8d72b46fc352afedee6ecdfa8de9c</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a071e223a9a68a4e4c41bb5e4ddcf7fac</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a2e24cc856d4994531f3059dc89a8c540</anchor>
      <arglist>(velocity const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator*</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a3f0519ec8fc6c583fc26b36954a0d03f</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator/</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a185fdef36e7499d7bcc7236405e39cdc</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator+</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a2b8ec0ab01f877aa6a67eb206341c0bb</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity</type>
      <name>operator-</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a4fffa2df465e306a8a2e8a04059ed272</anchor>
      <arglist>(U const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>aa33f5800f942e7dc9c7371e3ecfc6cb5</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a7fbac48decbd498b61e79b0519e4d38c</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a2a8c27b81885c6db64253e9d2e726fc2</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>constexpr velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>a3d17bb9efd9a4b0f7d574fb4a62b14a6</anchor>
      <arglist>(U const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>from_kmph</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>ad3e9ad9eef9306a7c9728bfd786870cd</anchor>
      <arglist>(number_type kmph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>from_mps</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>aea9b49172055d70939d24b3a9c44fa1f</anchor>
      <arglist>(number_type mps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>from</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>ad5674a85926fdc6e0d32347f5256525f</anchor>
      <arglist>(number_type value, velocity_unit u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr velocity</type>
      <name>zero</name>
      <anchorfile>structrolly_1_1types_1_1velocity.html</anchorfile>
      <anchor>af98329d98332c5de7d68db12f21cb7e6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rolly::version</name>
    <filename>structrolly_1_1version.html</filename>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::xml</name>
    <filename>namespacerolly_1_1serialization_1_1format.html</filename>
    <anchor>structrolly_1_1serialization_1_1format_1_1xml</anchor>
  </compound>
  <compound kind="struct">
    <name>rolly::serialization::format::yaml</name>
    <filename>namespacerolly_1_1serialization_1_1format.html</filename>
    <anchor>structrolly_1_1serialization_1_1format_1_1yaml</anchor>
  </compound>
  <compound kind="namespace">
    <name>rolly</name>
    <filename>namespacerolly.html</filename>
    <namespace>rolly::concepts</namespace>
    <namespace>rolly::contracts</namespace>
    <namespace>rolly::dll</namespace>
    <namespace>rolly::exceptions</namespace>
    <namespace>rolly::io</namespace>
    <namespace>rolly::literals</namespace>
    <namespace>rolly::math</namespace>
    <namespace>rolly::meta</namespace>
    <namespace>rolly::numbers</namespace>
    <namespace>rolly::qt</namespace>
    <namespace>rolly::rtti</namespace>
    <namespace>rolly::serialization</namespace>
    <namespace>rolly::types</namespace>
    <class kind="struct">rolly::types::angle</class>
    <class kind="class">rolly::application_dirs</class>
    <class kind="class">rolly::bad_optional_access</class>
    <class kind="class">rolly::box</class>
    <class kind="class">rolly::exceptions::compile_time_error</class>
    <class kind="class">rolly::configuration_file</class>
    <class kind="struct">rolly::const_overload_t</class>
    <class kind="struct">rolly::deleter</class>
    <class kind="class">rolly::exceptions::deserialization_error</class>
    <class kind="class">rolly::dirs</class>
    <class kind="class">rolly::types::guid</class>
    <class kind="struct">rolly::is_any_of</class>
    <class kind="struct">rolly::is_num</class>
    <class kind="struct">rolly::is_qgadget</class>
    <class kind="struct">rolly::is_qgadget&lt; T, std::void_t&lt; decltype(T::staticMetaObject)&gt; &gt;</class>
    <class kind="struct">rolly::is_qobject</class>
    <class kind="struct">rolly::non_const_overload_t</class>
    <class kind="struct">rolly::noncopyable</class>
    <class kind="struct">rolly::nonmovable</class>
    <class kind="struct">rolly::nullopt_t</class>
    <class kind="class">rolly::observer_ptr</class>
    <class kind="class">rolly::optional</class>
    <class kind="class">rolly::optional&lt; T &amp; &gt;</class>
    <class kind="struct">rolly::ostream_formatter</class>
    <class kind="struct">rolly::overload_t</class>
    <class kind="struct">rolly::pin</class>
    <class kind="struct">rolly::plain_type</class>
    <class kind="class">rolly::types::point2d</class>
    <class kind="class">rolly::propagate_const</class>
    <class kind="struct">rolly::remove_cvref</class>
    <class kind="class">rolly::savefile</class>
    <class kind="class">rolly::exceptions::serialization_error</class>
    <class kind="class">rolly::signal_base</class>
    <class kind="struct">rolly::singleton</class>
    <class kind="struct">rolly::types::size2d</class>
    <class kind="struct">rolly::source_location</class>
    <class kind="struct">rolly::types::vector2d</class>
    <class kind="struct">rolly::types::velocity</class>
    <class kind="struct">rolly::version</class>
    <member kind="typedef">
      <type>std::integral_constant&lt; int, static_cast&lt; signed int &gt;(endian::big)&gt;</type>
      <name>big_endian_t</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>adee8f199e8943479e2e7ba5269bf0e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; int, static_cast&lt; signed int &gt;(endian::little)&gt;</type>
      <name>little_endian_t</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a3d7bc8c2e9c71c3e2399b4623676a000</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; int, static_cast&lt; signed int &gt;(endian::native)&gt;</type>
      <name>native_endian_t</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a1a021e92d7e75961d5ee7400ad081fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>owner</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a003e7028327d1c1243f546af6e61d80f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>propagate_const&lt; box&lt; T &gt; &gt;</type>
      <name>pimpl</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a454d33bccebd3c6eba3dd0c57a547365</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename remove_cvref&lt; T &gt;::type</type>
      <name>remove_cvref_t</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a3c0600da43d6867a247432fcc43ce84f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename plain_type&lt; T &gt;::type</type>
      <name>plain_type_t</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>abb6b740122d8db472da8ccec3de5ec9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>endian</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a7db57d2dfe8e47b6753b16adee1ddcd0</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly.html" anchor="a7db57d2dfe8e47b6753b16adee1ddcd0aaae6635e044ac56046b2893a529b5114">little</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="a7db57d2dfe8e47b6753b16adee1ddcd0ad861877da56b8b4ceb35c8cbfdf65bb4">big</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="a7db57d2dfe8e47b6753b16adee1ddcd0a8e5f3adee38c8fccc13c1f3be0143796">native</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>saving_policy</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ae1e5f60a57661fe4d13cf754e0a8d6ae</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly.html" anchor="ae1e5f60a57661fe4d13cf754e0a8d6aeaf47468435c3051a65ef52dbe8a7838b1">autosave</enumvalue>
      <enumvalue file="namespacerolly.html" anchor="ae1e5f60a57661fe4d13cf754e0a8d6aeac9c45ac5595e1bb329ad8e26396d93c5">explicit_</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>bit_cast</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a99bfcde93b3d479813abecbbc877a5c0</anchor>
      <arglist>(From const &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>byteswap</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a50b397be3a6964a1f150ceb189afabb5</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_big_endian</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a5764cccca8658c6880ab03364b4fcda5</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_little_endian</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a571786331157b178e73d2ac05d14751b</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lazy</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a702fe0cca3278589eeca41da81cd2e5b</anchor>
      <arglist>(F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; C &gt;</type>
      <name>to_string</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>abed9db28b478cd89e3f00adba8f6632a</anchor>
      <arglist>(T const &amp;value)=delete</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::basic_string_view&lt; C &gt;</type>
      <name>as_str</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a0caf7f4c7ee8a9aa65b3dd556e1e656c</anchor>
      <arglist>(T const &amp;type)=delete</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>from_str</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>aeb6cbc9c9826b7eef31366ea5d000db2</anchor>
      <arglist>(std::basic_string_view&lt; C &gt; const &amp;str)=delete</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; E, T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a862fc8debabdcf89cfbecdeaa41c8798</anchor>
      <arglist>(std::basic_ostream&lt; E, T &gt; &amp;os, source_location const &amp;loc)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ae42bed75bde5f4d4e4c715b00c5cdec5</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, optional&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a43e660efbbd21846c0099fd98d7e7974</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, nullopt_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>acb3873114fe93ce619a39084b59b2a2f</anchor>
      <arglist>(optional&lt; T &gt; const &amp;lhs, U const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; std::decay_t&lt; T &gt; &gt;</type>
      <name>some</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a4d27def5f33f561207ecbc421b842d55</anchor>
      <arglist>(T &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreachable</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a50d147e6e631344b3cde7c0675356297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>to_underlying</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>affa14ea3afee7f187363d2bb66d8c619</anchor>
      <arglist>(T t) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>requires</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a6d52381572c2e07d26fe0f098e415fe5</anchor>
      <arglist>(std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_or(e);} or requires(T e) { enum_flag(e);}) const expr T operator|(T const lhs</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>requires</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a20e28b3aab12b53a988da11bc35d96d9</anchor>
      <arglist>(std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_and(e);} or requires(T e) { enum_flag(e);}) const expr T operator&amp;(T const lhs</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>requires</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a3e3a83dfbd448a580a08b4857294dee3</anchor>
      <arglist>(std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_xor(e);} or requires(T e) { enum_flag(e);}) const expr T operator^(T const lhs</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>requires</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>ab240fea9981964f1f2100d4a7787ca13</anchor>
      <arglist>(std::is_enum_v&lt; T &gt; and requires(T e) { enable_bitwise_not(e);} or requires(T e) { enum_flag(e);}) const expr T operator~(T const value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_weak_ptr_compatible_v</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a666a4e9726827588e42f0857d8a87c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_callable_v</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a0ce1d8dcc7700b383ed4cab2a35ef160</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr nullopt_t</type>
      <name>nullopt</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a3052f5fbb6fc7bc98ecb11360c416a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>none</name>
      <anchorfile>namespacerolly.html</anchorfile>
      <anchor>a9365b793fe547271e48fa719a7f4854d</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="namespacerolly_1_1contracts.html" title="introduction">Quick</docanchor>
    <docanchor file="namespacerolly_1_1contracts.html">Usage</docanchor>
    <docanchor file="namespacerolly_1_1contracts.html">Examples</docanchor>
  </compound>
  <compound kind="namespace">
    <name>rolly::concepts</name>
    <filename>namespacerolly_1_1concepts.html</filename>
    <member kind="variable">
      <type>concept</type>
      <name>enum_</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>a0b007b1ce299704da471216af2c258b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>num</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>aea9bb2c4075cdbbe6ae4d3b6eef46cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>ptr</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>ab11672aee126fbc1d72aa1d291083b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>c_ptr</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>a24803776179d4c83561a9694a844d2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>smart_ptr</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>abed47d96e090d873adc3791a1733dd43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>ptr_like</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>a70606b9cb7fe0186e2e3c0fe8e05d9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>standard_copyable_and_movable</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>a4e85a3493f53e852cc6c696ff8f01774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>basic_lockable</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>a256eaf11e6fe6f4b4cb5c15f4c2bb67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>lockable</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>a7a511e60ad4941089b08e074792f3225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>timed_lockable</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>a52c57da298d52036a7b419d018d30d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>shared_lockable</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>a6b5e1f3d81caf56871288a0922106fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>shared_timed_lockable</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>a7ac96a877f45b8fe4d206f5a3b4227d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>mutex</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>a9f03a450503a49209711d9aabb33235b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>timed_mutex</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>af2eae4a13cdc90beea2c6cd6f2af64e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>shared_mutex</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>aac94bac785c4e7e42c81dd7c46c8a4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>concept</type>
      <name>shared_timed_mutex</name>
      <anchorfile>namespacerolly_1_1concepts.html</anchorfile>
      <anchor>a286dcad460016fe53f98e8d0c6cf6be1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::contracts</name>
    <filename>namespacerolly_1_1contracts.html</filename>
    <namespace>rolly::contracts::audit</namespace>
    <namespace>rolly::contracts::detail</namespace>
    <class kind="struct">rolly::contracts::contract_violation</class>
    <member kind="typedef">
      <type>std::function&lt; void(contract_violation const  &amp;)&gt;</type>
      <name>contract_violation_handler</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>aca5defb1c056aa55df22bc093159c32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>contract_type</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>abc0d6ffe3d1fdb96d3872c5148f529e2</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly_1_1contracts.html" anchor="abc0d6ffe3d1fdb96d3872c5148f529e2ac3c270a815f2c6329cf95844e757cf7f">precondition</enumvalue>
      <enumvalue file="namespacerolly_1_1contracts.html" anchor="abc0d6ffe3d1fdb96d3872c5148f529e2a251848760bc80cc0b08dec58b4199c6b">postcondition</enumvalue>
      <enumvalue file="namespacerolly_1_1contracts.html" anchor="abc0d6ffe3d1fdb96d3872c5148f529e2a97a1fb4792ab0d80857d825020ced2f0">invariant</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>default_contract_violation_handler</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>ab0bc120d0ba17557276c0082ec51e7b0</anchor>
      <arglist>(contract_violation const &amp;violation)</arglist>
    </member>
    <member kind="function">
      <type>contract_violation_handler &amp;</type>
      <name>violation_handler</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>aecea849c17224c0824619ce3e30c5f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>contract_violation_handler</type>
      <name>set_violation_handler</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>ad4881604e9bfa8b79bcb9c1e23f1e7af</anchor>
      <arglist>(contract_violation_handler handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invariant</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>ad298c10384725ecb46aa64acbe8f7d07</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Invariant violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precondition</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>aa8946f97218fccab5c3252ded10a82dd</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Precondition violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postcondition</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>a6fc741e9082a3b9384dfd50c1b36e64b</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Postcondition violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_invariant</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>a85522a06efdcca823d5c7119ebafb850</anchor>
      <arglist>(std::string_view message=&quot;Broken invariant&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_precondition</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>ab1f48107fb7de5e343fb595d41219bfa</anchor>
      <arglist>(std::string_view message=&quot;Broken precondition&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_postcondition</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>a4660f2a90742b97d33d90f3dfd4ee812</anchor>
      <arglist>(std::string_view message=&quot;Broken postcondition&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>not_implemented</name>
      <anchorfile>namespacerolly_1_1contracts.html</anchorfile>
      <anchor>adfba2187b8f7e9795c0fb5ec669a15a9</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="namespacerolly_1_1contracts.html" title="introduction">Quick</docanchor>
    <docanchor file="namespacerolly_1_1contracts.html">Usage</docanchor>
    <docanchor file="namespacerolly_1_1contracts.html">Examples</docanchor>
  </compound>
  <compound kind="namespace">
    <name>rolly::contracts::audit</name>
    <filename>namespacerolly_1_1contracts_1_1audit.html</filename>
    <member kind="function">
      <type>void</type>
      <name>invariant</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a7e49ec735d033ca6f6da7652f78c4a30</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Invariant violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precondition</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a6c79fd5607d45e582936442da6e322f4</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Precondition violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postcondition</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a9cf84ba57be583af6f5a3972047d8416</anchor>
      <arglist>(bool expression, std::string_view message=&quot;Postcondition violated&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_invariant</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a90bd93c4cbe4a541b3398ee95ed17505</anchor>
      <arglist>(std::string_view message=&quot;Broken invariant&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_precondition</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a5bf2bc45f46e47e578f2defd5d87b52a</anchor>
      <arglist>(std::string_view message=&quot;Broken precondition&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broken_postcondition</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a040c855daee4842d4c0caefd701b6607</anchor>
      <arglist>(std::string_view message=&quot;Broken postcondition&quot;,)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>not_implemented</name>
      <anchorfile>namespacerolly_1_1contracts_1_1audit.html</anchorfile>
      <anchor>a123d98f0454da1fde978fa21ec6dd5e4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::contracts::detail</name>
    <filename>namespacerolly_1_1contracts_1_1detail.html</filename>
    <member kind="function">
      <type>contract_violation</type>
      <name>make_contract_violation</name>
      <anchorfile>namespacerolly_1_1contracts_1_1detail.html</anchorfile>
      <anchor>a85609edb0083695bff46154dd637729f</anchor>
      <arglist>(contract_type type, std::string_view message, source_location location=source_location::current())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>violate</name>
      <anchorfile>namespacerolly_1_1contracts_1_1detail.html</anchorfile>
      <anchor>a51d1323752d48a6e020de21fbda1e7f5</anchor>
      <arglist>(contract_type type, std::string_view message, source_location location=source_location::current())</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::dll</name>
    <filename>namespacerolly_1_1dll.html</filename>
    <class kind="class">rolly::dll::plugin</class>
    <class kind="class">rolly::dll::plugin_loader</class>
    <class kind="class">rolly::dll::shared_library</class>
  </compound>
  <compound kind="namespace">
    <name>rolly::exceptions</name>
    <filename>namespacerolly_1_1exceptions.html</filename>
    <class kind="class">rolly::exceptions::compile_time_error</class>
    <class kind="class">rolly::exceptions::deserialization_error</class>
    <class kind="class">rolly::exceptions::serialization_error</class>
  </compound>
  <compound kind="namespace">
    <name>rolly::io</name>
    <filename>namespacerolly_1_1io.html</filename>
    <class kind="class">rolly::io::filedevice</class>
  </compound>
  <compound kind="namespace">
    <name>rolly::literals</name>
    <filename>namespacerolly_1_1literals.html</filename>
    <member kind="function">
      <type>ROLLY_SEMVER_CONSTEXPR version</type>
      <name>operator&quot;&quot;_version</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>ae36f4e7b9c0900e1c08d9970b026fbbd</anchor>
      <arglist>(char const *str, std::size_t length)</arglist>
    </member>
    <member kind="function">
      <type>constexpr types::guid</type>
      <name>operator&quot;&quot;_guid</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>abea83e51940b3acc66bd8653aeaa5b3d</anchor>
      <arglist>(char const *str, [[maybe_unused]] std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>constexpr u8</type>
      <name>operator&quot;&quot;_u8</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>acf433e8d6e87da7af978d013539d49a1</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr u16</type>
      <name>operator&quot;&quot;_u16</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>aa51af4429132793804e7cbd58cbbb475</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr u32</type>
      <name>operator&quot;&quot;_u32</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>a504d921fb134987c823035c51e67b34e</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr u64</type>
      <name>operator&quot;&quot;_u64</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>aa1cfc025562a8f6fc45ebc2e8b3cea61</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i8</type>
      <name>operator&quot;&quot;_i8</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>af611e64610df729a9e1872568d1099d6</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i16</type>
      <name>operator&quot;&quot;_i16</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>a438692acf067c10b44fdbf9eed97622c</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i32</type>
      <name>operator&quot;&quot;_i32</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>a61c21310574460f54b6148ff6c42fe51</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr i64</type>
      <name>operator&quot;&quot;_i64</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>a1bcd1df8f709d31ff1cc06e3d2929517</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::ptrdiff_t</type>
      <name>operator&quot;&quot;_ptrdiff</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>ab825871c5237ddc75b7179443db597cd</anchor>
      <arglist>(ulonglong value)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator&quot;&quot;_pvoid</name>
      <anchorfile>namespacerolly_1_1literals.html</anchorfile>
      <anchor>aa48d1bac5b89868b7197a9c87a1c3ce2</anchor>
      <arglist>(unsigned long long value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::math</name>
    <filename>namespacerolly_1_1math.html</filename>
    <member kind="function">
      <type>constexpr int</type>
      <name>popcount</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>a2264e542a12579ea469c63ecdee1883d</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_single_bit</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>ac856a1cb702219f1d1035f0ce0945492</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_pow2</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>a9f9d00ff5e0c49434b60e113d83be45e</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_ceil</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>af2e45c6029de89f124eb5f3d415b19be</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>floor</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>ae71706eff25ec5df1ff62b4ae7be36a5</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>min</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>a06b1201488c8539a55f0d15c3142c846</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>min</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>a3a1a1d027d2cc6931b957029c079ad98</anchor>
      <arglist>(T const &amp;v1, T const &amp;v2, Args const &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>max</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>ab3a14f303ad6df0c90ec3f7d5f57154f</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>max</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>a00d802cbcc79c27d8b780034747072fd</anchor>
      <arglist>(T const &amp;v1, T const &amp;v2, Args const &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>abs</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>aa3571ee367243a1d142a7dc27a0ffa2d</anchor>
      <arglist>(T const &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr f32</type>
      <name>fmod</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>a94cb063ba3f91b4919f5fd80469f9260</anchor>
      <arglist>(f32 const x, f32 const y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_radians</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>a8b04e5cf1529e6fad4b713259ce61722</anchor>
      <arglist>(T degrees) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>to_degrees</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>a92152fa5d7fe7579552beee6eb51014e</anchor>
      <arglist>(T radians) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_eq</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>a3ac3258dd6ee92741399970d50868c2e</anchor>
      <arglist>(T a, T b, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_null</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>ab3a5a941d1f40a4960f8090e98c680d9</anchor>
      <arglist>(T a, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>div_euclid</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>a241b7b3a3e1ba6ed1cfe08d1367b77ee</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rem_euclid</name>
      <anchorfile>namespacerolly_1_1math.html</anchorfile>
      <anchor>a7209b4640ac965aaa277f6d2d2fb017d</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::meta</name>
    <filename>namespacerolly_1_1meta.html</filename>
    <class kind="class">rolly::meta::project_meta</class>
    <member kind="variable" static="yes">
      <type>static const auto</type>
      <name>library_metadata</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0afd1b8278623202b4061a6142aa4ec3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::numbers</name>
    <filename>namespacerolly_1_1numbers.html</filename>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>pi</name>
      <anchorfile>namespacerolly_1_1numbers.html</anchorfile>
      <anchor>a95ed8d1f751904d69454dbb31f1f247d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>e</name>
      <anchorfile>namespacerolly_1_1numbers.html</anchorfile>
      <anchor>ab7374b6e3094e3cf3c26ef8d96348200</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::qt</name>
    <filename>namespacerolly_1_1qt.html</filename>
  </compound>
  <compound kind="namespace">
    <name>rolly::rtti</name>
    <filename>namespacerolly_1_1rtti.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>demangle</name>
      <anchorfile>namespacerolly_1_1rtti.html</anchorfile>
      <anchor>a8ac2bded160f24b7225d60eed02a5f27</anchor>
      <arglist>(char const *name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type_name</name>
      <anchorfile>namespacerolly_1_1rtti.html</anchorfile>
      <anchor>af8c9dca0ced5ad5cf39f7b94be3a5208</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rolly::serialization</name>
    <filename>namespacerolly_1_1serialization.html</filename>
    <namespace>rolly::serialization::format</namespace>
  </compound>
  <compound kind="namespace">
    <name>rolly::serialization::format</name>
    <filename>namespacerolly_1_1serialization_1_1format.html</filename>
    <class kind="struct">rolly::serialization::format::bson</class>
    <class kind="struct">rolly::serialization::format::cbor</class>
    <class kind="struct">rolly::serialization::format::flexbuffer</class>
    <class kind="struct">rolly::serialization::format::generic</class>
    <class kind="struct">rolly::serialization::format::json</class>
    <class kind="struct">rolly::serialization::format::msgpack</class>
    <class kind="struct">rolly::serialization::format::toml</class>
    <class kind="struct">rolly::serialization::format::xml</class>
    <class kind="struct">rolly::serialization::format::yaml</class>
  </compound>
  <compound kind="namespace">
    <name>rolly::types</name>
    <filename>namespacerolly_1_1types.html</filename>
    <class kind="struct">rolly::types::angle</class>
    <class kind="class">rolly::types::guid</class>
    <class kind="class">rolly::types::point2d</class>
    <class kind="struct">rolly::types::size2d</class>
    <class kind="struct">rolly::types::vector2d</class>
    <class kind="struct">rolly::types::velocity</class>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>u8</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a254d32383658e016368673396e7afc1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>u16</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a917e58b0692c2df778a27350534cbfe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>u32</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a65cf28726f89e62ccf2f1354bc2716df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>u64</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a66e1d499241ccae9a18a20a1f4f0590d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int8_t</type>
      <name>i8</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a090e14ab721404d80f4404634d5c79cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int16_t</type>
      <name>i16</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>aa9061c03e78b5c69a2e90542f956b1b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>i32</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>aec4a1429cc91fb7ff41599b263c348cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int64_t</type>
      <name>i64</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>ae72e52134285dbd83ca4227ec77394a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>usize</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>ac47ac2e28dd2cb38fbf05ce10f810407</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::make_signed_t&lt; std::size_t &gt;</type>
      <name>isize</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a30f901b0e451a40d688c0fe8ec125c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>f32</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>ad34d88453d37b65a09797bad37f2f527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>f64</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>abc2f107791bd7c1d49ecf0f168c085a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>f128</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>aa2dce0ff04d649f59f59d9008b781747</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uintptr_t</type>
      <name>uptr</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>adbee524399dbb70a713e4c94d3bc00be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>ulonglong</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a70c2c38542d55bfe51d75907a6c8125a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a69aa29b598b851b0640aa225a9e5d61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>angle_unit</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a3f652efe88945dad9f5db87673b0909e</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly_1_1types.html" anchor="a3f652efe88945dad9f5db87673b0909ea18daee01fc6e54aacd7f4c2eef60ff4d">degrees</enumvalue>
      <enumvalue file="namespacerolly_1_1types.html" anchor="a3f652efe88945dad9f5db87673b0909ea017969ba49117264eb077e9f66daacfd">radians</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>velocity_unit</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a48de939a7ab495a5cd0a8e834673d6d7</anchor>
      <arglist></arglist>
      <enumvalue file="namespacerolly_1_1types.html" anchor="a48de939a7ab495a5cd0a8e834673d6d7ac01a692efdbdbc7211b76bb9309a48a1">kmph</enumvalue>
      <enumvalue file="namespacerolly_1_1types.html" anchor="a48de939a7ab495a5cd0a8e834673d6d7a7c1dc91629afef3369fc77b119a2e24d">mps</enumvalue>
      <enumvalue file="namespacerolly_1_1types.html" anchor="a48de939a7ab495a5cd0a8e834673d6d7a400b6d1abbad6e83b994800d62c03fee">kilometers_per_hour</enumvalue>
      <enumvalue file="namespacerolly_1_1types.html" anchor="a48de939a7ab495a5cd0a8e834673d6d7a7355df818aff8043f3acaeda426ae396">meters_per_second</enumvalue>
    </member>
    <member kind="function">
      <type>unexpected&lt; std::decay_t&lt; std::string &gt; &gt;</type>
      <name>error</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a2c2d7fe1f4fcd1432bb6ee51c059306f</anchor>
      <arglist>(std::string_view format, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>expected&lt; std::decay_t&lt; T &gt;, std::string &gt;</type>
      <name>ok</name>
      <anchorfile>namespacerolly_1_1types.html</anchorfile>
      <anchor>a80f2e5353f29a764733f510a9a2481c9</anchor>
      <arglist>(T &amp;&amp;t)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
    <class kind="struct">std::hash&lt; rolly::box&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; rolly::guid &gt;</class>
    <class kind="struct">std::hash&lt; rolly::observer_ptr&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; rolly::optional&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; rolly::types::point2d&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; rolly::types::size2d&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; rolly::types::vector2d&lt; T &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>core</name>
    <title>Core</title>
    <filename>group__core.html</filename>
    <subgroup>macros</subgroup>
    <subgroup>meta</subgroup>
    <subgroup>platform</subgroup>
  </compound>
  <compound kind="group">
    <name>macros</name>
    <title>Definitions and macros</title>
    <filename>group__macros.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_DOC</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga505b4a9fc37ca5cbd8fdcfdf5ef88dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___constexpr___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga0c9fde80eb6d7ab75a391dc178ef18b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_QT_CORE</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>gaa032e9c37560d16eb522f6ad25d09893</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_QT_GUI</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>gacdcb0a5fcef3d4a927a21b45ab4242a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_DEBUG</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga7529dd8806261ce6d42e74b6b8640645</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_NO_DEBUG</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga4bd557993872c902c6e785cb8a606e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___noinline___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga145bb0d26bb2157f4dc7874127366986</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>___inline___</name>
      <anchorfile>group__macros.html</anchorfile>
      <anchor>ga791216d5be3d4ee7f5b5b04f597a7fcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>meta</name>
    <title>Library metadata</title>
    <filename>group__meta.html</filename>
    <class kind="class">rolly::meta::project_meta</class>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_MAJOR</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4c07a7f4f44a9eec2a3b92ebef8ad9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_MINOR</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabc35d3d52e0303eeb8c1405ee12476e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_PATCH</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga637777bfc47867a8af6831a84ba402e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_VERSION_STRING</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3aec6b852a182be7e4f678760707530a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const auto</type>
      <name>library_metadata</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0afd1b8278623202b4061a6142aa4ec3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>platform</name>
    <title>Platform</title>
    <filename>group__platform.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_WINDOWS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga3ac2093cf66c05ed2254c38419269b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_LINUX</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gad060f36ed8c26cd0962f465ce31711dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_DARWIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gab5514b1891219769aa14d21e80ed8608</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_ANDROID</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga989564bc81f298ea3be6d5ebc3ccaf19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_IOS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gacf820cfe648cdfff6118bf3ea7a468fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_CYGWIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gae4e7ffb21e0842d6e1a7ce8c7e33ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_FREEBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gad18005e148adeb353ea1ead9a885a497</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_DRAGONFLY</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaf8e1352717a68b2f0512331142b2a185</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_NETBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga1cbbe058d150e202e08ff27f93eb487c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLYOPPY_OS_OPENBSD</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0f1f18fee1cd87a8eba133825fda2779</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_OS_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga554e07346830d0faf9b967b1b641d1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_X86_32</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga890d65212ce7a0f8eea1afa31de77fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_X86_64</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga450bb34f0bd2c32320a771e4d789ad7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_ALPHA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga09a70e8470acbaa51a65fb264ad16bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_ARM</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga628febc9470197aa352f8016dad24a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_BFIN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0f138c49b35a6a59a577165807bbdd47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_CONVEX</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaa2de711cdd8d7c84e8f0137477841f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_E2K</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga510bee8caa4157b4847084ba997275f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_IA64</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gafe790513c5d737dca75dbf755af849a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_LOONGARCH</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga22f7382a3682a533e7a0c553a155e62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_M68K</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga7874f48b75bba92f83b288578fdee7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_MIPS</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0f713ee81bc999aba8cb5d387cfa7b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_HPPA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga57b544d6326b7e173678bb9c82989675</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_POWERPC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gac4fcae5db6d5ecb1f878da9a8e56a42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_CUDA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gabd1662c2611f3c6159a9d01e7e99e395</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_PYRAMID</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga49884b4788f50bb0ab4727533f78c40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_RISCV</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gab1655d147cf1bc9e32e1da6b8ac53f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_RS6000</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga6326919fd5ea05f09fe0743d2a950c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_SPARC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga26f2ec079683603790985f7e45aaddbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_SUPERH</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga792872a7c42c6aa9442f70afeae5172c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ARCH_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaede03277d29b2378353e2f24794f5265</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_CLANG</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga4866f2313174db6a067b61d63c174672</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_GNU</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga84aa2b5b51025d52183c06f236113007</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_INTEL</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga0d31831f176d24cde1fb95556b50b4f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_NVIDIA</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gae7fff818a131b880b357a83bcd16d634</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_MSVC</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga5deb8ecba17561da1fd2a34bb000e6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_COMPILER_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gac522f7e788f608ec355ad390a0fe3de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ENDIAN_BIG</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>gaf6bc941a5499e1203ce88d31e521598e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ENDIAN_LITTLE</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga5fc2015645e6eb1845fe995e9dda9862</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROLLY_ENDIAN_UNKNOWN</name>
      <anchorfile>group__platform.html</anchorfile>
      <anchor>ga8132bb6bedcf01aa05cc4f45da438023</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>md__home_runner_work_rolly_rolly_README</name>
    <title>Rolly</title>
    <filename>md__home_runner_work_rolly_rolly_README</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Rolly documentation</title>
    <filename>index</filename>
    <docanchor file="index.html" title="Introduction">intro_sec</docanchor>
    <docanchor file="index.html" title="Installation">install_sec</docanchor>
    <docanchor file="index.html" title="Usage">usage_sec</docanchor>
    <docanchor file="index.html" title="License">license_sec</docanchor>
  </compound>
</tagfile>
